#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\date{Janvier 2021}


%espacement horizontal contrôlé TDM/TOC empêche chevauchement
\usepackage{tocloft}
\setlength{\cftfignumwidth}{3.5em}
\cftsetindents{section}{0em}{2.8em}
\cftsetindents{subsection}{2.4em}{3.7em}

%
\usepackage{xcolor}
\colorlet{BLUE}{blue}

%liens en gris TDM/TDF/TDT + hyperlien + citations biblio
\hypersetup{urlcolor=gray}
\hypersetup{linkcolor=gray}
\hypersetup{citecolor=gray}

% ???
\usepackage{alltt}
\usepackage{upquote}
\newcommand{\nospace}[1]{\texttt{#1}}

% faire apparaître les chapitres*
\let\newchapter\chapter
\long\def\chapter{\addtocontents{toc}{\penalty-3000}\newchapter}

\usepackage{newtxmath}

% tableau dans encadré TeX
\usepackage{tabularx}



% évite la numérotation des pages vides et met le numérotation i, ii, iii, iv, etc
% pour les pages avant les chapitres (numérotés arabian)
\usepackage{emptypage}
\usepackage{etoolbox}
% Fixing the appearance of the footer in the empty pages in between chapters.
\let\origdoublepage\cleardoublepage
\renewcommand{\cleardoublepage}{%
  \clearpage
  {\pagestyle{empty}\origdoublepage}%
}
% Finished fixing appearance

% empêche que les pages incomplètes incorporent des espaces verticaux
\raggedbottom

% citations comme [1-4] au lieu de [1,2,3,4]
\usepackage{cite}

% pour l'index
\usepackage{latexsym}
\usepackage{textgreek}

% séparation texte / notes de bas de page si page pas pleine
%\addtolength{\skip\footins}{5pt} 
\usepackage[bottom]{footmisc}

\listfiles
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize b5paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices true
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\backgroundcolor #ffffff
\fontcolor #000000
\index Index
\shortcut idx
\color #008000
\end_index
\index Index des fonctions extrinsèques
\shortcut ind
\color #008000
\end_index
\paperwidth 175cm
\paperheight 240mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\noun on
Think Julia
\begin_inset Newline newline
\end_inset


\size small
Comment penser comme un informaticien
\end_layout

\begin_layout Author

\size normal
\noun on
Auteurs: Ben Lauwens et Allen B.
 Downey
\size default

\begin_inset Newline newline
\end_inset


\size normal
Traduction française et aménagements: Thierry Lepoint
\size default

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\size small
\noun default
Version: B5-RV-1.1
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Droits associés à la version française
\end_layout

\begin_layout Standard
En vertu de la licence Creative Commons (
\begin_inset CommandInset href
LatexCommand href
name "CC BY-NC-SA 3.0 FR"
target "https://creativecommons.org/licenses/by-nc-sa/3.0/fr/"
literal "false"

\end_inset

; 
\emph on
Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions
 3.0 FR
\emph default
), vous êtes autorisé à partager (copier, distribuer et communiquer le matériel
 par tous moyens et sous tous formats) et adapter (remixer, transformer
 et créer à partir du matériel) selon les conditions suivantes:
\end_layout

\begin_layout Itemize

\emph on
Attribution
\emph default
 — Vous devez créditer le document, intégrer un lien vers la licence (en
 l'occurrence: 
\begin_inset CommandInset href
LatexCommand href
name "CC BY-NC-SA 3.0 FR"
target "https://creativecommons.org/licenses/by-nc-sa/3.0/fr/legalcode"
literal "false"

\end_inset

) et indiquer si des modifications ont été effectuées au document.
 Vous devez indiquer ces informations par tous les moyens raisonnables,
 sans toutefois suggérer que le présent auteur vous soutient ou soutient
 la façon dont vous avez utilisé son travail.
 
\end_layout

\begin_layout Itemize

\emph on
Pas d’utilisation commerciale
\emph default
 — Vous n'êtes pas autorisé à faire un usage commercial du présent document,
 tout ou partie du matériel le composant.
 
\end_layout

\begin_layout Itemize

\emph on
Partage dans les mêmes conditions — 
\emph default
Dans le cas où vous effectuez un remix, que vous transformez, ou créez à
 partir du matériel composant le document original, vous devez diffuser
 le document modifié dans les mêmes conditions, c'est-à-dire avec la même
 licence avec laquelle le document original a été diffusé.
 
\end_layout

\begin_layout Standard
Vous n'êtes pas autorisé à appliquer des conditions légales ou des mesures
 techniques qui restreindraient légalement autrui à utiliser le document
 dans les conditions décrites par la 
\begin_inset CommandInset href
LatexCommand href
name "licence"
target "https://creativecommons.org/licenses/by-nc-sa/3.0/fr/legalcode"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Figures/CC_by-nc-sa.svg

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Droits associés au présent document}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Préface de l'édition française
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markboth{Préface}{PRÉFACE}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Initialement publié en 2012 par 
\begin_inset CommandInset href
LatexCommand href
name "Alan Edelman"
target "https://fr.wikipedia.org/wiki/Alan_Edelman"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edelman, Alan
\end_layout

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Stefan Karpinski"
target "https://fr.wikipedia.org/wiki/Stefan_Karpinski"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Karpinski, Stefan
\end_layout

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Jeff Bezanson"
target "https://fr.wikipedia.org/wiki/Jeff_Bezanson"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Bezanson, Jeff
\end_layout

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "Viral B. Shah"
target "https://fr.wikipedia.org/wiki/Viral_B._Shah"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Shah, Viral B.
\end_layout

\end_inset

, Julia est un langage de programmation libre (
\begin_inset CommandInset href
LatexCommand href
name "licence MIT"
target "https://fr.wikipedia.org/wiki/Licence_MIT"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
MIT, licence
\end_layout

\end_inset

) dont les prémisses datent de 2009.
 Le code est arrivé à maturité en 2018 avec la version 1.0.
 Cependant, c'est seulement durant la période de confinement associée à
 la covid-19, au début mars 2020, que j'ai été véritablement attiré par
 Julia du fait qu'il s'agit d'un langage dont la syntaxe, aisée à comprendre,
 conduit rapidement, entre autres, à la résolution de problèmes scientifiques
 (mais aussi économiques et financiers), à l'apprentissage machine, à la
 manipulation de données de masse et à l'intelligence artificielle.
\end_layout

\begin_layout Standard
Au tout début mars, j'ai donc cherché un livre permettant d'apprendre le
 langage Julia.
 Parmi plusieurs ouvrages
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1,key-2,key-3,key-4,key-5"
literal "false"

\end_inset

, l'un m'a séduit par sa qualité, sa rigueur et la progressivité de l'apprentiss
age sans s'encombrer de détails inutiles: 
\begin_inset CommandInset href
LatexCommand href
name "Think Julia -- How to Think Like a Computer Scientist"
target "https://www.oreilly.com/library/view/think-julia/9781492045021/"
literal "false"

\end_inset

 de Ben Lauwens
\begin_inset Index idx
status open

\begin_layout Plain Layout
Lauwens, Ben
\end_layout

\end_inset

 et Allen B.
 Downey
\begin_inset Index idx
status open

\begin_layout Plain Layout
Downey, Allen B.
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

.
 Comme Julia demande à être diffusé aussi largement que possible compte
 tenu de ses qualités d'une part et que de l'autre il n'existe pas de livre
 en français pour 
\begin_inset Quotes cld
\end_inset

débutant
\begin_inset Quotes crd
\end_inset

, j'ai rapidement réalisé que s'imposait une traduction de 
\begin_inset CommandInset href
LatexCommand href
name "Think Julia -- How to Think Like a Computer Scientist"
target "https://www.oreilly.com/library/view/think-julia/9781492045021/"
literal "false"

\end_inset

 — lui-même 
\begin_inset Quotes cld
\end_inset

portage
\begin_inset Quotes crd
\end_inset

 de 
\begin_inset CommandInset href
LatexCommand href
name "Think Python -- How to Think Like a Computer Scientist"
target "https://www.greenteapress.com/thinkpython/thinkpython.html"
literal "false"

\end_inset

 d'Allen B.
 Downey.
 Quelques aménagements ont été apportés; ils sont mentionnés dans l'annexe
\begin_inset space ~
\end_inset

C (
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-C:-Notes-de-traduction"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Préface de la version française}
\end_layout

\end_inset


\color white
.
\end_layout

\begin_layout Section*
Traductions en espagnol et en portugais
\end_layout

\begin_layout Standard
Le lecteur trouvera également une traduction en espagnol sous 
\begin_inset CommandInset href
LatexCommand href
name "ce lien"
target "https://introajulia.org/"
literal "false"

\end_inset

 réalisée par Pamela Alejandra Bustamante Faúndez (Ph.D.
 à la Pontificia Universidad Católica de Chile) ainsi qu'une traduction
 en portugais sous 
\begin_inset CommandInset href
LatexCommand href
name "ce lien"
target "https://juliaintro.github.io/JuliaIntroBR.jl/index.html"
literal "false"

\end_inset

 réalisée par Abel Soares Siqueira, Gustavo Sarturi, João Okimoto, Kally
 Chung.
 Abel Soares Siqueira est professeur à l'Université fédérale du Paraná (UFPR),
 située à Curitiba, Brésil.
 Gustavo Sarturi est titulaire d'une licence en mathématiques industrielles
 de l'UFPR.
 João Okimoto est étudiant en informatique à l'UFPR et Kally Chung y est
 professeur d'ingénierie mécanique.
\end_layout

\begin_layout Standard
La coordination des traductions est assurée par 
\begin_inset CommandInset href
LatexCommand href
name "Christian Peel"
target "https://github.com/christianpeel"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Traductions espagnole et portugaise}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Remerciements
\end_layout

\begin_layout Standard
Ma gratitude s'adresse aux développeurs du langage Julia travaillant inlassablem
ent à l'efficacité et au rayonnement du langage ainsi qu'aux développeurs
 de la Free Software Foundation qui ont contribué aux logiciels \SpecialChar LyX
, \SpecialChar LaTeX
, \SpecialChar TeX
, Inkscape
 et Gimp ainsi qu'aux fontes Times Roman et TeX Gyre DejaVu Math, sans lesquels
 ce document n'aurait pu être réalisé.
\end_layout

\begin_layout Standard
Enfin, mes plus vifs remerciements vont aux relecteurs et correcteurs aussi
 avisés que scrupuleux: Maryse Debrichy et Claude Just.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Remerciements}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Right Address
Élouges, le 13 janvier 2021.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Thierry Lepoint"
target "thierry.lepoint@protonmail.com"
type "mailto:"
literal "false"

\end_inset


\begin_inset Newline newline
\end_inset

Site web: 
\begin_inset CommandInset href
LatexCommand href
name "Chimie et Julia"
target "https://www.chimieetjulia.org/e107"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Copyright (version en anglais)
\end_layout

\begin_layout Standard
Copyright © 2018 
\begin_inset CommandInset href
LatexCommand href
name "Allen Downey"
target "allendowney@gmail.com"
type "mailto:"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Ben Lauwens"
target "ben.lauwens@gmail.com"
type "mailto:"
literal "false"

\end_inset

.
 Tous droits réservés.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\emph on
Think Julia
\emph default
 est disponible sous la 
\begin_inset CommandInset href
LatexCommand href
name "licence Creative Commons"
target "https://creativecommons.fr/licences/"
literal "false"

\end_inset

 Attribution-NonCommercial 3.0 Unported License
\begin_inset Foot
status open

\begin_layout Plain Layout
ATTRIBUTION: toutes les licences Creative Commons obligent ceux qui utilisent
 vos 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvres à vous créditer de la manière dont vous le demandez, sans pour autant
 suggérer que vous approuvez leur utilisation ou leur donner votre aval
 ou votre soutien.
\end_layout

\begin_layout Plain Layout
PAS D’UTILISATION COMMERCIALE: vous autorisez les autres à reproduire, à
 diffuser et (à moins que vous ne choisissiez ‘Pas de Modification’) à modifier
 votre œuvre, pour toute utilisation autre que commerciale, à moins qu’ils
 obtiennent votre autorisation au préalable.
\end_layout

\end_inset

.
 Les auteurs maintiennent une version en ligne à l'adres\SpecialChar softhyphen
se 
\begin_inset CommandInset href
LatexCommand href
name "ThinkJulia.jl/latest/book.html"
target "https://benlauwens.github.io/ThinkJulia.jl/latest/book.html"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Ben Lauwens"
target "https://scholar.google.be/citations?user=zUF9RBMAAAAJ&hl=en"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Lauwens, Ben
\end_layout

\end_inset

 est professeur de mathématiques à l'
\begin_inset CommandInset href
LatexCommand href
name "École royale militaire - Koninklijke Militaire School"
target "https://www.rma.ac.be/fr/homepage"
literal "false"

\end_inset

 (RMA Belgium).
 Il est titulaire d'un doctorat en ingénierie et d'une maîtrise de la 
\begin_inset CommandInset href
LatexCommand href
name "KU Leuven"
target "https://www.kuleuven.be/lang/fr"
literal "false"

\end_inset

 et de la RMA, ainsi que d'une licence de la RMA.
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Allen B. Downey"
target "https://en.wikipedia.org/wiki/Allen_B._Downey"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Downey, Allen B.
\end_layout

\end_inset

 est professeur d'informatique à l'
\begin_inset CommandInset href
LatexCommand href
name "Olin College of Engineering"
target "https://www.olin.edu/"
literal "false"

\end_inset

.
 Il a enseigné au Wellesley College, au Colby College et à l'
\begin_inset CommandInset href
LatexCommand href
name "U.C. Berkeley"
target "https://fr.wikipedia.org/wiki/Universit%C3%A9_de_Californie_%C3%A0_Berkeley"
literal "false"

\end_inset

.
 Il est titulaire d'un doctorat en informatique de l'U.C.
 Berkeley et d'un master et d'une licence du 
\begin_inset CommandInset href
LatexCommand href
name "MIT"
target "https://fr.wikipedia.org/wiki/Massachusetts_Institute_of_Technology"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Une 
\begin_inset CommandInset href
LatexCommand href
name "version papier de ce livre est publiée par O'Reilly Media"
target "http://shop.oreilly.com/product/0636920215707.do"
literal "false"

\end_inset

 et peut être achetée sur 
\begin_inset CommandInset href
LatexCommand href
name "Amazon"
target "https://www.amazon.com/Think-Julia-Like-Computer-Scientist/dp/1492045039"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Copyright (version en anglais)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Dédicace (version en anglais)
\end_layout

\begin_layout Standard
Pour Emeline, Arnaud et Tibo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Dédicace (version en anglais)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color white
.
\color inherit

\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Préface (version en anglais)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markboth{Préface (version en anglais)}{PRÉFACE (VERSION EN ANGLAIS)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ben Lauwens: 
\begin_inset Quotes cld
\end_inset


\emph on
En janvier 2018, j'ai commencé la préparation d'un cours de programmation
 destiné aux étudiants sans expérience en programmation.
 Je voulais utiliser Julia, mais j'ai découvert qu'il n'existait aucun livre
 ayant pour but d'apprendre à programmer avec Julia comme premier langage
 de programmation.
 Il existe de merveilleux tutoriels qui expliquent les concepts-clés de
 Julia, mais aucun d'entre eux n'accorde suffisamment d'attention à l'apprentiss
age concernant la façon de penser comme un programmeur.
\end_layout

\begin_layout Standard

\emph on
Je connaissais le livre 
\begin_inset Quotes cld
\end_inset

Think Python
\begin_inset Quotes crd
\end_inset

 d'Allen Downey, qui contient tous les ingrédients-clés pour apprendre à
 programmer correctement.
 Cependant, ce livre était basé sur le langage de programmation Python.
 Ma première ébauche de notes de cours était un melting-pot de toutes sortes
 d'ouvrages de référence, mais, plus j'y travaillais, plus le contenu commençait
 à ressembler aux chapitres de 
\begin_inset Quotes cld
\end_inset

Think Python
\begin_inset Quotes crd
\end_inset

.
 Bientôt, l'idée de développer mes notes de cours comme un portage de ce
 livre pour Julia s'est concrétisée.
\end_layout

\begin_layout Standard

\emph on
Tout le matériel était disponible sous forme de carnets Jupyter dans un
 dépôt Git\SpecialChar softhyphen
Hub.
 Après avoir posté un message sur le site 
\begin_inset CommandInset href
LatexCommand href
name "Julia Discourses"
target "https://discourse.julialang.org/"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
Julia Discourse
\end_layout

\end_inset

 concernant les progrès de mon cours, les réactions se sont avérées très
 positives.
 Un livre sur les concepts de base de la programmation avec Julia comme
 premier langage de programmation était apparemment un chaînon manquant
 dans l'univers de Julia.
 J'ai contacté Allen pour lui demander si je pouvais lancer un portage officiel
 de 
\begin_inset Quotes cld
\end_inset

Think Python
\begin_inset Quotes crd
\end_inset

 vers Julia, et sa réponse a été immédiate: 
\begin_inset Quotes cld
\end_inset

Allez-y!
\begin_inset Quotes crd
\end_inset

 Il m'a mis en contact avec son éditeur chez O'Reilly Media et, un an plus
 tard, je mettais la dernière main à ce livre.
\end_layout

\begin_layout Standard

\emph on
C'était un parcours semé d'embûches.
 En août 2018, Julia 1.0 est sorti et, comme tous mes collègues programmeurs
 de Julia, j'ai dû procéder à une migration du code.
 Tous les exemples du livre ont été testés lors de la conversion des fichiers
 sources en fichiers AsciiDoc compatibles avec O'Reilly.
 La chaîne d'outils et le code des exemples ont dû être rendus conformes
 à la version 1.0 de Julia.
 Heureusement, il n'y a pas de conférence à donner en août...
\end_layout

\begin_layout Standard

\emph on
J'espère que ce livre vous plaira et qu'il vous aidera à apprendre à programmer
 et à penser comme un informaticien, au moins un peu.
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Préface (version en anglais) }
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Pourquoi choisir Julia?
\end_layout

\begin_layout Standard
Julia a été initialement publié en 2012 par 
\begin_inset CommandInset href
LatexCommand href
name "Alan Edelman"
target "https://fr.wikipedia.org/wiki/Alan_Edelman"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Stefan Karpinski"
target "https://fr.wikipedia.org/wiki/Stefan_Karpinski"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Jeff Bezanson"
target "https://fr.wikipedia.org/wiki/Jeff_Bezanson"
literal "false"

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "Viral B. Shah"
target "https://fr.wikipedia.org/wiki/Viral_B._Shah"
literal "false"

\end_inset

.
 Il s'agit d'un langage de programmation libre et open source (sous 
\begin_inset CommandInset href
LatexCommand href
name "licence MIT"
target "https://fr.wikipedia.org/wiki/Licence_MIT"
literal "false"

\end_inset

).
\end_layout

\begin_layout Standard
Le choix d'un langage de programmation est toujours subjectif.
 Les caractéristiques suivantes de Julia sont déterminantes:
\end_layout

\begin_layout Itemize
Julia est développé comme un langage de programmation performant,
\end_layout

\begin_layout Itemize
Julia utilise le 
\emph on
dispatch
\emph default
 multiple, ce qui permet au programmeur de choisir parmi différents modèles
 de programmation adaptés à l'application,
\end_layout

\begin_layout Itemize
Julia est un langage à typage dynamique qui peut facilement être utilisé
 de manière interactive,
\end_layout

\begin_layout Itemize
Julia a une jolie syntaxe de haut niveau, facile à apprendre,
\end_layout

\begin_layout Itemize
Julia est un langage de programmation à typage optionnel dont les types
 de données (définis par l'utilisateur) rendent le code plus clair et plus
 robuste,
\end_layout

\begin_layout Itemize
Julia dispose d'une bibliothèque standard étendue et de nombreux paquets
 tiers sont disponibles.
\end_layout

\begin_layout Standard
Julia est un langage de programmation unique, car il résout le problème
 dit des 
\begin_inset Quotes cld
\end_inset

deux langages
\begin_inset Quotes crd
\end_inset

.
 Aucun autre langage de programmation n'est nécessaire pour écrire un code
 performant.
 Cela ne signifie pas que cela se fait automatiquement.
 Il incombe au programmeur d'optimiser le code qui provoque un ralentissement
 à l'exécution, mais cela peut se faire dans Julia même.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Pourquoi choisir Julia?}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
À qui ce livre s'adresse-t-il?
\end_layout

\begin_layout Standard
Ce livre est destiné à tous ceux qui veulent apprendre à programmer.
 Aucune connaissance préalable formelle n'est requise.
\end_layout

\begin_layout Standard
De nouveaux concepts sont introduits progressivement et des sujets plus
 avancés sont décrits dans les chapitres suivants.
\end_layout

\begin_layout Standard
Think Julia peut être utilisé pour un cours d'un semestre au niveau lycée
 ou université.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{À qui ce livre s'adresse-t-il?}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Conventions typographiques
\end_layout

\begin_layout Description
italique les nouveaux termes ou des notions-clés sont indiqués en 
\emph on
italique
\emph default
.
 Lorsqu'un terme anglais est repris, il est indiqué en 
\emph on
italique
\emph default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
Dans la traduction française, les locutions latines sont en italique.
 
\end_layout

\end_inset


\end_layout

\begin_layout Description
renvois les renvois à des chapitres, sections, sous-sections (voire sous-sous-se
ctions), les renvois aux notes de bas de page et à la bibliographie ainsi
 que les liens hypertextes sont en gris et cliquables (sur ordinateur à
 l'aide de la souris [symbole 
\begin_inset Graphics
	filename Figures/PNG/souris_main.png
	lyxscale 4
	scale 1

\end_inset

]).
\end_layout

\begin_layout Description
mots
\begin_inset space ~
\end_inset

chasse
\begin_inset space ~
\end_inset

fixe
\begin_inset space ~
\end_inset

petit fonte utilisée pour le code des programmes.
\end_layout

\begin_layout Description
mots
\begin_inset space ~
\end_inset

chasse
\begin_inset space ~
\end_inset

fixe
\begin_inset space ~
\end_inset

bleu fonte faisant référence dans le texte aux éléments des programme tels
 que les noms de variables ou de fonctions, les bases de données, les types
 de données, les variables d'environnement, les déclarations et les mots-clés.
 
\end_layout

\begin_layout Standard
Plusieurs éléments sont indiqués pour attirer l'attention du lecteur:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
newtheorem*{tip}{Conseil}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

   Cette indication donne un conseil ou une suggestion.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
newtheorem*{note}{Note}
\end_layout

\begin_layout Plain Layout


\backslash
begin{note}
\end_layout

\begin_layout Plain Layout

   Cette mention apporte une information générale.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{note}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
newtheorem*{warning}{Avertissement}
\end_layout

\begin_layout Plain Layout


\backslash
begin{warning}
\end_layout

\begin_layout Plain Layout

   Cette information signale une mise en garde ou une situation où la prudence
 s'impose.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{warning}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Conventions typographiques}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Utilisation-des-exemples-de-code"

\end_inset

Utilisation des exemples de code (version en anglais)
\end_layout

\begin_layout Standard
Tout le code utilisé dans ce livre est disponible dans un dépôt Git
\begin_inset Index idx
status open

\begin_layout Plain Layout
Git
\end_layout

\end_inset

 sur GitHub
\begin_inset Index idx
status open

\begin_layout Plain Layout
GitHub
\end_layout

\end_inset

: 
\begin_inset CommandInset href
LatexCommand href
name "BenLauwens/ThinkJulia.jl"
target " https://github.com/BenLauwens/ThinkJulia.jl"
literal "false"

\end_inset

.
 Git est un système de contrôle de version qui permet de garder une trace
 des fichiers qui composent un projet.
 Une collection de fichiers sous le contrôle de Git est appelée un 
\begin_inset Quotes cld
\end_inset

dépôt
\begin_inset Quotes crd
\end_inset

.
 GitHub est un service d'hébergement qui fournit un stockage pour les dépôts
 Git et une interface web pratique.
\begin_inset Foot
status open

\begin_layout Plain Layout
Pour créer un compte GitHub, référez-vous à 
\begin_inset CommandInset href
LatexCommand href
name "Comment créer un compte GitHub"
target "https://fr.wikihow.com/cr%C3%A9er-un-compte-sur-GitHub"
literal "false"

\end_inset

.
 Pour installer Git (Windows, macOS et GNU/
\noun on
Linux
\noun default
), consulter 
\begin_inset CommandInset href
LatexCommand href
name "Installing Git -- The easy way"
target "https://gist.github.com/derhuerst/1b15ff4652a867391f03"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Compte tenu de modifications récentes (postérieures à la publication de
 Think Julia
\begin_inset space \thinspace{}
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

) concernant directement l'environnement de développement intégré de Julia
 (Atom
\begin_inset Index idx
status open

\begin_layout Plain Layout
Atom
\end_layout

\end_inset

/Juno
\begin_inset Index idx
status open

\begin_layout Plain Layout
Juno
\end_layout

\end_inset

) et de l'abandon de JuliaBox
\begin_inset Index idx
status open

\begin_layout Plain Layout
JuliaBox
\end_layout

\end_inset

, le traducteur se permet de renvoyer le lecteur à l'annexe 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour l'installation de Julia, de ses modules, de Visual Studio Codium
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codium
\end_layout

\end_inset

 et l'usage de carnets
\begin_inset Index idx
status open

\begin_layout Plain Layout
carnet
\end_layout

\end_inset

 (
\emph on
notebooks
\emph default
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
notebook
\end_layout

\end_inset

 d'utilisation sur le web ou en mode local.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Utilisation des exemples de codes (version
 en anglais)}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Remerciements (version en anglais)
\end_layout

\begin_layout Standard
Je tiens à remercier 
\begin_inset CommandInset href
LatexCommand href
name "Allen B. Downey"
target "https://en.wikipedia.org/wiki/Allen_B._Downey"
literal "false"

\end_inset

 pour avoir rédigé 
\begin_inset CommandInset href
LatexCommand href
name "Think Python, How to Think Like a Computer Scientist"
target "https://greenteapress.com/thinkpython/thinkpython.html"
literal "false"

\end_inset

 et de m'avoir permis d'effectuer un portage de son livre en Julia.
 Son enthousiasme est contagieux!
\end_layout

\begin_layout Standard
J'aimerais également remercier les relecteurs/correcteurs de ce livre, qui
 ont fait de nombreuses suggestions utiles: Tim Besard, Bart Janssens et
 David P.
 Sanders.
\end_layout

\begin_layout Standard
Merci à Melissa Potter de 
\begin_inset CommandInset href
LatexCommand href
name "O'Reilly Media"
target "https://www.oreilly.com/"
literal "false"

\end_inset

, qui a contribué à améliorer ce livre.
 Vous m'avez forcé à faire les choses correctement et à rendre ce livre
 aussi original que possible.
\end_layout

\begin_layout Standard
Merci à Matt Hacker de 
\begin_inset CommandInset href
LatexCommand href
name "O'Reilly Media"
target "https://www.oreilly.com/"
literal "false"

\end_inset

, qui m'a aidé avec la chaîne d'outils Atlas et qui a résolu quelques problèmes
 de syntaxe.
\end_layout

\begin_layout Standard
Merci à tous les étudiants ayant travaillé avec une première version de
 ce livre et à tous les contributeurs (cités ci-dessous) qui ont envoyé
 des corrections et des suggestions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Remerciements (version en anglais)}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Liste des contributeurs (version en anglais)
\end_layout

\begin_layout Standard
Si vous avez une suggestion ou une correction, veuillez envoyer un courriel
 à 
\begin_inset CommandInset href
LatexCommand href
name "Ben Lauwens"
target "ben.lauwens@gmail.com"
type "mailto:"
literal "false"

\end_inset

 ou ouvrir un numéro sur 
\begin_inset CommandInset href
LatexCommand href
name "GitHub"
target "https://github.com/"
literal "false"

\end_inset

.
 Si je fais une modification sur la base de vos commentaires, je vous ajouterai
 à la liste des contributeurs (sauf si vous demandez à être omis).
\end_layout

\begin_layout Standard
Faites-moi savoir avec quelle version du livre vous travaillez et avec quel
 format.
 Si vous incluez au moins une partie de la phrase dans laquelle l'erreur
 apparaît, cela facilitera la recherche.
 Les numéros de page et de section sont également utiles quoique peu aisés
 à utiliser.
\end_layout

\begin_layout Itemize
Scott Jones a signalé le changement de nom de 
\color blue
Void
\color inherit
 en 
\color blue
Nothing
\color inherit
, ce qui a lancé la migration vers Julia 1.0.
\end_layout

\begin_layout Itemize
Robin Deits a trouvé quelques fautes de frappe dans le chapitre
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Variables,-expressions-et-déclarations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Variables, expressions et déclarations).
\end_layout

\begin_layout Itemize
Mark Schmitz a suggéré d'activer la mise en évidence syntaxique,
\end_layout

\begin_layout Itemize
Zigu Zhao a détecté des bogues dans le chapitre
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Chaînes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Chaînes),
\end_layout

\begin_layout Itemize
Oleg Soloviev a détecté une erreur dans l'URL d'ajout du paquet 
\color blue
ThinkJulia
\color inherit
 (chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

),
\end_layout

\begin_layout Itemize
Aaron Ang a trouvé des problèmes de rendu et de dénomination,
\end_layout

\begin_layout Itemize
Sergey Volkov a détecté un lien brisé dans le chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Itération"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Itération),
\end_layout

\begin_layout Itemize
Sean McAllister a suggéré de mentionner l'excellent paquet 
\color blue
BenchmarkTools
\color black
,
\end_layout

\begin_layout Itemize
Carlos Bolech a envoyé une longue liste de corrections et de suggestions,
\end_layout

\begin_layout Itemize
Krishna Kumar a corrigé l'exemple de Markov dans le chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Sous-typage"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Sous-typage).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Liste des contributeurs (version en anglais)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Mode-de-fonctionnement"

\end_inset

Mode de fonctionnement d'un programme
\end_layout

\begin_layout Standard
Le but de ce livre est d'apprendre au lecteur à penser comme un informaticien.
 Cette façon de penser combine certaines des meilleures caractéristiques
 des mathématiques, de l'ingénierie et des sciences naturelles.
 Comme les mathématiciens, les informaticiens utilisent des langages formels
 pour expliciter des idées (en particulier les calculs).
 Tout comme les ingénieurs, ils conçoivent des structures, assemblent des
 composants dans divers systèmes et évaluent le meilleur compromis entre
 différentes possibilités.
 Comme les scientifiques, ils observent le comportement de systèmes complexes,
 formulent des hypothèses et vérifient leurs prédictions.
\end_layout

\begin_layout Standard
La compétence la plus importante pour un informaticien est la résolution
 de problèmes, c'est-à-dire la capacité à formuler ces problèmes, à penser
 de manière créative aux solutions et à exprimer la meilleure solution de
 manière claire et précise.
 Il s'avère que le processus d'apprentissage de la programmation est une
 excellente occasion de mettre en pratique les compétences nécessaires à
 la résolution de problèmes.
 C'est pourquoi ce chapitre s'intitule 
\begin_inset Quotes cld
\end_inset

 Mode de fonctionnement d'un programme 
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
À un certain niveau, le lecteur apprendra à programmer, une compétence utile
 en soi.
 À un autre niveau, la programmation pourra être exploitée comme un moyen
 d'atteindre un but.
 Au fur et à mesure, cette fin deviendra plus claire.
 
\end_layout

\begin_layout Section
Qu'est-ce qu'un programme
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
programme
\end_layout

\end_inset

?
\end_layout

\begin_layout Standard
Un programme est une séquence d'instructions qui établit la manière d'effectuer
 un calcul.
 Le calcul peut être mathématique, comme la résolution d'un système d'équations
 ou la recherche des racines d'un polynôme, mais il peut aussi être symbolique,
 comme la recherche et le remplacement de texte dans un document, ou encore
 graphique, comme le traitement d'une image ou la lecture d'une vidéo.
\end_layout

\begin_layout Standard
Les détails sont différents selon les langages, mais quelques instructions
 élémentaires apparaissent dans presque chaque langage:
\end_layout

\begin_layout Description
Données
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

entrée: il s'agit d'incorporer des données en provenance du clavier, d'un
 fichier, du réseau ou d'un autre appareil, 
\end_layout

\begin_layout Description
Sortie: il s'agit d'afficher les données à l'écran, les enregistrer dans
 un fichier, les envoyer sur le réseau, etc., 
\end_layout

\begin_layout Description
Mathématiques: il s'agit d'effectuer des opérations mathématiques de base
 com\SpecialChar softhyphen
me l'addition, la multiplication, etc., 
\end_layout

\begin_layout Description
Exécution
\begin_inset space ~
\end_inset

conditionnelle: il s'agit de vérifier certaines conditions et, en conséquence,
 de lancer le code approprié, 
\end_layout

\begin_layout Description
Répétition: il s'agit d'effectuer une action de manière répétée, généralement
 avec une variation donnée,
\end_layout

\begin_layout Standard
C'est à peu près tout.
 Chaque programme que nous avons utilisé, aussi complexe soit-il, est composé
 d'instructions qui ressemblent à ce qui est décrit précédemment.
 Nous considérerons donc la programmation comme le processus de décomposition
 d'une tâche ample et complexe en sous-tâches de plus en plus petites, jusqu'à
 ce que les sous-tâches soient suffisamment simples pour être exécutées
 à l'aide de ces instructions de base.
\end_layout

\begin_layout Section
Exécution de Julia
\end_layout

\begin_layout Standard
Après avoir lancé Visual Studio Codium
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codium
\end_layout

\end_inset

 (voir l'annexe
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

), nous arrivons sur une page telle que celle de la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:REPL-et-invite"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Le REPL
\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 (
\emph on
Read-Eval-Print Loop
\emph default
) de Julia est un programme qui lit et exécute le code Julia.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read-Eval-Print Loop
\end_layout

\end_inset

 Le REPL est exécutable en ouvrant un terminal sur JuliaBox et en saisissant
 
\family typewriter
julia
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
julia
\end_layout

\end_inset

 sur la ligne de commande.
 Quand le REPL démarre, nous devrions voir l'information telle que reprise
 dans 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:REPL-et-invite"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
Les premières lignes contiennent des informations sur le REPL, il se peut
 donc que ce soit un peu différent.
 Il faut vérifier que le numéro de version est au moins 1.0.0.
\end_layout

\begin_layout Standard
La dernière ligne est une invite qui indique que le REPL est prêt pour que
 nous puissions saisir du code.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PNG/Screenshot_julia_1-5-3.png
	scale 44

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:REPL-et-invite"

\end_inset

REPL
\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 et invite de saisie (
\color green
julia>
\color inherit
).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si nous saisissons une ligne de code et appuyons sur ENTER, le REPL affiche
 le résultat:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 1 + 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Un premier programme
\end_layout

\begin_layout Standard
Traditionnellement, le premier programme à écrire dans un nouveau langage
 informatique s'appelle 
\begin_inset Quotes cld
\end_inset

Hello, World!
\begin_inset Quotes crd
\end_inset

, bien qu'il n'affiche que l'expression
\color black
 
\color blue
Hello, World!
\color inherit
.
 Avec Julia, le code se présente comme ceci:
\begin_inset Index idx
status open

\begin_layout Plain Layout
println()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(
\color brown
"Hello, World!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello, World!
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il s'agit d'un exemple d'instruction permettant un affichage (à l'écran)
 avec retour à la ligne.
 Les guillemets droits
\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemets droits
\end_layout

\end_inset

 marquent le début et la fin du texte à afficher; ils n'apparaissent pas
 dans le résultat.
 Les parenthèses indiquent que 
\color blue
println
\color inherit
 est une fonction (voir le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Fonctions"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Section
Opérateurs arithmétiques
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
opérateurs arithmétiques
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'étape suivante concerne l'arithmétique.
\begin_inset Index idx
status open

\begin_layout Plain Layout
+
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
*
\end_layout

\end_inset

 Julia fournit des opérateurs de multiplication, de division, d'addition
 et de soustraction.
 Les opérateurs 
\color blue
+
\color inherit
, 
\color blue
-
\color inherit
 et
\color blue
 *
\color inherit
 effectuent des additions, des soustractions et des multiplications, comme
 dans les exemples suivants: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 40 + 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 43 - 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 6 * 7
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
/ 
\color inherit
effectue la division
\begin_inset Index idx
status open

\begin_layout Plain Layout
division décimale
\end_layout

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 84 / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pourquoi le résultat est-il 42.0 au lieu de 42? Ceci est expliqué dans la
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Valeurs-et-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Enfin, l'opérateur 
\color blue
^
\color inherit
 élève un nombre à une puissance donnée:
\begin_inset Index idx
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 6^2 + 6
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Valeurs-et-types"

\end_inset

Valeurs et types
\end_layout

\begin_layout Standard
Une valeur
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur
\end_layout

\end_inset

 est un des éléments de base avec lesquels un programme fonctionne, comme
 une lettre ou un nombre.
 Certaines des valeurs que nous avons vues jusqu'ici sont 
\color blue
2
\color inherit
, 
\color blue
42.0
\color inherit
 et 
\color blue
"Hello, World!"
\color inherit
.
\end_layout

\begin_layout Standard
Ces valeurs appartiennent à différents types
\begin_inset Index idx
status open

\begin_layout Plain Layout
type
\end_layout

\end_inset

: 
\color blue
2
\color inherit
 est un nombre entier, 
\color blue
42.0
\color inherit
 un nombre à virgule flottante et 
\color blue
"Hello, World!"
\color inherit
 une chaîne de caractères
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne de caractères
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
S'il y a un doute sur le 
\emph on
type
\emph default
 d'une valeur, le REPL peut fournir des renseignements: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
typeof()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Int64
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(42.0)
\end_layout

\begin_layout Plain Layout

\color lightgray
Float64
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(
\color brown
"Hello, World!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\color lightgray
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les nombres entiers appartiennent au type 
\color blue
Int64
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
Int64
\end_layout

\end_inset

 les chaînes de caractères au type 
\color blue
String
\color inherit
 et les nombres à virgule flottante au type 
\color blue
Float64
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
String
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Float64
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qu'en est-il des valeurs comme 
\color blue
"2"
\color inherit
 et 
\color blue
"42.0"
\color inherit
? Elles ressemblent à des nombres, mais comme elles sont entre guillemets,
 il s'agit de chaînes de caractères:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(
\color brown
"2"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
String
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(
\color brown
"42.0"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\color lightgray
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque des nombres constitués de nombreux chiffres sont saisis, il peut
 être tentant d'utiliser des virgules entre les groupes de chiffres, comme
 pour exprimer un million en notation anglo-saxonne: 
\family typewriter
1,000,000
\family default
.
 Ceci n'est pas un nombre 
\emph on
entier 
\emph default
autorisé en langage Julia, bien que cette représentation soit licite:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 1,000,000
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(1, 0, 0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Évidemment, ce n'est pas du tout le résultat espéré.
 Julia analyse 
\family typewriter
1,000,000
\family default
 comme une suite d'entiers, à savoir 1, 0 et 0, séparés par des virgules.
 Ce type de séquences sera analysé plus tard.
 Il est cependant possible d'obtenir le résultat recherché en utilisant
 
\family typewriter
1_000_000
\family default
.
 
\end_layout

\begin_layout Section
Langages formels et naturels
\end_layout

\begin_layout Standard
Les langages naturels
\begin_inset Index idx
status open

\begin_layout Plain Layout
langage naturel
\end_layout

\end_inset

 sont ceux que les êtres humains utilisent quotidiennement, comme l'anglais,
 l'espagnol, le français, etc.
 Ils n'ont pas été conçus d'un bloc par leurs utilisateurs parce qu'ils
 ont évolué naturellement et progressivement.
\end_layout

\begin_layout Standard

\emph on
A contrario
\emph default
, les langages formels
\begin_inset Index idx
status open

\begin_layout Plain Layout
langage formel
\end_layout

\end_inset

 sont conçus pour des applications spécifiques.
 Par ex\SpecialChar softhyphen
emple, la notation utilisée par les mathématiciens est un langage
 formel particulièrement efficace pour établir les relations entre les nombres
 et les symboles.
 Les chimistes utilisent un langage formel pour représenter la structure
 chimique des molécules et les réactions.
 Les langages de programmation sont des langages formels qui ont été conçus
 pour effectuer des calculs.
 
\end_layout

\begin_layout Standard
Le c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

ur des langages formels est constitué de règles syntaxiques strictes qui
 organisent la structure des énoncés.
 Par exemple, en mathématiques, l'énoncé 
\begin_inset Formula $3+3=6$
\end_inset

 a une syntaxe correcte, mais 
\begin_inset Formula $3+=3\$6$
\end_inset

 n'a pas de sens.
 En chimie, H
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

O est une formule syntaxiquement correcte, cependant que
\begin_inset space ~
\end_inset


\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

Zz ne l'est pas.
\end_layout

\begin_layout Standard
Les règles syntaxiques se déclinent en deux types, relatives aux signes
 d'une part et à la structure, de l'autre.
 Les signes sont les éléments de base de tout langage, tels que les mots,
 les nombres et les éléments chimiques.
 Un des problèmes avec 
\begin_inset Formula $3+=3\$6$
\end_inset

 est que 
\begin_inset Formula $\$$
\end_inset

 n'est en principe pas un signe autorisé en mathématiques.
 De même, 
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

Zz n'est pas licite, car il n'y a pas d'élément de symbole Zz.
 Le deuxième type de règle syntaxique concerne la manière dont les signes
 sont combinés.
 L'équation 
\begin_inset Formula $3+=3$
\end_inset

 est incorrecte car, même si + et = sont des signes autorisés, leur succession
 n'est pas définie en mathématiques et n'a dès lors pas de sens.
 De même, dans une formule chimique, l'indice vient éventuellement après
 le nom d'un élément, jamais avant.
\end_layout

\begin_layout Standard
Voici un exemple curieux: l@ phrase de françai$ bien structurée avec des
 s*gnes mal utilisés.
 Tous les signes de cette phrase sont valides, mais la structure de la phrase
 est erronée.
\end_layout

\begin_layout Standard
La lecture d'une phrase en français ou une déclaration dans une langue formelle
 suppose d'en comprendre la structure (bien que, dans une langue naturelle,
 tout lecteur procède ainsi, inconsciemment).
 Ce processus s'appelle l'
\emph on
analyse syntaxique
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
analyse syntaxique
\end_layout

\end_inset

.
 Bien que les langues formelles et naturelles aient de nombreuses caractéristiqu
es en commun — les signes, la structure et la syntaxe — il existe quelques
 différences notoires: 
\end_layout

\begin_layout Description
Ambiguïté
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ambiguïté
\end_layout

\end_inset

: les langues naturelles sont chargées d'ambiguïté, que les humains gèrent
 en utilisant des indices contextuels ainsi que d'autres informations.
 Les langues formelles sont conçues pour être presque ou totalement dépourvues
 d'ambiguïté, ce qui signifie que toute déclaration a une — et une seule
 — signification, quel que soit le contexte, 
\end_layout

\begin_layout Description
Redondance
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
redondance
\end_layout

\end_inset

: pour pallier l'ambiguïté et réduire les malentendus, les langues naturelles
 sont caractérisées par de nombreuses redondances.
 De ce fait, elles sont souvent verbeuses.
 Les langues formelles sont moins redondantes et plus concises, 
\end_layout

\begin_layout Description
Littéralité
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
littéralité
\end_layout

\end_inset

: les langues naturelles sont remplies d'expressions idiomatiques et de
 métaphores.
 Dans l'expression 
\begin_inset Quotes cld
\end_inset

 le franc est tombé 
\begin_inset Quotes crd
\end_inset

, il y a fort à parier qu'il n'y a pas de franc en jeu et que rien ne tombe
 (cette expression idiomatique signifie que quelqu'un a compris quelque
 chose après une période de confusion).
 Les langues formelles signifient exactement ce qu'elles disent.
 Comme nous grandissons tous en parlant des langues naturelles, il est parfois
 difficile de s'adapter aux langues formelles.
 La différence entre le langage formel et le langage naturel s'apparente
 à la différence entre la poésie et la prose, mais en plus:
\end_layout

\begin_deeper
\begin_layout Description
Poésie: les mots sont utilisés pour leurs sons ainsi que pour leur signification.
 L'ensemble du poème crée un effet ou une réponse émotionnelle.
 L'ambiguïté est non seulement courante, mais souvent délibérée, 
\end_layout

\begin_layout Description
Prose: le sens littéral des mots est important et la structure apporte du
 sens.
 La prose se prête davantage à l'analyse que la poésie, mais reste néanmoins
 souvent ambiguë, 
\end_layout

\end_deeper
\begin_layout Description
Programmes: la signification d'un programme informatique est sans ambiguïté
 et littérale, elle peut être entièrement comprise par l'analyse des signes
 et de la structure.
 
\end_layout

\begin_layout Standard
Les langages formels sont plus denses que les langues naturelles, ce qui
 nécessite plus de temps et de concentration pour les interpréter.
 De plus, la structure est fondamentale.
 Il n’est donc pas toujours judicieux de lire de haut en bas et de gauche
 à droite.
 Au lieu de cela, le lecteur apprend à analyser le programme mentalement,
 à identifier les signes et à interpréter la structure.
 Enfin, les détails sont importants.
 De petites erreurs d'orthographe ou de ponctuation, dont il est possible
 de s'affranchir dans les langues naturelles, peuvent entraîner des incompréhens
ions dans un langage formel.
\end_layout

\begin_layout Section
Débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tous les programmeurs commettent des erreurs.
 Pour des raisons quelque peu fantaisistes, les erreurs de programmation
 sont appelées 
\begin_inset Quotes cld
\end_inset

 bogues
\begin_inset Quotes crd
\end_inset

 et le processus pour les débusquer est appelé 
\begin_inset Quotes cld
\end_inset

 débogage 
\begin_inset Quotes crd
\end_inset

 (
\emph on
debugging
\emph default
).
 La programmation, et surtout le débogage, font parfois surgir des émotions
 fortes.
 Confronté à un bogue difficile, un programmateur peu aguerri peut se sentir
 en colère, découragé ou frustré.
 Il est prouvé que de très nombreuses personnes réagissent naturellement
 face aux ordinateurs comme si ces derniers étaient des personnes.
 Lorsque les ordinateurs fonctionnent bien, nous les considérons comme des
 coéquipiers, mais, lorsqu'ils se montrent obstinés, nous leur répondons
 de la même manière que si nous répondions à des personnes obstinées.
\end_layout

\begin_layout Standard
Se préparer à ces réactions aide à les surmonter.
 Une approche possible consiste à considérer l'ordinateur comme un employé
 doté de certains atouts tels la rapidité et la précision, mais aussi de
 faiblesses particulières, comme le manque d'empathie et l'incapacité à
 saisir la situation dans son ensemble.
 Le travail d'un programmeur consiste à être un bon gestionnaire: trouver
 des moyens de tirer parti des points forts et d'atténuer les points faibles,
 trouver des moyens d'effacer ses émotions pour s'attaquer au problème,
 sans laisser ses réactions interférer avec sa capacité à travailler efficacemen
t.
 
\end_layout

\begin_layout Standard
Apprendre à déboguer peut être frustrant, mais un bon débogueur possède
 une compétence précieuse très utile pour de nombreuses activités au-delà
 même de la programmation.
 À la fin de chaque chapitre, existe une section comme celle-ci, comportant
 diverses suggestions supposées utiles pour le débogage.
 
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
résolution
\begin_inset space ~
\end_inset

des
\begin_inset space ~
\end_inset

problèmes: processus consistant à formuler un problème, à trouver une solution
 et à l'exprimer, 
\end_layout

\begin_layout Description
programme: séquence d'instructions qui explicite un calcul, 
\end_layout

\begin_layout Description
REPL: programme qui lit les données d'entrée, les exécute et produit des
 résultats de manière répétée, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
invite: caractères affichés par le REPL pour indiquer qu'il est prêt à recevoir
 les données de l'utilisateur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
invite
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
declaration@déclaration
\end_layout

\end_inset

: instruction qui amène le REPL à afficher une valeur à l'écran, 
\end_layout

\begin_layout Description
opérateur
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
opérateur
\end_layout

\end_inset

: symbole qui permet l'exécution d'un calcul simple comme l'addition, la
 multiplication de nombres ou la concaténation de chaînes de caractères,
\end_layout

\begin_layout Description
valeur
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
valeur
\end_layout

\end_inset

: une des unités de base des données, comme un nombre ou une chaîne de caractère
s, qu'un programme manipule, 
\end_layout

\begin_layout Description
type
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
type
\end_layout

\end_inset

: une catégorie de valeurs.
 Les types vus jusqu'à présent sont les nombres entiers (
\color blue
Int64
\color inherit
), les nombres à virgule flottante (
\color blue
Float64
\color inherit
) et les chaînes de caractères (
\color blue
String
\color inherit
), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
String
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
Int
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
Int
\end_layout

\end_inset

: type qui représente des nombres entiers, 
\end_layout

\begin_layout Description
Float
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
Float
\end_layout

\end_inset

: type qui représente les nombres avec un point décimal, 
\end_layout

\begin_layout Description
Char
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
Char
\end_layout

\end_inset

: type qui représente des caractères uniques, 
\end_layout

\begin_layout Description
langage
\begin_inset space ~
\end_inset

naturel: toute langue que parlent les Hommes et qui a évolué naturellement,
 
\end_layout

\begin_layout Description
langage
\begin_inset space ~
\end_inset

formel: tout langage que les humains ont conçu à des fins spécifiques, comme
 la représentation de principes mathématiques ou de programmes informatiques.
 Tous les langages de programmation sont des langages formels, 
\end_layout

\begin_layout Description
syntaxe
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
syntaxe
\end_layout

\end_inset

: règles qui organisent la structure d'un programme, 
\end_layout

\begin_layout Description
signe: élément de base de la structure syntaxique d'un programme, analogue
 à un mot dans une langue naturelle, 
\end_layout

\begin_layout Description
structure: façon dont les signes sont combinés, 
\end_layout

\begin_layout Description

\emph on
parse
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
parse
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(analyse
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
analyse
\end_layout

\end_inset

): examen d'un programme et analyse de la structure syntaxique, 
\end_layout

\begin_layout Description

\emph on
bug
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
bug
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(bogue
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
bogue
\end_layout

\end_inset

): erreur dans un programme, 
\end_layout

\begin_layout Description
débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
debogage@débogage
\end_layout

\end_inset

: processus de recherche et de correction des bugs.
\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Lire ce contenu devant un ordinateur afin d'essayer les exemples au fur
 et à mesure constitue une bonne idée.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 1-1
\end_layout

\begin_layout Standard
Chaque fois qu'une une nouvelle fonctionnalité est expérimentée, il est
 indiqué de commettre volontairement des erreurs.
 Par exemple, dans le programme 
\begin_inset Quotes cld
\end_inset

Hello, World!
\begin_inset Quotes crd
\end_inset

, que se passe-t-il en cas d'omission d'un des guillemets? Et quand les
 deux sont omis? Et s'il y avait des fautes d'orthographe?
\end_layout

\begin_layout Standard
Ce genre d'expérience aide à se souvenir de ce qui est lu, ainsi que lors
 de l'exercice de programmation.
 En effet, c'est de cette manière qu'un programmeur apprend à connaître
 la signification des messages d'erreur.
 Il est préférable de faire des erreurs maintenant et volontairement plutôt
 que plus tard et accidentellement.
\end_layout

\begin_layout Enumerate
Dans une déclaration d'affichage, que se passe-t-il en cas d'omission d'une
 des parenthèses ou des deux?
\end_layout

\begin_layout Enumerate
À l'affichage d'une chaîne de caractères, que se passe-t-il si un des guillemets
 est omis ou les deux?
\end_layout

\begin_layout Enumerate
Un signe moins peut être utilisé pour obtenir un nombre négatif comme 
\family typewriter
-2
\family default
.
 Que se passe-t-il si un signe plus précède un nombre? Qu'en est-il de 
\family typewriter
2++2
\family default
?
\end_layout

\begin_layout Enumerate
En notation mathématique, les zéros de tête sont acceptés, comme dans 
\family typewriter
02
\family default
.
 Que se passe-t-il lorsqu'une telle notation est utilisée en Julia?
\end_layout

\begin_layout Enumerate
Que se passe-t-il lorsqu'il n'y a pas d'opérateur entre deux valeurs?
\end_layout

\begin_layout Subsection*
Exercice 1-2
\end_layout

\begin_layout Standard
Lançons le REPL Julia et utilisons-le comme calculatrice:
\end_layout

\begin_layout Enumerate
Combien de secondes y a-t-il dans 42 minutes 42 secondes? 
\end_layout

\begin_layout Enumerate
Sachant qu'un mile terrestre correspond à 1,61 km, combien de miles y a-t-il
 dans 10 kilomètres?
\end_layout

\begin_layout Enumerate
Si 10 kilomètres sont parcourus en 37 minutes 48 secondes, quel est le rythme
 moyen (temps par kilomètre en minutes et secondes)? Quelle est la vitesse
 moyenne en miles terrestres par heure?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Variables,-expressions-et-déclarations"

\end_inset

Variables, expressions et déclarations
\end_layout

\begin_layout Standard
La possibilité de manipuler des variables constitue une des grandes forces
 des langages de programmation.
 Une variable est un nom (lettre ou mot) qui fait référence à une valeur.
 
\end_layout

\begin_layout Section
Déclaration d'affectation
\end_layout

\begin_layout Standard
Une 
\emph on
déclaration d'affectation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
affectation, déclaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
declaration@déclaration d'affectation
\end_layout

\end_inset


\emph default
 crée une nouvelle variable et lui attribue une valeur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
message = 
\size default
\color brown
"À présent, quelque chose de nouveau"
\end_layout

\begin_layout Plain Layout

\color lightgray
"À présent, quelque chose de nouveau"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 n = 17
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
17
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 π_val = 3.141592653589793
\end_layout

\begin_layout Plain Layout

\color lightgray
3.141592653589793
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple, la première affectation associe une chaîne à une nouvelle
 variable nommée 
\color blue
message
\color inherit
.
 La deuxième associe l'entier 17 à 
\color blue
n
\color inherit
.
 La troisième apparie la valeur approximative de π à la variable 
\color blue
π_val 
\color inherit
(pour obtenir le symbole π, il convient de saisir 
\color blue

\backslash
pi
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black

\backslash
pi
\end_layout

\end_inset


\color inherit
 et de presser la touche 
\color blue
TAB
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
TAB
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Une manière courante de représenter les variables sur papier consiste à
 écrire le nom avec une flèche pointant vers sa valeur.
 Ce type de figure est appelé un 
\emph on
diagramme d'état
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
diagramme d'état
\end_layout

\end_inset

,
\emph default
 car il montre dans quel état se trouve chacune des variables.
 La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Exemple-de-diagramme-état"
plural "false"
caps "false"
noprefix "false"

\end_inset

 représente le diagramme d'état de l'encadré précédent.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/exemple-de-diagramme-d-état.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-de-diagramme-état"

\end_inset

Exemple d'un diagramme d'état.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Noms de variables
\end_layout

\begin_layout Standard
Généralement, les programmeurs choisissent pour leurs variables des noms
 qui sont expressifs et, au besoin, ils associent un élément de documentation
 à la variable afin d'améliorer la compréhension du code.
\end_layout

\begin_layout Standard
La longueur des noms des variables n'est pas limitée.
 Ces noms peuvent contenir presque tous les caractères Unicode
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unicode
\end_layout

\end_inset

 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Caractères"
plural "false"
caps "false"
noprefix "false"

\end_inset

), mais ils ne peuvent pas commencer par un nombre.
 Les lettres majuscules sont autorisées, quoiqu'il soit conventionnel de
 n'utiliser que des minuscules pour les noms de variables.
 Les caractères Unicode peuvent être saisis en complétant les abréviations
 de type \SpecialChar LaTeX
 dans le REPL, et ce, par des tabulations.
\end_layout

\begin_layout Standard
Le caractère de soulignement
\color blue
 _
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
_
\end_layout

\end_inset


\color inherit
 peut apparaître dans un nom.
 Il est souvent utilisé dans les noms comportant plusieurs mots.
\end_layout

\begin_layout Standard
Si un nom inapproprié est attribué à une variable, Julia retourne une erreur
 de syntaxe
\begin_inset Index idx
status open

\begin_layout Plain Layout
erreur de syntaxe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
syntaxe, erreur de
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
76trombones = (
\size default
\color brown
"Belle fanfare"
\size small
\color inherit
)
\end_layout

\begin_layout Plain Layout

\color red
ERRO
\begin_inset ERT
status open

\begin_layout Plain Layout

R
\backslash
string:
\end_layout

\end_inset

 synta
\begin_inset ERT
status open

\begin_layout Plain Layout

x
\backslash
string:
\end_layout

\end_inset

 "76" is not a valid function argument name
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 more@ = 1000000
\end_layout

\begin_layout Plain Layout

\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 extra token "@" after end of expression
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 struct = 
\color brown
"Advanced Theoretical Zimurgy"
\end_layout

\begin_layout Plain Layout

\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 unexpected "="
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
76trombones
\color inherit
 est incorrect parce que la variable commence par un chiffre.
 
\color blue
more@
\color inherit
 est erroné parce cette formulation contient un caractère non autorisé,
 
\color blue
@
\color inherit
.
 Mais qu'est-ce qui ne va pas avec la troisième déclaration? Il s'avère
 que 
\color blue
struct
\color inherit
 est un des mots-clés de Julia.
 Le REPL utilise des mots-clés pour reconnaître la structure d'un programme.
 Or, ceux-ci ne peuvent pas être utilisés comme noms de variables.
\end_layout

\begin_layout Standard
Julia comporte les mots-clés
\begin_inset Index idx
status open

\begin_layout Plain Layout
mots-clés, liste
\end_layout

\end_inset

 suivants repris dans le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Liste-des-mots-clés-Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Liste-des-mots-clés-Julia"

\end_inset

Liste des mots-clés de Julia.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="19mm">
<column alignment="left" valignment="top" width="19mm">
<column alignment="left" valignment="top" width="19mm">
<column alignment="left" valignment="top" width="19mm">
<column alignment="left" valignment="top" width="19mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
abstract type
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
abstract type
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
baremodule
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
baremodule
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
begin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
begin
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
break
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
break
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
catch
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
catch
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
const
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
const
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
continue
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
continue
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
do
\begin_inset Index idx
status open

\begin_layout Plain Layout
do
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
else
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
else
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
elseif
\begin_inset Index idx
status open

\begin_layout Plain Layout
elseif
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
end
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
end
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
export
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
export
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
finally
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
finally
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
for
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
for
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
function
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
function
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
global
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
global
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
if
\begin_inset Index idx
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
import
\begin_inset Index idx
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
importall
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
importall
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
in
\begin_inset Index idx
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
let
\begin_inset Index idx
status open

\begin_layout Plain Layout
let
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
local
\begin_inset Index idx
status open

\begin_layout Plain Layout
local
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
macro
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
macro
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
module
\begin_inset Index idx
status open

\begin_layout Plain Layout
module
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
mutable struct
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
mutable struct
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
primitive type
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
primitive type
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
quote
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
quote
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
return
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
return
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
struct
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
struct
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
try
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
try
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
using
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
using
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
where
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
where
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
while
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
while
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est inutile de mémoriser cette liste.
 Dans la plupart des environnements de développement, les mots-clés sont
 affichés dans une couleur déterminée.
 Si un mot de cette liste est attribué à une variable, un message d'alerte/d'err
eur apparaîtra.
\end_layout

\begin_layout Section
Expressions et déclarations
\end_layout

\begin_layout Standard
Une expression
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression
\end_layout

\end_inset

 est une combinaison de valeurs, de variables et d'opérateurs.
 Une valeur en soi est considérée comme une expression, de même qu'une variable,
 de sorte que les expressions suivantes sont toutes autorisées: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
42
\end_layout

\begin_layout Plain Layout

\color lightgray
42
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 n
\end_layout

\begin_layout Plain Layout

\color lightgray
17
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 n + 25
\end_layout

\begin_layout Plain Layout

\color lightgray
42
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsqu'une expression est saisie à l'invite, le REPL l'évalue pour trouver
 sa valeur.
 Dans cet exemple,
\color blue
 n
\color inherit
 a la valeur 17 et 
\color blue
n + 25
\color inherit
 prend la valeur 42.
\end_layout

\begin_layout Standard
Une déclaration
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration
\end_layout

\end_inset

 (ou une instruction
\begin_inset Index idx
status open

\begin_layout Plain Layout
instruction
\end_layout

\end_inset

) est une unité de code qui produit un effet, comme la création d'une variable
 ou l'affichage d'une valeur.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 n = 17
\end_layout

\begin_layout Plain Layout

\color lightgray
17
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 println(n)
\end_layout

\begin_layout Plain Layout

\color lightgray
17
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première ligne est une déclaration d'affectation qui associe une valeur
 à 
\color blue
n
\color inherit
.
 La deuxième ligne est une instruction qui conduit à l'affichage de la valeur
 de
\color blue
 n
\color inherit
.
\end_layout

\begin_layout Standard
Lorsqu'une instruction est saisie, le REPL l'
\emph on
exécute
\emph default
, ce qui signifie qu'il effectue tout ce que contient l'instruction.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Mode-script"

\end_inset

Mode 
\begin_inset Quotes cld
\end_inset

script
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
script
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Jusqu'à présent, nous avons pratiqué Julia en mode interactif, ce qui signifie
 que nous interagissons directement avec le REPL.
 Le mode interactif est un bon moyen de démarrer, mais, lors d’un usage
 intensif, cette technique devient rapidement fastidieuse.
\end_layout

\begin_layout Standard
L'autre possibilité consiste à enregistrer le code dans un fichier.
 On se réfère à ce dernier en disant qu'il s'agit d'un
\emph on
 script
\emph default
.
 Ensuite, l'utilisateur lance Julia en mode 
\emph on
script 
\emph default
pour exécuter le code qu'il contient.
 Par convention, les scripts en Julia portent des noms se terminant par
 
\color blue
.jl
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
.jl
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Si nous savons comment créer et exécuter un script, nous sommes prêts (sinon,
 il faudra utiliser en local Jupyter
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jupyter
\end_layout

\end_inset

 ou Pluto
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pluto
\end_layout

\end_inset

, par exemple; voir l'annexe
\begin_inset space ~
\end_inset

B, 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 À ce stade, il existe deux méthodes pour créer un script et l'exécuter:
\end_layout

\begin_layout Itemize
soit ouvrir un fichier texte (avec Vim
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vim
\end_layout

\end_inset

, Emacs
\begin_inset Index idx
status open

\begin_layout Plain Layout
Emacs
\end_layout

\end_inset

, etc.), y écrire le code du script et l'enregistrer avec une extension
\color blue
 .jl
\color inherit
.
 Le script peut être exécuté dans un terminal bash
\begin_inset Index idx
status open

\begin_layout Plain Layout
bash
\end_layout

\end_inset

 (ou analogue) pour autant que le dossier courant soit le répertoire contenant
 le script à exécuter:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
name@computer
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color blue
~
\color green
$
\color black
 julia
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

nom_du_programme.jl
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Itemize
soit recourir à un environnement de développement intégré comme VSCodium
\begin_inset Index idx
status open

\begin_layout Plain Layout
VSCodium
\end_layout

\end_inset

 (voir l'annexe
\begin_inset space ~
\end_inset

B, 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 En supposant que le script est enregistré dans un répertoire dénommé 
\family typewriter
Prgm_Julia
\family default
, dans VSCodium, il suffit de cliquer sur File 
\begin_inset Formula $\rightarrow$
\end_inset

 Open File et de sélectionner le script.
 Celui-ci apparaît, colorisé, la partie supérieure de Codium
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codium
\end_layout

\end_inset

.
 Il convient de cliquer sur une des lignes du code puis de cliquer sur l'icône
 
\begin_inset Formula $\vartriangleright$
\end_inset

 de la barre de commandes supérieure afin de le lancer.
 
\end_layout

\begin_layout Standard
Quoiqu'il en soit, parce que Julia propose les deux modes (REPL et exécution
 de script), il est possible de tester des bouts de code en mode interactif
 avant de les insérer dans un script.
 Cependant, il existe des différences entre le mode interactif et le mode
 script qui peuvent être surprenantes.
 Par exemple, utilisons Julia comme calculatrice et saisissons:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 miles = 26.2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
26.2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 miles * 1.61
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42.182
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première ligne attribue une valeur à 
\color blue
miles
\color inherit
 et affiche la valeur.
 La deuxième ligne est une expression.
 Par conséquent, le REPL l'évalue et affiche le résultat
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:Il-s'avère-qu'un"

\end_inset

Il s'avère qu'un marathon couvre environ 42 kilomètres.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Néanmoins, l'exécution du même code dans un script ne produit aucun résultat.
 En mode script, une expression, à elle seule, n'a aucun effet visible.
 Julia évalue bel et bien l'expression, mais n'affiche pas la valeur, sauf
 à lui demander de le faire:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
miles = 26.2
\end_layout

\begin_layout Plain Layout

\size small
\color black
println(
\color inherit
miles * 1.61)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce comportement peut être déroutant au début.
\end_layout

\begin_layout Standard
Un script contient généralement une séquence d'instructions.
 S'il y a plus d'une déclaration, les résultats apparaissent un à un, à
 mesure de l'exécution des déclarations.
\end_layout

\begin_layout Standard
Par exemple, le code suivant:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
println(1)
\end_layout

\begin_layout Plain Layout

\size small
\color black
x = 2
\end_layout

\begin_layout Plain Layout

\size small
\color black
println(x)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
affiche:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les déclarations d'affectation ne produisent aucun résultat.
\end_layout

\begin_layout Subsection*
Exercice 2-1
\end_layout

\begin_layout Standard
Vérifiez que ceci est bien compris en saisissant les déclarations suivantes
 dans le REPL de Julia et observez le résultat:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\begin_layout Plain Layout
x + 5
\end_layout

\begin_layout Plain Layout
x + 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Maintenant, écrivez les mêmes déclarations dans un script et exécutez-le.
 Quel est le résultat? Modifiez le script en transformant chaque expression
 en une instruction d'affichage, puis exécutez-le à nouveau.
\end_layout

\begin_layout Section
Priorité des opérateurs
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
\color black
opérateurs, priorité
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lorsqu'une expression contient plus d'un opérateur, l'ordre d'évaluation
 dépend de la préséance des opérateurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateurs, préséance
\end_layout

\end_inset

 entre eux.
 Pour les opérateurs mathématiques, Julia suit la convention mathématique.
 L'acronyme 
\emph on
PEMDAS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
PEMDAS
\end_layout

\end_inset


\emph default
 constitue un moyen mnémotechnique:
\end_layout

\begin_layout Enumerate
les 
\series bold
P
\series default
arenthèses
\begin_inset Index idx
status open

\begin_layout Plain Layout
parenthèses
\end_layout

\end_inset

 ont la plus haute priorité et peuvent être utilisées pour forcer une expression
 à être évaluée dans l'ordre souhaité.
 Comme les expressions entre parenthèses sont évaluées en premier, 
\color blue
2*(3-1)
\color inherit
 vaut 4 et 
\color blue
(1+1)^(5-2)
\color inherit
 vaut 8.
 L'usage de parenthèses contribue à rendre une expression plus facile à
 lire, comme dans 
\color blue
(minute * 100) / 60
\color inherit
, même si cela ne change pas le résultat,
\end_layout

\begin_layout Enumerate
l'
\series bold
E
\series default
xponentiation
\begin_inset Index idx
status open

\begin_layout Plain Layout
exponentiation
\end_layout

\end_inset

 a la priorité suivante, donc 
\color blue
1+2^3
\color inherit
 vaut 9 (et non 27) et 
\color blue
2*3^2
\color inherit
 donne 18 (et non 36),
\end_layout

\begin_layout Enumerate
la 
\series bold
M
\series default
ultiplication
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset

 et la 
\series bold
D
\series default
ivision
\begin_inset Index idx
status open

\begin_layout Plain Layout
division
\end_layout

\end_inset

 ont la préséance sur l'
\series bold
A
\series default
ddition
\begin_inset Index idx
status open

\begin_layout Plain Layout
addition
\end_layout

\end_inset

 et la 
\series bold
S
\series default
oustraction
\begin_inset Index idx
status open

\begin_layout Plain Layout
soustraction
\end_layout

\end_inset

.
 Ainsi,
\color blue
 2*3-1
\color inherit
 a pour valeur 5 (et non 4) et 
\color blue
6+4/2
\color inherit
 est évalué comme 8 (et non 5),
\end_layout

\begin_layout Enumerate
les opérateurs ayant la même priorité sont évalués de gauche à droite (sauf
 l'exponentiation).
 Ainsi, dans l'expression 
\color blue
degrés / 2 * π
\color inherit
, la division se fait en premier et le résultat est multiplié par 
\color blue
π
\color inherit
.
 Pour diviser par 2π, il est possible d'utiliser des parenthèses 
\color blue
degrés / (2 * π)
\color inherit
, d'écrire 
\color blue
degrés / 2 / π
\color inherit
 ou encore 
\color blue
degrés / 2π
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Il n'est pas simple de se souvenir de la préséance des opérateurs et une
 expression complexe peut rapidement devenir un casse-tête, source d'erreurs.
 L'usage de parenthèses relève de la prudence.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Opérations-sur-les-chaines-de-caracteres"

\end_inset

Opérations sur les chaînes de caractères
\end_layout

\begin_layout Standard
En général, les opérations mathématiques sur des chaî\SpecialChar softhyphen
nes de caractères ne
 sont pas permises, même si ces dernières ressemblent à des nombres.
 Les opérations suivantes sont donc illicites:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color brown
"2" - "1"
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"un 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uf" / "le plat"
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"top" + "charm"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, il existe deux exceptions: 
\color blue
*
\color inherit
 et 
\color blue
^
\color black
.
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
^
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
*
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
*
\color inherit
 effectue la concaténation
\begin_inset Index idx
status open

\begin_layout Plain Layout
concaténation
\end_layout

\end_inset

 des chaînes de caractères, ce qui signifie qu'il joint les chaînes en les
 reliant bout à bout.
 Par exemple:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 first_str = 
\size default
\color brown
"paruline "
\end_layout

\begin_layout Plain Layout

\color lightgray
"paruline "
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 second_str = 
\color brown
"à "
\end_layout

\begin_layout Plain Layout

\color lightgray
"à "
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 third_str = 
\color brown
"gorge "
\end_layout

\begin_layout Plain Layout

\color lightgray
"gorge "
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 fourth_str = 
\color brown
"jaune"
\end_layout

\begin_layout Plain Layout

\color lightgray
"jaune"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
first_str * second_str * third_str * fourth_str
\end_layout

\begin_layout Plain Layout

\color lightgray
"paruline à gorge jaune"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
^
\color inherit
 procède également sur des chaînes de caractères.
 Il effectue des répétitions.
 Par exemple, 
\color blue
"Spam"^3
\color inherit
 retourne 
\color blue
"SpamSpamSpam"
\color inherit
.
 Si une des valeurs est une chaîne, l'autre doit être un nombre entier.
\end_layout

\begin_layout Standard
Cette utilisation de
\color blue
 *
\color inherit
 et
\color blue
 ^
\color inherit
 est logique par analogie avec la multiplication et l'exponentiation.
 Tout comme 
\color blue
4^3
\color inherit
 est équivalent à 
\color blue
4*4*4
\color inherit
, nous nous attendons à ce que "
\color blue
Spam"^3
\color inherit
 soit identique à 
\color blue
"Spam " * "Spam " * "Spam"
\color inherit
, ce qui est bien le cas.
 
\end_layout

\begin_layout Section
Commentaires
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
commentaire
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plus les programmes deviennent volumineux et complexes, plus ils sont difficiles
 à lire.
 Les langages formels sont denses et il est souvent difficile de regarder
 un morceau de code et de comprendre ce qu'il représente.
\end_layout

\begin_layout Standard
C'est pourquoi il est bon d'ajouter des notes à nos programmes pour expliquer
 en langage naturel ce que réalise le code.
 Ces notes sont appelées des 
\emph on
commentaires
\emph default
 et elles commencent par le symbole 
\color blue
#
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout
#, commentaire
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color cyan
# calcule le pourcentage d'heure écoulé
\end_layout

\begin_layout Plain Layout
pourcentage = (minute * 100) / 60
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, le commentaire apparaît sur une ligne séparée.
 Cependant,les commentaires peuvent se trouver à la fin d'une ligne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pourcentage = (minute * 100) / 60
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# calcule le pourcentage d'heure écoulé
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Tout ce qui suit le caractère 
\color blue
# 
\color inherit
jusqu'à la fin de la ligne est ignoré.
 Un commentaire n'altère pas l'exécution d'un programme.
\end_layout

\begin_layout Standard
Les commentaires sont toujours utiles lorsqu'ils documentent des caractéristique
s non évidentes du code.
 Il est raisonnable de supposer que le lecteur peut comprendre ce que fait
 le code.
 Il est plus utile d'expliquer pourquoi.
\end_layout

\begin_layout Standard
Par exemple, ce commentaire est redondant avec le code et, par conséquent,
 inutile:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
v = 5
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# attribue 5 à v
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, le commentaire suivant contient une information réellement pertinente
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
v = 5
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# vitesse exprimée en m/s
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
newtheorem*{tip3}{Avertissement}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Des noms de variables 
\backslash
textit{ad hoc} peuvent réduire le besoin d'écrire des commentaires.
 Les noms longs, généralement explicites, peuvent rendre des expressions
 complexes difficiles à lire.
 Tout est une question de compromis.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Trois types d'erreurs se produisent dans un programme: des erreurs de syntaxe,
 des erreurs d'exécution et des erreurs sémantiques.
 Ce point sera approfondi au 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Débogage"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Il est utile de les distinguer afin de les repérer le plus rapidement possible.
\end_layout

\begin_layout Description
Erreur
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

syntaxe
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
syntaxe, erreur de
\end_layout

\end_inset

 La 
\begin_inset Quotes cld
\end_inset

 syntaxe 
\begin_inset Quotes crd
\end_inset

 fait référence à la structure d'un programme et aux règles relatives à
 cette structure.
 Par exemple, les parenthèses doivent venir par paires, donc 
\color blue
(1 + 2) 
\color inherit
est licite, mais
\color blue
 8)
\color inherit
 constitue une erreur de syntaxe.
\begin_inset Newline newline
\end_inset

S'il y a une erreur de syntaxe dans un programme, Julia affiche un message
 d'erreur et arrête l'exécution.
 Au cours des premières semaines d'étude, il est fréquent de passer du temps
 à rechercher les erreurs de syntaxe.
 Avec l'expérience, ce type d'erreur se manifestera plus rarement et leur
 détection sera de plus en plus rapide.
 
\end_layout

\begin_layout Description
Erreur
\begin_inset space ~
\end_inset

d'exécution
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
exécution, erreur d'
\end_layout

\end_inset

 Le deuxième type d'erreur concerne l'exécution.
 On dit 
\begin_inset Quotes cld
\end_inset

 erreur d'exécution 
\begin_inset Quotes crd
\end_inset

 parce qu'elle n'apparaît qu'après le démarrage du programme.
\begin_inset Index idx
status open

\begin_layout Plain Layout
exception
\end_layout

\end_inset

 Ces erreurs sont également appelées 
\emph on
exceptions
\emph default
 parce qu'elles indiquent généralement que quelque chose d'exceptionnel
 (et de malencontreux) s'est produit.
\begin_inset Newline newline
\end_inset

Les erreurs d'exécution sont rares dans les programmes simples associés
 aux premiers chapitres.
 Il s'écoulera un certain temps avant d'en rencontrer.
 
\end_layout

\begin_layout Description
Erreur
\begin_inset space ~
\end_inset

sémantique
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
semantique@sémantique, erreur
\end_layout

\end_inset

 Le troisième type d'erreur concerne la 
\begin_inset Quotes cld
\end_inset

 sémantique 
\begin_inset Quotes crd
\end_inset

.
 Il s'agit d'un problème de sens.
 Si un programme contient une erreur sémantique, il s'exécute sans émettre
 le moindre message d'erreur.
 Cependant, le programme produit un résultat autre que celui attendu, bien
 qu'il accomplisse exactement ce qu'il lui est demandé.
\begin_inset Newline newline
\end_inset

L'identification des erreurs sémantiques peut être délicate, car elle oblige
 à travailler à rebours en examinant la sortie d'un programme et en essayant
 de comprendre comment il procède.
 
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
variable nom qui fait référence à une valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
variable
\end_layout

\end_inset


\end_layout

\begin_layout Description
affectation déclaration qui attribue une valeur à une variable, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
affectation
\end_layout

\end_inset


\end_layout

\begin_layout Description
diagramme
\begin_inset space ~
\end_inset

d'état représentation graphique d'un ensemble de variables et des valeurs
 auxquelles elles se réfèrent, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
diagramme d'état
\end_layout

\end_inset


\end_layout

\begin_layout Description
mot-clé mot réservé utilisé par un langage de programmation.
 Les mots-clés tels que 
\color blue
if
\color inherit
, 
\color blue
function
\color inherit
, 
\color blue
while
\color black
, etc.,
\color inherit
 ne peuvent pas être employés comme noms de variables, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
mot-clé
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérande une des valeurs sur lesquelles un opérateur exerce une action,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
opérande
\end_layout

\end_inset


\end_layout

\begin_layout Description
expression combinaison de variables, d'opérateurs et de valeurs qui représente
 un seul résultat, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
expression
\end_layout

\end_inset


\end_layout

\begin_layout Description
évaluer simplifier une expression en effectuant les opérations afin d'obtenir
 une valeur unique, 
\end_layout

\begin_layout Description
déclaration section de code qui représente un ordre ou une action.
 Jusqu'à présent, les déclarations que nous avons vues opèrent des affectations
 (
\emph on
assignments
\emph default
 en anglais) et des déclarations d'affichage,
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
declaration@déclaration
\end_layout

\end_inset


\end_layout

\begin_layout Description
exécuter lire une déclaration et faire ce qu'elle exprime,
\end_layout

\begin_layout Description
mode
\begin_inset space ~
\end_inset

interactif façon d'utiliser le REPL de Julia en saisissant un code à l'invite,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
mode interactif
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
mode
\begin_inset space ~
\end_inset

script façon d'utiliser Julia pour lire le code d'un script et l'exécuter,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
script
\end_layout

\end_inset


\end_layout

\begin_layout Description
script programme enregistré dans un fichier, 
\end_layout

\begin_layout Description
priorité
\begin_inset space ~
\end_inset

d'un
\begin_inset space ~
\end_inset

opérateur règles de préséance relative à l'ordre dans lequel les expressions
 impliquant des opérateurs mathématiques et des opérandes multiples sont
 évaluées, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
regles@règles de préséance
\end_layout

\end_inset


\end_layout

\begin_layout Description
concaténer joindre deux éléments bout à bout, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
concaténer
\end_layout

\end_inset


\end_layout

\begin_layout Description
commentaire informations contenues dans un programme qui sont destinées
 à d'autres programmeurs (ou à toute personne lisant le code source) et
 qui n'ont aucun effet sur l'exécution de ce programme, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
commentaire
\end_layout

\end_inset


\end_layout

\begin_layout Description
erreur
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

syntaxe erreur dans un programme qui rend impossible l'analyse (et donc
 l'interprétation), 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
syntaxe, erreur de
\end_layout

\end_inset


\end_layout

\begin_layout Description
erreur
\begin_inset space ~
\end_inset

d'exécution (appelée également 
\series bold
exception
\series default
) erreur qui est détectée pendant que le programme est en cours d'exécution,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
exécution, erreur d'
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
exception
\end_layout

\end_inset


\end_layout

\begin_layout Description
sémantique signification ou 
\begin_inset Quotes cld
\end_inset

 sens 
\begin_inset Quotes crd
\end_inset

 d'un programme, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
semantique@sémantique
\end_layout

\end_inset


\end_layout

\begin_layout Description
erreur
\begin_inset space ~
\end_inset

sémantique erreur dans un programme qui l'amène à faire autre chose que
 ce pourquoi il a été conçu.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
semantique@sémantique, erreur
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 2-2
\end_layout

\begin_layout Standard
Comme souligné dans le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Mode-de-fonctionnement"
plural "false"
caps "false"
noprefix "false"

\end_inset

, chaque fois que vous apprenez une nouvelle fonction, vous devez l'essayer
 en mode interactif (REPL) et commettre des erreurs pour évaluer ce qui
 ne fonctionne pas.
\end_layout

\begin_layout Enumerate
Nous avons vu que 
\color blue
n = 42
\color inherit
 est licite.
 Qu'en est-il de 
\color blue
42 = n
\color inherit
?
\end_layout

\begin_layout Enumerate
Que se passe-t-il avec 
\color blue
x = y = 1
\color inherit
 ?
\end_layout

\begin_layout Enumerate
Dans certains langages, chaque énoncé se termine par un point-virgule (
\color blue

\begin_inset space ~
\end_inset

;
\color inherit

\begin_inset space ~
\end_inset

).
 Que se passe-t-il si vous mettez un point-virgule à la fin d'une déclaration
 en Julia?
\end_layout

\begin_layout Enumerate
Que se passe-t-il si vous mettez un point à la fin d'une déclaration?
\end_layout

\begin_layout Enumerate
En notation mathématique, vous pouvez multiplier
\color blue
 x
\color inherit
 et
\color blue
 y
\color inherit
 comme ceci:
\color blue
 x y
\color inherit
.
 Que se passe-t-il si vous essayez cela en Julia? Quid avec 
\color blue
5x
\color inherit
?
\end_layout

\begin_layout Subsection*
Exercice 2-3
\end_layout

\begin_layout Standard
Entraînez-vous à utiliser le REPL de Julia comme calculatrice:
\end_layout

\begin_layout Enumerate
Le volume d'une sphère de rayon 
\begin_inset Formula $r$
\end_inset

 est donné par la formule 
\begin_inset Formula $V_{sp}=\frac{4}{3}\pi r^{3}$
\end_inset

.
 Quel est le volume d'une sphère de rayon 
\begin_inset Formula $r=5$
\end_inset

?
\end_layout

\begin_layout Enumerate
Supposons que le prix de couverture d'un livre soit de 24,95 €, mais que
 les librairies obtiennent une remise de 40 %.
 Les frais d'expédition sont de 3 € pour le premier exemplaire et de 75
 centimes pour chaque exemplaire supplémentaire.
 Quel est le prix de gros total pour 60 exemplaires?
\end_layout

\begin_layout Enumerate
Si quelqu'un quitte son habitation à 6 h 52 du matin et qu'il court 1 km
 au rythme de 8 min 15 s par km, puis 3 km au rythme de 7 min 12 par km
 et encore 1 km à un rythme de 8 min 15 s par km, à quelle heure rentrera-t-il
 pour le petit-déjeuner?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Fonctions"

\end_inset

Fonctions
\end_layout

\begin_layout Standard
Dans le contexte de la programmation, une fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction
\end_layout

\end_inset

 est une séquence d'instructions effectuant un calcul.
 La définition d'une fonction doit contenir le nom de la fonction et une
 suite d'instructions.
 La fonction étant définie, il y est fait appel en utilisant son nom.
 
\end_layout

\begin_layout Section
Appel de fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction, appel de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nous avons déjà rencontré un appel de fonction:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(
\color brown
"Hello, World!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello, World!
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le nom de la fonction (interne
\begin_inset Foot
status open

\begin_layout Plain Layout
Le terme 
\begin_inset Quotes cld
\end_inset

intégrée
\begin_inset Quotes crd
\end_inset

 est équivalent dans ce contexte.
\end_layout

\end_inset

 à Julia) est 
\color blue
println
\color inherit
.
 L'expression entre parenthèses s'appelle l'
\emph on
argument
\emph default
 de la fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument
\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
println()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est courant de dire qu'une fonction 
\begin_inset Quotes cld
\end_inset

 prend 
\begin_inset Quotes crd
\end_inset

 un argument et 
\begin_inset Quotes cld
\end_inset

 retourne 
\begin_inset Quotes crd
\end_inset

 un résultat.
 Le résultat est également appelé 
\emph on
valeur de retour
\emph default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur de retour
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
retour, valeur
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Julia fournit des fonctions qui convertissent des valeurs d'un type à un
 autre.
 La fonction 
\color blue
parse
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
parse()
\end_layout

\end_inset


\color inherit
 prend une chaîne de caractères et la convertit en n'importe quel type de
 nombre, si elle le peut.
 Sinon, Julia retourne un message d'erreur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 parse(
\color brown
Int64, "32"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
32
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 parse(
\color brown
Float64, "3.14159"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3.14159
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 parse(
\color brown
Int64, "Hello"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ArgumentError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 invalid base 10 digit 'H' in "Hello"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction
\color blue
 trunc
\color inherit
 peut convertir des nombres à virgule flottante en entiers mais sans arrondi
\begin_inset Index idx
status open

\begin_layout Plain Layout
arrondi
\end_layout

\end_inset

: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
trunc()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 trunc(
\color brown
Int64, 
\color inherit
3.9999)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 trunc(
\color brown
Int64, 
\color black
-2.3
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
-2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
float 
\color inherit
convertit les nombres entiers en nombres à virgule flottante: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
float()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 float(32)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
32.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
string
\color inherit
 convertit son argument en chaîne de caractères: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
string()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 string(32)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"32"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 string(3.14159)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"3.14159"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Fonctions mathématiques
\end_layout

\begin_layout Standard
Naturellement, avec Julia, la plupart des fonctions
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction mathématique
\end_layout

\end_inset

 mathématiques usuelles sont directement disponibles: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
ratio = signal_power / noise_power 
\end_layout

\begin_layout Plain Layout

\size small
decibels = 10 * log10(ratio)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce premier exemple utilise 
\color blue
log10 
\color inherit
pour calculer un rapport signal/bruit en décibels (en supposant que la puissance
 du signal et la puissance du bruit soient définies).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
logarithme, base 10
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
log
\color inherit
 calcule les logarithmes naturels (ou népériens, aussi appelés hyperboliques
 — 
\begin_inset Formula $\ln$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ln
\end_layout

\end_inset

)
\begin_inset Index idx
status open

\begin_layout Plain Layout
logarithme naturel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
logarithme népérien
\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
log()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
log10()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
À présent, voyons un autre exemple:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
radians = 0.7
\end_layout

\begin_layout Plain Layout

\size small
heigth = sin(radians)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce deuxième cas avec la fonction
\color blue
 sin
\color inherit
 illustre la manière de procéder pour le sinus d'un angle exprimé en radians.
 Un argument passé tel quel aux fonctions trigonométriques (
\color blue
sin
\color black
,
\color blue
 cos
\color inherit
, 
\color blue
tan
\color inherit
, etc.) s'exprime en radians.
 
\end_layout

\begin_layout Standard
Pour convertir des degrés en radians, il faut diviser par 180 et multiplier
 par 
\color blue
π
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cos()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
sin()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tan()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 degrees = 45
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
45
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 radians = (degrees / 180) * π
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0.7853981633974483
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sin(radians)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0.7071067811865475
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La valeur de la variable π est une approximation en virgule flottante du
 nombre 
\begin_inset Formula $\pi$
\end_inset

, avec une précision à 16 chiffres.
 
\end_layout

\begin_layout Standard
En recourant à la trigonométrie, on vérifie que le résultat précédent correspond
 à la racine carrée de 2 divisée par 2: 
\size small

\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
sqrt()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sqrt(2) / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0.7071067811865475
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Composition
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
composition
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jusqu'à présent, nous avons examiné les éléments d'un programme — variables,
 expressions et déclarations — isolément, sans évoquer la manière de les
 combiner.
\end_layout

\begin_layout Standard
Une caractéristique des plus utiles des langages de programmation provient
 de leur capacité à prendre de petits blocs de construction et à les combiner
 (les associer).
 Par exemple, l'argument d'une fonction peut être tout type d'expression,
 dont des opérateurs arithmétiques: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
exp()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x = sin((degrees / 360) * 2 * 
\size default
π
\size small
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela fonctionne également avec des appels de fonction:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x = exp(log(x+1))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Presque partout où une valeur peut être injectée, il est possible de poser
 une expression arbitraire, à une contrainte près: le membre de gauche d'une
 déclaration d'affectation doit être un nom de variable.
 Toute autre expression à gauche conduit à une erreur de syntaxe (nous verrons
 les exceptions à cette règle plus tard).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 minutes = heures * 60
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# licite
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
45
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 heures * 60 = minutes
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset

# illicite!
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 "60" is not a valid function argument name
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Ajout de nouvelles fonctions
\end_layout

\begin_layout Standard
Jusqu'à présent, nous avons uniquement employé des fonctions internes à
 Julia.
 Cependant, ajouter de nouvelles fonctions est une des bases de la programmation.
 Une 
\emph on
définition de fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
fonction, définition
\end_layout

\end_inset


\emph default
 spécifie le nom d'une nouvelle fonction et la séquence d'instructions qui
 s'exécutent lorsque la fonction est appelée.
 Voici un exemple:
\begin_inset Index ind
status open

\begin_layout Plain Layout
printlyrics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Ses fluctuat nec mergitur,"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"C'était pas d'la littérature"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le terme 
\color blue
function
\color inherit
 est un mot-clé qui indique qu'une nouvelle fonction est définie.
 Le nom de la fonction est 
\color blue
printlyrics
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
function
\end_layout

\end_inset

 Les règles pour les noms de fonctions sont les mêmes que pour les noms
 de variables: ils peuvent contenir presque tous les caractères Unicode
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unicode
\end_layout

\end_inset

 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Caractères"
plural "false"
caps "false"
noprefix "false"

\end_inset

), si ce n'est que le premier caractère ne peut pas être un nombre.
 Par ailleurs, il n'est pas permis d'utiliser un mot-clé comme nom de fonction.
 En outre, il faut éviter qu'une variable et une fonction portent le même
 nom.
 Les parenthèses vides après le nom indiquent que cette fonction ne prend
 pas d'arguments.
\end_layout

\begin_layout Standard
La première ligne s'appelle l'
\emph on
en-tête
\emph default
;
\begin_inset Index idx
status open

\begin_layout Plain Layout
en-tête
\end_layout

\end_inset

 le reste s'appelle le 
\emph on
corps
\emph default
.
 Le corps
\begin_inset Index idx
status open

\begin_layout Plain Layout
corps
\end_layout

\end_inset

 se termine par le mot-clé 
\color blue
end
\color inherit
 et peut contenir un nombre quelconque d'instructions.
 Pour une meilleure lisibilité, le corps de la fonction devrait être indenté.
\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les guillemets doivent être des "guillemets droits" (idem pour les 
\size small
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size default
\color inherit
 guillemets
\size small
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size default
\color inherit
 simples
\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemets, simples
\end_layout

\end_inset

).
 Les guillemets de ce type 
\begin_inset Quotes cld
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Quotes crd
\end_inset

, “
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

” ou '
\begin_inset space ~
\end_inset

' ne sont pas admis en Julia.
\end_layout

\begin_layout Standard
Si une définition de fonction est saisie en mode interactif, le REPL s'indente
 automatiquement pour indiquer que la définition n'est pas complète:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> function 
\color black
printlyrics() 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Ses fluctuat nec mergitur,"
\color green
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La terminaison d'une fonction est indiquée par le mot-clé 
\color blue
end
\color inherit
.
\end_layout

\begin_layout Standard
La syntaxe pour appeler la nouvelle fonction est la même que pour les fonctions
 internes à Julia:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Ses fluctuat nec mergitur, 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
C’était pas d’la littérature
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dès qu'une fonction est définie, elle peut être utilisée au sein d'une autre
 fonction.
 Par exemple, pour répéter les vers précédents, nous pouvons écrire une
 fonction appelée 
\color blue
repeatlyrics
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
repeatlyrics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 repeatlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque 
\color blue
repeatlyrics
\color inherit
 est appelée, nous obtenons:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
repeatlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Ses fluctuat nec mergitur, 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
C’était pas d’la litterature
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Ses fluctuat nec mergitur, 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
C’était pas d’la litterature
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Définition et usages
\end_layout

\begin_layout Standard
En rassemblant les fragments de code, l'ensemble du programme ressemble
 à ceci:
\begin_inset Index ind
status open

\begin_layout Plain Layout
printlyrics
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
repeatlyrics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Ses fluctuat nec mergitur,"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"C'était pas d'la littérature"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

function
\color inherit
 repeatlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printlyrics()
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\color inherit
repeatlyrics()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce programme contient deux définitions de fonctions: 
\color blue
printlyrics
\color inherit
 et 
\color blue
repeatlyrics
\color inherit
.
 Les définitions de fonction sont exécutées comme les autres instructions,
 mais elles ont pour effet de créer des objets de fonction.
 Les instructions à l'intérieur de la fonction ne s'exécutent pas avant
 que la fonction soit pas appelée.
 La définition de la fonction ne produit aucune sortie.
\end_layout

\begin_layout Standard
Comme on peut s'y attendre, il faut créer une fonction avant de pouvoir
 l'exécuter.
 En d'autres termes, la définition de la fonction doit être exécutée avant
 que la fonction ne soit appelée.
 
\end_layout

\begin_layout Subsection*
Exercice 3-1
\end_layout

\begin_layout Standard
Déplacez la dernière ligne de ce programme vers le haut, afin que l'appel
 de fonction apparaisse avant les définitions.
 Lancez le programme et voyez quel message d'erreur est retourné.
\end_layout

\begin_layout Standard
Ceci fait, déplacez l'appel de fonction vers le bas et déplacez la définition
 de 
\color blue
printlyrics
\color inherit
 après la définition de
\color blue
 repeatlyrics
\color inherit
.
 Que se passe-t-il lors de l'exécution de ce programme? 
\end_layout

\begin_layout Section
Flux d'exécution
\end_layout

\begin_layout Standard
Pour s'assurer qu'une fonction est définie avant sa première utilisation,
 il faut connaître le
\emph on
 flux d'exécution
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
flux d'exécution
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'exécution commence toujours à la première instruction d'un programme.
 Les instructions sont exécutées séquentiellement, dans l'ordre, de haut
 en bas.
 Les définitions de fonction ne modifient pas le flux d'exécution du programme,
 mais il faut se rappeler que les instructions à l'intérieur de la fonction
 ne s'exécutent pas avant que la fonction soit appelée.
 Un appel de fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction, appel de
\end_layout

\end_inset

 équivaut à un détour dans le flux d'exécution.
 Au lieu de passer à l'instruction suivante, le flux effectue un saut jusqu'au
 corps de la fonction appelée, y exécute les instructions, puis revient
 pour reprendre là où il s'était arrêté.
\end_layout

\begin_layout Standard
Cela semble assez simple, jusqu'à ce qu'on se souvienne qu'une fonction
 peut en appeler une autre.
 Au milieu d'une fonction, un programme peut être conduit à exécuter les
 instructions se trouvant dans une autre fonction.
 Puis, pendant l'exécution de cette nouvelle fonction, le programme peut
 à nouveau devoir exécuter une autre fonction.
 Heureusement, Julia est doué pour conserver la trace de l'endroit où reprendre.
 Ainsi, chaque fois qu'une fonction se termine, le programme reprend où
 il s'était arrêté au sein de la fonction qu'il a appelée.
 
\end_layout

\begin_layout Standard
En résumé, la lecture d'un programme ne se fait pas toujours linéairement
 de haut en bas.
 Généralement, pour la compréhension d'un programme, il s'avère préférable
 de suivre le déroulement de l'exécution.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Paramètres-et-arguments"

\end_inset

Paramètres et arguments
\end_layout

\begin_layout Standard
Certaines des fonctions que nous avons vues nécessitent des arguments.
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramètre
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
argument
\end_layout

\end_inset

 C'est le cas de la fonction 
\color blue
sin
\color inherit
, qui requiert un nombre en argument.
 D'autres fonctions en nécessitent plusieurs.
 Par exemple, 
\color blue
parse
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
parse()
\end_layout

\end_inset


\color inherit
 en prend deux: un 
\emph on
type
\emph default
 de nombre et une chaîne de caractères.
\end_layout

\begin_layout Standard
À l'intérieur d'une fonction, les arguments sont affectés à des variables
 appelées 
\emph on
paramètres
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
paramètre
\end_layout

\end_inset

.
 Le petit programme suivant décrit une fonction qui prend un argument pour
 calculer son carré (ceci à titre d'exemple numérique):
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> function
\color inherit
 élève_au_carré(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

carré = t * t
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(carré)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 élève_au_carré(5)
\end_layout

\begin_layout Plain Layout

\color lightgray
25
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En l'occurrence, l'appel de la fonction [c'est-à-dire l'instruction 
\color blue
élève_au_carré(5)
\color inherit
] passe son argument (
\color blue
5
\color inherit
) à 
\color blue
t
\color inherit
 [de la fonction 
\color blue
élève_au_carré(t)
\color inherit
].

\color blue
 t
\color inherit
 est ensuite transféré comme 
\emph on
paramètre
\emph default
 à l'intérieur de la fonction 
\color blue
élève_au_carré(t)
\size small
\color inherit
.

\size default
 Le résultat de la multiplication (
\color blue
t * t
\color inherit
) est affecté à la variable 
\color blue
carré
\color inherit
.
 Celle-ci est passée en argument à la fonction 
\color blue
println
\color inherit
 et affichée.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
eleve_au_carre@élève_au_carré
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'intérêt de ce type de pratique est de pouvoir réutiliser la fonction ultérieur
ement.
 Par exemple, en vertu de ce qui a été discuté en section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Opérations-sur-les-chaines-de-caracteres"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\color blue
élève_au_carré("lu")
\color brown
 
\color black
permet d'obtenir le mot 
\color blue
lulu
\color black
.
\end_layout

\begin_layout Standard
Il est également possible d'utiliser une variable en tant qu'argument:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
nom = 
\color brown
"lu"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"lu"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
élève_au_carré(nom)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
lulu
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le nom de la variable que nous passons en argument (
\color blue
nom
\color inherit
) n'a rien à voir avec le nom du paramètre (
\color blue
t
\color inherit
).
 Peu importe comment la valeur a été nommée dans l'appel.
 Nous appelons 
\color blue
t
\color inherit
 tout qui arrive en argument dans la fonction 
\color blue
élève_au_carré
\color inherit
.
\end_layout

\begin_layout Standard
Voici un autre exemple de fonction simple:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
printtwice(eluard)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(eluard)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(eluard)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Avec cet appel:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
printtwice(
\color green
π
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia retourne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
π
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
π
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Les variables et les paramètres sont locaux
\end_layout

\begin_layout Standard
Une variable
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable locale
\end_layout

\end_inset

 créée à l'intérieur d'une fonction est locale.
 Ceci signifie qu'elle n'existe qu'à l'intérieur de la fonction.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
cattwice
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
printtwice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 cattwice(part1, part2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

concat = part1 * part2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printtwice(concat)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fonction prend deux arguments, les concatène et affiche le résultat.
 Voici un exemple d'utilisation: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
line1 = 
\color brown
"Facile est beau "
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Facile est beau "
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
line2 = 
\color brown
"sous tes paupières"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"sous tes paupières"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
cattwice(line1, line2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Facile est beau sous tes paupières
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Facile est beau sous tes paupières
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque 
\color blue
cattwice
\color inherit
 se termine, la variable 
\color blue
concat 
\color inherit
est détruite.
 Si nous essayons de l'afficher, nous obtenons une exception: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
println(concat)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 concat not defined
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ceci illustre le fait que les paramètres sont locaux.
 Par exemple (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Paramètres-et-arguments"
plural "false"
caps "false"
noprefix "false"

\end_inset

), hors de la fonction 
\color blue
élève_au_carré
\color inherit
, 
\color blue
t 
\color inherit
n'existe pas.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrammes-de-pile"

\end_inset

Diagrammes de pile
\end_layout

\begin_layout Standard
Pour savoir quelles variables utiliser et à quel endroit, il est parfois
 utile de dessiner un diagramme de pile.
 Comme les diagrammes d'état, les diagrammes de pile
\begin_inset Index idx
status open

\begin_layout Plain Layout
pile, diagramme de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de pile
\end_layout

\end_inset

 montrent la valeur de chaque variable.
 En outre, ils montrent la fonction à laquelle chaque variable appartient.
 Chaque fonction est représentée par un cadre.
 Un cadre est un espace fermé avec le nom d'une fonction en vis-à-vis et
 les paramètres et variables de la fonction à l'intérieur.
 
\end_layout

\begin_layout Standard
Le diagramme de pile de l'exemple précédent (avec 
\color blue
cattwice
\color inherit
) est présenté dans la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Diagramme-de-pile"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/stack_diagram_2_inkscape.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-de-pile"

\end_inset

Diagramme de pile.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les cadres sont disposés dans une pile qui indique quelle fonction est appelée.
 Dans cet exemple, la fonction 
\color blue
printtwice
\color inherit
 a été appelée par 
\color blue
cattwice
\color inherit
 et 
\color blue
cattwice
\color inherit
 l'a été par 
\color blue
Main
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Main
\end_layout

\end_inset

 
\color blue
Main
\color inherit
 est un nom spécial désignant le cadre supérieur.
 Lorsqu'une variable est créée en dehors de toute fonction, elle appartient
 à 
\color blue
Main
\color inherit
.
 Chaque paramètre fait référence à la même valeur que son argument correspondant.
 Ainsi, 
\color blue
part1
\color inherit
 a la même valeur que 
\color blue
line1
\color inherit
, 
\color blue
part2
\color inherit
 a la même valeur que 
\color blue
line2
\color inherit
 et 
\color blue
eluard
\color inherit
 a la même valeur que 
\color blue
concat
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
cattwice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si une erreur se produit pendant un appel de fonction, Julia imprime le
 nom de la fonction, le nom de la fonction qui l'a appelée et le nom de
 la fonction qui a appelé tout cela jusqu'à 
\color blue
Main
\color inherit
.
\end_layout

\begin_layout Standard
Par exemple, si nous essayions d'accéder à 
\color blue
concat
\color inherit
 à partir de 
\color blue
printtwice
\color inherit
, nous obtiendrions une erreur 
\color blue
UndefVarError
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
UndefVarError
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
printtwice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 concat not defined
\end_layout

\begin_layout Plain Layout

\size small
\color black
Stacktrace
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout

\size small
\color black
[1] printtwice at ./REPL[1]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2 [inlined]
\end_layout

\begin_layout Plain Layout

\size small
\color black
[2] cattwice (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:S
\end_layout

\end_inset

tring, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:S
\end_layout

\end_inset

tring) at ./REPL[2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette liste de fonctions est appelée 
\color blue
trace de pile
\color inherit
 ou
\color blue
 
\emph on
stacktrace
\emph default
\color inherit
.
 Elle indique dans quel fichier du programme l'erreur s'est produite ainsi
 que sur quelle ligne.
 Elle indique quelles fonctions étaient en cours d'exécution à ce moment-là
 et, également, la ligne de code qui a causé l'erreur.
\begin_inset Index idx
status open

\begin_layout Plain Layout
pile, trace de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
trace de pile
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stacktrace
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'ordre des fonctions dans la trace de pile est l'inverse de celui des cadres
 dans le diagramme de pile.
 La fonction en cours d'exécution se trouve au sommet de la pile.
\end_layout

\begin_layout Section
Fonction avec retour et fonction vide
\end_layout

\begin_layout Standard
Certaines des fonctions que nous avons utilisées, comme les fonctions mathématiq
ues, retournent des résultats.
 Appelons-les 
\begin_inset Quotes cld
\end_inset

 fonctions avec retour 
\begin_inset Quotes crd
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction avec retour
\end_layout

\end_inset

 D'autres fonctions effectuent une action, mais ne retournent pas de valeur.
 On les appelle des fonctions nulles ou vides (
\emph on
void functions
\emph default
).
 Dans l'exemple suivant: 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
void function
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
fonction vide
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
fonction nulle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
printtwice(brassens)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(brassens)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(brassens)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
la fonction 
\color blue
printtwice
\color inherit
 vue précédemment (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Paramètres-et-arguments"
plural "false"
caps "false"
noprefix "false"

\end_inset

) ne retourne aucune valeur, bien qu'elle effectue deux actions.
\begin_inset Index ind
status open

\begin_layout Plain Layout
printtwice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En appelant une fonction avec retour, l'intention est d'exploiter le résultat
 obtenu.
 Par exemple, il est tout-à-fait possible d'affecter le résultat à une variable
 ou de l'utiliser comme partie d'une expression: 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
golden
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x = cos(radians)
\end_layout

\begin_layout Plain Layout

\size small
golden
\color green
 
\color black
= (sqrt(5) + 1) / 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsqu'une fonction est appelée en mode interactif, Julia affiche le résultat:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
sqrt()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
sqrt(5)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.23606797749979
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, dans un script contenant une instruction telle que:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
sqrt(5)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
si une fonction avec retour est appelée seule, la valeur de retour est définitiv
ement perdue.
 Ce script calcule bien la racine carrée de 5, mais, comme il n'enregistre
 ni n'affiche le résultat, il n'est guère utile.
\end_layout

\begin_layout Standard
Les fonctions vides ou nulles peuvent afficher un message à l'écran ou avoir
 quelque autre effet, mais elles n'ont pas de valeur de retour.
 Si le résultat est attribué à une variable, nous obtenons une valeur spéciale
 appelée
\emph on
 nothing
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
resultat = élève_au_carré(5)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
25
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
show(resultat)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
nothing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour imprimer la valeur 
\color blue
nothing
\color inherit
, nous devons utiliser la fonction 
\color blue
show
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
show()
\end_layout

\end_inset


\color inherit
 qui agit comme 
\color blue
println
\color inherit
 mais en gérant la valeur
\color blue
 nothing
\color inherit
.
\end_layout

\begin_layout Standard
La valeur 
\color blue
nothing
\color inherit
 n'est pas de la même nature que la chaîne "nothing".
\begin_inset Index idx
status open

\begin_layout Plain Layout
nothing
\end_layout

\end_inset

 C'est une valeur spéciale qui est caractérisée par son propre type:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
typeof(
\color green
nothing
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Nothing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous commencerons à rédiger des fonctions avec retour aux chapitres
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Fonctions-avec-retour"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et suivants.
\end_layout

\begin_layout Section
Pourquoi utiliser des fonctions?
\end_layout

\begin_layout Standard
Il ne semble peut-être pas évident de comprendre pourquoi il est astucieux
 de diviser un programme en fonctions.
 Il existe plusieurs raisons à cela:
\end_layout

\begin_layout Itemize
la création d'une nouvelle fonction offre la possibilité de nommer un groupe
 d'instructions, ce qui rend tout programme plus facile à lire et à déboguer,
\end_layout

\begin_layout Itemize
les fonctions rendent un programme plus concis en éliminant le code répétitif.
 Plus tard, s'il apporte une modification, le programmeur ne doit l'introduire
 qu'à un seul endroit.
\end_layout

\begin_layout Itemize
diviser un programme de grande taille en fonctions permet de déboguer chaque
 partie une à une et les assembler ensuite en un tout opérationnel.
\end_layout

\begin_layout Itemize
des fonctions bien conçues sont souvent utiles pour de nombreux programmes.
 Une fois écrite et déboguée, une fonction peut être réutilisée,
\end_layout

\begin_layout Itemize
en Julia, les fonctions améliorent considérablement la performance.
 
\end_layout

\begin_layout Section
Débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le débogage est une des compétences les plus importantes qu'un programmeur
 doit absolument acquérir.
 Bien qu'il puisse être frustrant, le débogage est une des parties les plus
 riches intellectuellement, les plus stimulantes et les plus intéressantes
 de la programmation.
 D'une certaine manière, le débogage ressemble au travail de détective.
 Confronté à des indices, le programmeur doit déduire les processus et les
 événements qui ont conduit aux résultats erronés observés.
\end_layout

\begin_layout Standard
Le débogage s'avère également similaire à une science expérimentale.
 Lorsque se présente une idée de ce qui coince, il convient de modifier
 le programme et l'essayer à nouveau.
 Si l'hypothèse est correcte, le résultat de la modification peut être prédit
 et, graduellement, on s'approche d'un programme opérationnel.
 Si l'hypothèse est fausse, il faut en formuler une nouvelle.
 Comme l'a fait remarquer Sherlock Holmes:
\end_layout

\begin_layout Quotation

\emph on
When you have eliminated the impossible, whatever remains, however improbable,
 must be the truth.
 
\emph default
(A.
 Conan Doyle – The Sign of Four)
\end_layout

\begin_layout Quotation

\emph on
Lorsque vous avez éliminé l'impossible, ce qui reste, si improbable soit-il,
 est nécessairement la vérité.

\emph default
 (Traduction de Jeanne de Polignac)
\end_layout

\begin_layout Standard
Pour certains, la programmation et le débogage sont une seule et même notion:
 la programmation est le processus qui consiste à déboguer progressivement
 un programme jusqu'à ce qu'il exécute ce à quoi il est destiné.
 L'idée est de commencer avec un programme qui fonctionne et d'y apporter
 de petites modifications, en les déboguant au fur et à mesure.
\end_layout

\begin_layout Standard
Par exemple, 
\noun on
Linux
\begin_inset Index idx
status open

\begin_layout Plain Layout

\noun on
Linux
\end_layout

\end_inset


\noun default
 est un système d'exploitation qui contient des millions de lignes de code.
 Pourtant, il a commencé comme un simple programme que Linus Torvalds
\begin_inset Index idx
status open

\begin_layout Plain Layout
Torvalds, Linus
\end_layout

\end_inset

 a utilisé pour explorer la puce Intel 80386.
 Selon 
\begin_inset CommandInset href
LatexCommand href
name "Larry Greenfield"
target "https://ftp.utcluj.ro/pub/docs/ldp/bible-src/user-alpha-4/guide/guide.html"
literal "false"

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Greenfield, Larry
\end_layout

\end_inset

 dans 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{The Linux User's Guide}"
target "https://osm.hpi.de/bs/2019/material/The_Linux_Users_Guide.pdf"
literal "true"

\end_inset

: 
\begin_inset Quotes cld
\end_inset

Un des premiers projets de Linus était un programme qui permettait de passer
 de l'impression "AAAA" à "BBBB".
 Ce programme a ensuite évolué vers le noyau
\noun on
 Linux
\begin_inset Quotes crd
\end_inset


\noun default
.
 
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction, définition
\end_layout

\end_inset

 séquence nommée d'instructions qui effectue une opération utile.
 Les fonctions peuvent ou non prendre des arguments et peuvent ou non produire
 un résultat, 
\end_layout

\begin_layout Description
définition
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

fonction déclaration qui crée une nouvelle fonction, en précisant son nom,
 ses paramètres et les instructions qu'elle contient, 
\end_layout

\begin_layout Description
objet
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
\color black
fonction, objet de
\end_layout

\end_inset

 valeur créée par la définition d'une fonction.
 Le nom de la fonction est une variable qui fait référence à un objet de
 la fonction, 
\end_layout

\begin_layout Description
en-tête première ligne de la définition d'une fonction, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
en-tête
\end_layout

\end_inset


\end_layout

\begin_layout Description
corps
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
corps
\end_layout

\end_inset

 séquence d'instructions à l'intérieur d'une fonction, 
\end_layout

\begin_layout Description
paramètre
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
paramètre
\end_layout

\end_inset

 nom utilisé à l'intérieur d'une fonction pour désigner la valeur passée
 en argument, 
\end_layout

\begin_layout Description
appel
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

fonction
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction, appel de
\end_layout

\end_inset

 déclaration qui dirige l'exécution vers une fonction.
 Elle se compose du nom de la fonction suivi d'une liste d'arguments entre
 parenthèses.
 
\end_layout

\begin_layout Description
argument
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
argument
\end_layout

\end_inset

 valeur fournie à une fonction lorsque celle-ci est appelée.
 Cette valeur est attribuée au paramètre correspondant dans la fonction,
 
\end_layout

\begin_layout Description
variable
\begin_inset space ~
\end_inset

locale
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
variable locale
\end_layout

\end_inset

 variable définie à l'intérieur d'une fonction.
 Une variable locale ne peut être utilisée qu'à l'intérieur de la fonction
 où elle est déclarée, 
\end_layout

\begin_layout Description
valeur
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

retour
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
valeur de retour
\end_layout

\end_inset

 résultat du traitement d'une fonction.
 Si un appel de fonction est utilisé comme une expression, la valeur de
 retour est la valeur de l'expression, 
\end_layout

\begin_layout Description
fonction
\begin_inset space ~
\end_inset

avec
\begin_inset space ~
\end_inset

retour
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction avec retour
\end_layout

\end_inset

 fonction qui retourne une valeur à l'appelant, 
\end_layout

\begin_layout Description
fonction
\begin_inset space ~
\end_inset

void
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
fonction void
\end_layout

\end_inset

 (fonction nulle ou vide) fonction qui retourne toujours 
\color blue
nothing
\color inherit
, 
\end_layout

\begin_layout Description

\color blue
nothing
\color inherit
 valeur spéciale renvoyée par les fonctions vides, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nothing
\end_layout

\end_inset


\end_layout

\begin_layout Description
composition
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
composition
\end_layout

\end_inset

 (ou combinaison) utilisation d'une expression (ou d'une déclaration) dans
 le cadre d'une expression (ou d'une déclaration) plus large,
\end_layout

\begin_layout Description
flux
\begin_inset space ~
\end_inset

d'exécution
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
flux d'exécution
\end_layout

\end_inset

 ordre d'exécution des instructions, 
\end_layout

\begin_layout Description
diagramme
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

piles
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
diagramme de pile
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
pile, diagramme de
\end_layout

\end_inset

 représentation graphique d'une pile de fonctions, de leurs variables et
 des valeurs auxquelles elles se réfèrent, 
\end_layout

\begin_layout Description
cadre rectangle dans un diagramme de pile qui représente un appel de fonction.
 Un cadre contient les variables locales et les paramètres de la fonction,
 
\end_layout

\begin_layout Description
trace
\begin_inset space ~
\end_inset

d'appel
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset


\emph on
stacktrace
\emph default
)
\series medium

\begin_inset Index idx
status open

\begin_layout Plain Layout
trace d'appel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
appel, trace
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stacktrace
\end_layout

\end_inset


\series default
 liste des fonctions qui sont en cours d'exécution, imprimée lorsqu'une
 exception se produit.
 Ce terme a pour synonyme trace de pile, 
\emph on
stack trace
\emph default
, 
\emph on
stack backtrace
\emph default
 ou encore 
\emph on
stack traceback
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
trace d'appel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
appel, trace d'
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stacktrace
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Ces exercices doivent être effectués en utilisant uniquement les déclarations
 et autres notions telles qu'étudiées jusqu'à présent.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 3-2
\end_layout

\begin_layout Standard
Écrivez
\begin_inset Index ind
status open

\begin_layout Plain Layout
rightjustify
\end_layout

\end_inset

 une fonction nommée 
\color blue
rightjustify
\color inherit
 qui prend une chaîne de caractères nommée 
\color blue
s 
\color inherit
comme paramètre et affiche la chaîne avec suffisamment d'espaces de tête
 pour que la dernière lettre de la chaîne
\begin_inset Foot
status open

\begin_layout Plain Layout
Dans l'exemple, 
\begin_inset CommandInset href
LatexCommand href
name "Julieta"
target "https://fr.wikipedia.org/wiki/Julieta"
literal "false"

\end_inset

 est une allusion au film de Pedro Almodovar.
\end_layout

\end_inset

 se trouve dans la colonne 70 de l'affichage.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
length()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
rightjustify("Julieta")
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Julieta
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Utilisez la concaténation et la répétition des chaînes de caractères.
 De plus, Julia fournit une fonction intégrée appelée 
\backslash
textcolor{blue}{length} qui retourne la longueur d'une chaîne de caractères,
 de sorte que la valeur de 
\backslash
textcolor{blue}{length(
\backslash
textquotedbl Julieta
\backslash
textquotedbl)} est 7.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 3-3
\end_layout

\begin_layout Standard
Un objet de fonction est une valeur que vous pouvez attribuer à une variable
 ou passer en argument.
 Par exemple, 
\color blue
dotwice
\color inherit
 est une fonction qui prend un objet de fonction comme argument et l'appelle
 deux fois: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
dotwice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
dotwice(f) 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f()
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f() 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un exemple qui utilise 
\color blue
dotwice 
\color inherit
pour appeler deux fois une fonction intitulée 
\color blue
printspam
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printspam
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
printspam()
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"spam"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
dotwice(printspam)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Saisissez cet exemple dans un script et testez-le.
\end_layout

\begin_layout Enumerate
Modifiez la fonction 
\color blue
dotwice
\color inherit
 pour qu'elle prenne deux arguments, un objet fonction ainsi qu'une valeur,
 et qu'elle appelle la fonction deux fois en passant la valeur comme argument.
\end_layout

\begin_layout Enumerate
Dans votre script, copiez la définition de 
\color blue
printtwice
\color inherit
 donnée plus haut dans ce chapitre (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Paramètres-et-arguments"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Enumerate
Utilisez la version modifiée de 
\color blue
dotwice
\color inherit
 pour appeler 
\color blue
printtwice
\color inherit
 deux fois, en passant 
\color blue
"spam"
\color inherit
 comme argument.
\end_layout

\begin_layout Enumerate
Définissez une nouvelle fonction appelée 
\color blue
dofour
\color inherit
 qui prend un objet de fonction et une valeur, puis qui appelle la fonction
 quatre fois en passant la valeur comme paramètre.
 Il ne doit y avoir que deux énoncés dans le corps de cette fonction et
 non quatre.
\begin_inset Index ind
status open

\begin_layout Plain Layout
dofour
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-4-14-3"

\end_inset

Exercice 3-4
\end_layout

\begin_layout Enumerate
Rédigez une fonction 
\color blue
grid
\color inherit
 qui affiche une grille telle que représentée dans la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Figure-Exercice-4-14-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
grid
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction qui dessine une grille similaire avec quatre lignes
 et quatre colonnes (ce problème est basé sur un exercice de 
\begin_inset CommandInset href
LatexCommand href
name "Steve Oualline, Practical C Programming"
target "https://www.oreilly.com/library/view/practical-c-programming/1565923065/"
literal "false"

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-6"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Oualline, Steve
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Pour imprimer plus d'une valeur sur une ligne, vous pouvez imprimer une
 séquence de valeurs séparées par des virgules:
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="100mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
println(
\color brown
"+"
\color black
, 
\color brown
"-"
\color black
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
La fonction 
\color blue
print
\color inherit
 ne passe pas à la ligne suivante:
\begin_inset Index ind
status open

\begin_layout Plain Layout

\size normal
print
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="100mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
print(
\color brown
"+"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color black
println(
\color brown
"-"
\color black
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
Le résultat de ces deux dernières déclarations est 
\color blue
"+ -"
\color inherit
 sur la même ligne.
 La sortie de la déclaration suivante commencerait à la ligne suivante.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PNG/exercice_4_14_3.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Figure-Exercice-4-14-3"

\end_inset

Grille associée à l'exercice 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-4-14-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (partie 1).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Étude-de-cas-conception-interface"

\end_inset

Étude de cas: Conception d'une interface
\end_layout

\begin_layout Standard
Ce chapitre présente une étude de cas illustrant la conception de fonctions
 travaillant collaborativement.
\end_layout

\begin_layout Standard
Il présente des graphiques 
\begin_inset Quotes cld
\end_inset

tortue
\begin_inset Quotes crd
\end_inset

 (Turtle
\begin_inset Index idx
status open

\begin_layout Plain Layout
Turtle
\end_layout

\end_inset

), un moyen de créer des dessins à l'aide de programmes.
 Les graphiques 
\begin_inset Quotes cld
\end_inset

tortue
\begin_inset Quotes crd
\end_inset

 ne sont pas inclus dans la bibliothèque standard, donc le module ThinkJulia
\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJulia, module
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJuliaFR, module
\end_layout

\end_inset

 doit donc être ajouté à l'installation de Julia (avant de poursuivre, consultez
 l'annexe
\begin_inset space ~
\end_inset

B [
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

], en particulier la sous-section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Installation-de-modules"
plural "false"
caps "false"
noprefix "false"

\end_inset

, qui traite de l'installation des modules Julia).
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Turtles"

\end_inset

Turtles
\end_layout

\begin_layout Standard
Un module
\begin_inset Index idx
status open

\begin_layout Plain Layout
module
\end_layout

\end_inset

 est un fichier qui contient un ensemble de fonctions connexes.
 Julia fournit certains modules dans sa bibliothèque standard.
 Des fonctionnalités supplémentaires peuvent être ajoutées à partir d'une
 collection croissante de paquets.
 Le lecteur se référera à 
\begin_inset CommandInset href
LatexCommand href
name "Julia Observer "
target "https://juliaobserver.com"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Julia Observer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les paquets peuvent être installés à partir du REPL en entrant dans le mode
 Pkg
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pkg
\end_layout

\end_inset

 du REPL à l'aide de la touche 
\color blue
]
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{(
\begin_inset Quotes cld
\end_inset

@v1.x) pkg}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg>
\color inherit
 add
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size small
add
\end_layout

\end_inset

 https
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

//github.com/BenLauwens/ThinkJulia.jl
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color cyan
➥ pour la version en français:
\end_layout

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg>
\color inherit
 add
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size small
add
\end_layout

\end_inset

 https
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

//github.com/aquarelleX332/ThinkJuliaFR.jl
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'installation peut prendre du temps.
\end_layout

\begin_layout Standard
Avant de pouvoir utiliser les fonctions d'un module, nous devons importer
 ce dernier avec une déclaration d'utilisation:
\begin_inset Index idx
status open

\begin_layout Plain Layout
using
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
using 
\color black
ThinkJulia
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color cyan
➥ pour la version en français:
\end_layout

\begin_layout Plain Layout

\size small
\color green
using 
\color black
ThinkJuliaFR
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Turtle(0.0, 0.0, true, 0.0, (0.0, 0.0, 0.0))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le module ThinkJulia (ou ThinkJuliaFR) fournit une fonction appelée 
\color blue
Turtle
\color inherit
 qui crée un objet nommé 
\color blue
Luxor.Turtle
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout
Luxor
\end_layout

\end_inset

, que nous attribuons à une variable nommée
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

(
\color blue

\backslash

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:turtle
\backslash
string:
\end_layout

\end_inset

 TAB
\color inherit
).
 Une fois que nous avons créé une tortue, nous pouvons appeler une fonction
 pour la déplacer sur une feuille dessin.
 Par exemple, ce code fait avancer la tortue 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@svg}
\end_layout

\end_inset

: 
\size small

\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
forward()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
begin
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
width
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 600.0 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
height
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 600.0 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
filename
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 luxor-drawing-165611_608.svg 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 svg
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En conséquence de quoi, un graphique — intitulé, en l'occurrence,
\size small
\color lightgray
 
\color blue
luxor-drawing-165611_608.svg
\size default
\color inherit
 — s'affiche dans la partie Plots du REPL.
 Nous pouvons effectuer une recherche pour déterminer dans quel répertoire
 se trouve ce fichier (sous GNU/
\noun on
Linux
\noun default
: 
\color blue
sudo updatedb
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
updatedb
\end_layout

\end_inset


\color inherit
 et, ensuite en mode utilisateur, 
\color blue
locate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
locate
\end_layout

\end_inset


\color inherit
 indiquera l'emplacement du fichier 
\family typewriter
.svg
\family default
).
 Le résultat devrait ressembler au dessin de la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Déplacement-de-la-tortue-en-avant"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PNG/luxor-drawing-165611_608.png
	lyxscale 50
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Déplacement-de-la-tortue-en-avant"

\end_inset

Déplacement de la tortue en avant (du centre vers la droite).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le mot-clé 
\color purple
@svg
\color inherit
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@svg}
\end_layout

\end_inset

permet à une macro
\begin_inset Index idx
status open

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 de fonctionner, qui dessine une image SVG
\begin_inset Index idx
status open

\begin_layout Plain Layout
SVG
\end_layout

\end_inset

.
 Les macros sont une fonctionnalité importante mais avancée de Julia.
 Les arguments de marche sont 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

 et une distance exprimées en pixels.
 De ce fait, la taille réelle dépend de l'affichage de l'utilisateur.
\end_layout

\begin_layout Standard

\color blue
turn
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
\color black
turn()
\end_layout

\end_inset


\color inherit
 est une autre fonction pouvant être sollicitée avec 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

 comme premier argument et qui permet de réorienter la tortue.
 Le deuxième argument que prend 
\color purple
turn
\color inherit
 est un angle exprimé en degrés.
\end_layout

\begin_layout Standard
De plus, chaque tortue tient un stylo, qui est soit vers le bas, soit vers
 le haut.
 Si le stylo est vers le bas, la tortue laisse une trace lorsqu'elle se
 déplace.
 
\emph on
A contrario
\emph default
, si le stylo est relevé, la tortue peut avancer, mais sans déposer de trace.
 Les fonctions 
\color blue
penup
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
penup
\end_layout

\end_inset


\color inherit
 et 
\color blue
pendown
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
pendown
\end_layout

\end_inset


\color inherit
 signifient respectivement stylo baissé et stylo relevé.
\end_layout

\begin_layout Standard
Pour dessiner un angle droit, modifions l'appel de la macro:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous devrions observer un dessin tel que représenté dans la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Un-angle-droit-avec-Turtle"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PNG/luxor-drawing-172110_831.png
	lyxscale 50
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Un-angle-droit-avec-Turtle"

\end_inset

Un angle droit dessiné avec le module Turtle.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-1
\end_layout

\begin_layout Standard
Modifiez la macro pour dessiner un carré.
 Ne continuez pas tant que vous n'arrivez pas au bon résultat.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Répétitions-simples"

\end_inset

Répétitions simples
\end_layout

\begin_layout Standard
Il y a beaucoup de chances que vous ayez écrit ceci:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous pouvons faire la même chose de manière plus concise avec une déclaration
 
\color blue
for
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> for
\color black
 i in 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Hello!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello!
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello!
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello!
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Hello!
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
C'est
\begin_inset Index idx
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 l'utilisation la plus simple de la déclaration 
\color blue
for
\color inherit
.
 Nous en verrons davantage plus tard.
 Cependant, cela devrait suffire pour reformuler le programme de dessin
 de carré.
 Ne continuez pas tant que vous n'aurez pas réussi.
\end_layout

\begin_layout Standard
Voici une déclaration 
\color blue
for
\color inherit
 qui dessine un carré: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color black
 i 
\color green
in
\color black
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La syntaxe d'une déclaration 
\color blue
for 
\color inherit
est similaire à celle d'une définition de fonction.
 Elle comporte un en-tête et un corps qui se termine par le mot-clé 
\color blue
end
\color inherit
.
 Le corps peut contenir un nombre quelconque d'instructions.
 Une instruction 
\color blue
for
\color inherit
 est également appelée boucle, car le flux d'exécution passe par le corps
 et revient ensuite en boucle vers le haut.
 Dans le cas présent, le corps est exécuté quatre fois.
\end_layout

\begin_layout Standard
Cette version est en fait un peu différente du précédent code de dessin
 de carré parce qu'elle effectue une rotation supplémentaire après avoir
 dessiné le dernier côté du carré.
 Cette rotation supplémentaire allonge le temps d'exécution, mais elle simplifie
 le code, parce que le programme exécute la même chose dans chaque boucle.
 Cette version a également pour effet de laisser la tortue dans la position
 de départ, tournée dans la direction initiale.
\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Standard
Voici une série d'exercices utilisant 
\color blue
Turtle
\color inherit
.
 Ils sont censés être amusants, mais ils ont aussi un but.
 Pendant que vous travaillez sur ces exercices, réfléchissez à l'intérêt
 qu'ils présentent.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Les sections suivantes présentent des solutions aux exercices.
 Ne regardez pas avant d'avoir terminé (ou du moins avant d'avoir vraiment
 essayé).
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-2
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
square 
\color inherit
qui prend un paramètre appelé 
\color blue
t
\color inherit
, qui est une tortue.
 Elle doit utiliser 
\color blue
Turtle
\color inherit
 pour dessiner un carré.
\begin_inset Index ind
status open

\begin_layout Plain Layout
square
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-3
\end_layout

\begin_layout Standard
Écrivez un appel de fonction qui passe
\color blue
 t
\color inherit
 comme argument à 
\color blue
square
\color inherit
, puis exécutez à nouveau la macro.
\end_layout

\begin_layout Subsection*
Exercice 4-4
\end_layout

\begin_layout Standard
Ajoutez à 
\color blue
square
\color inherit
 un autre paramètre, nommé 
\color blue
len
\color inherit
.
 Modifiez le corps de manière à ce que la longueur des côtés soit 
\color blue
len
\color inherit
, puis modifiez l'appel de fonction pour fournir un deuxième argument.
 Exécutez à nouveau la macro.
 Testez le programme avec une plage de valeurs pour
\color blue
 len
\color inherit
.
\end_layout

\begin_layout Subsection*
Exercice 4-5
\end_layout

\begin_layout Standard
Faites une copie de
\color blue
 square
\color inherit
 et changez le nom en 
\color blue
polygon
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
polygon
\end_layout

\end_inset

 Ajoutez un autre paramètre nommé
\color blue
 n
\color inherit
 et modifiez le corps pour qu'il dessine un polygone régulier à 
\color blue
n
\color inherit
 côtés.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

L'angle au centre des polygones réguliers à  
\backslash
textcolor{blue}{n}-côtés vaut  
\backslash
textcolor{blue}{360/n} degrés.
 Par exemple, pour un dodécagone régulier, cet angle vaut 30°.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-6
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
circle
\color inherit
 incluant comme paramètres une tortue 
\color blue
t
\color inherit
 ainsi qu'un rayon 
\color blue
r
\color inherit
 et qui dessine un cercle approximatif en appelant 
\color blue
polygon 
\color inherit
avec une longueur et un nombre de côtés appropriés.
 Testez votre fonction avec une gamme de valeurs de
\color blue
 r
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
circle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Calculez la circonférence du cercle et assurez-vous que 
\backslash
textcolor{blue}{len * n == circumference}.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-7
\end_layout

\begin_layout Standard
Développez une version plus générale de 
\color blue
circle
\color inherit
 appelée 
\color blue
arc
\color inherit
 qui prend un paramètre d'angle supplémentaire et qui détermine la fraction
 d'un cercle à dessiner.
 
\color blue
angle
\color inherit
 s'exprime en degrés.
 En conséquence, quand 
\color blue
angle = 360
\color inherit
, 
\color blue
arc
\color inherit
 doit dessiner un cercle complet.
\begin_inset Index ind
status open

\begin_layout Plain Layout
arc
\end_layout

\end_inset


\end_layout

\begin_layout Section
Encapsulation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
encapsulation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le premier exercice demande de placer le code de dessin 
\color blue
square
\color inherit
 dans une définition de fonction et d'appeler la fonction en passant la
 tortue comme paramètre.
 Voici une solution:
\begin_inset Index ind
status open

\begin_layout Plain Layout
square
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
function
\color inherit
 square(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color black
 i 
\color green
in
\color black
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, 100)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -90)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\color inherit

\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

square(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les déclarations 
\color blue
forward
\color inherit
 et
\color green
 
\color blue
turn
\color inherit
 sont indentées deux fois pour montrer qu'elles se trouvent à l'intérieur
 de la boucle
\color blue
 for
\color inherit
 figurant elle-même à l'intérieur de la définition de la fonction 
\color blue
square
\color inherit
.
\end_layout

\begin_layout Standard
À l'intérieur de la fonction 
\color blue
square
\color inherit
,
\color blue
 t
\color inherit
 fait référence à la tortue 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 
\color blue
turn(t, -90)
\color inherit
 a donc le même effet que
\color blue
 turn(
\color inherit

\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\color blue
, -90)
\color inherit
.
 Dans ce cas, pourquoi ne pas appeler le paramètre 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

? L'idée est que 
\color blue
t
\color inherit
 peut être n'importe quelle tortue, pas seulement 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

.
 Un autre animal qui effectue le même travail que 
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

 peut être créé et passé comme argument à 
\color blue
square
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/camel.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

square(
\begin_inset Graphics
	filename Figures/PNG/camel.png
	scale 35

\end_inset

)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le procédé consistant à incorporer un morceau de code dans une fonction
 s'appelle l'
\emph on
encapsulation
\emph default
.
 Le premier avantage de l'encapsulation est d'associer un nom au code, qui
 sert en quelque sorte de documentation.
 Un autre avantage résulte du fait que lors de la réutilisation ultérieure
 du code, il devient plus concis d'appeler une fonction deux fois que d'en
 
\begin_inset Quotes cld
\end_inset

copier-coller
\begin_inset Quotes crd
\end_inset

 le corps.
 
\end_layout

\begin_layout Section
Généralisation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
generalisation@généralisation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'étape suivante consiste à ajouter un paramètre 
\color blue
len
\color inherit
 à 
\color blue
square
\color inherit
.
 Voici une solution:
\begin_inset Index ind
status open

\begin_layout Plain Layout
square
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 square(t, len)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color black
 i 
\color green
in
\color black
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\color inherit

\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

square(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'ajout d'un paramètre à une fonction s'appelle une 
\emph on
généralisation
\emph default
.
 Dans la version précédente, le carré dessiné présente toujours la même
 taille.
 Dans la dernière version, sa taille peut varier.
\end_layout

\begin_layout Standard
L'étape suivante est également une 
\emph on
généralisation
\emph default
.
 Au lieu de dessiner des carrés, 
\color blue
polygon
\color inherit
 dessine des polygones réguliers avec un nombre quelconque de côtés.
 Voici une solution:
\begin_inset Index ind
status open

\begin_layout Plain Layout
polygon
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 polygon(t, n, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

angle = 360 / n
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color black
 i 
\color green
in
\color black
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\color inherit

\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset

= Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polygon(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 7, 70)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce code permet de dessiner un heptagone, chacun des côtés ayant une longueur
 de 70 pixels.
\end_layout

\begin_layout Section
Conception d'une interface
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
interface
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'étape suivante consiste à écrire 
\color blue
circle
\color inherit
, qui prend un rayon,
\color blue
 r
\color inherit
, comme paramètre.
 Voici une solution simple qui utilise 
\color blue
polygon
\color inherit
 pour dessiner un polygone à 50 côtés (pentacontagone): 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 circle(t, r)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

circumference = 2 * 
\color green
π
\color inherit
 * r
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
n = 50
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

len = circumference / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polygon(t, n, len)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première ligne calcule la circonférence d'un cercle de rayon 
\color blue
r
\color inherit
 en utilisant la formule 
\begin_inset Formula $2\pi r$
\end_inset

.
 Le paramètre 
\color blue
n
\color inherit
 est le nombre de segments dans l'approximation d'un cercle, 
\color blue
len
\color inherit
 est donc la longueur de chaque segment.
 Ainsi, la fonction 
\color blue
polygon
\color inherit
 dessine-t-elle un pentacontagone qui se rapproche d'un cercle de rayon
 
\color blue
r
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
polygon
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une des limites de cette solution vient de ce que 
\color blue
n
\color inherit
 est une constante, ce qui signifie que, pour les très grands cercles, les
 segments de droite sont trop longs.
 En revanche, pour les petits cercles, nous perdons du temps à dessiner
 de très petits segments.
 Une solution consisterait à généraliser la fonction en prenant 
\color blue
n
\color inherit
 comme paramètre.
 Cela donnerait à l'utilisateur (celui qui appelle 
\color blue
circle
\color inherit
) plus de contrôle, mais l'interface serait moins propre.
 
\end_layout

\begin_layout Standard
L'interface d'une fonction est un résumé de son utilisation: quels sont
 les paramètres? Que fait la fonction? Quelle est la valeur retournée? Une
 interface est 
\begin_inset Quotes cld
\end_inset

propre
\begin_inset Quotes crd
\end_inset

 si elle permet à l'utilisateur de faire ce qu'il souhaite sans avoir à
 s'occuper de détails inutiles.
\end_layout

\begin_layout Standard
Dans cet exemple, 
\color blue
r
\color inherit
 est un membre de l'interface, car ce paramètre conditionne le cercle à
 dessiner.
 Le paramètre 
\color blue
n
\color inherit
 est moins approprié dans la mesure où il concerne les détails relatifs
 à la façon dont le cercle doit être rendu.
\end_layout

\begin_layout Standard
Plutôt que d'encombrer l'interface, il est préférable de choisir une valeur
 appropriée de 
\color blue
n
\color inherit
 en fonction de la circonférence: 
\size small
\color black

\begin_inset Index idx
status open

\begin_layout Plain Layout
trunc()
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout

\size small
\color black
circle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 circle(t, r)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

circumference = 2 * 
\color green
π
\color inherit
 * r
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
n = 
\color green
trunc
\color black
(
\color inherit
circumference
\color black
 / 3) + 3
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

len = circumference / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polygon(t, n, len)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Désormais, le nombre de segments est un nombre entier proche de la valeur
 de 
\color blue
circumference / 3
\color inherit
 et la longueur de chaque segment vaut 3.
 Cette valeur est un bon compromis: assez petite pour que les cercles présentent
 une allure convenable, tout en étant assez grande pour être efficace et,
 qui plus est, acceptable pour toute taille de cercle.
 L'addition de 3 à 
\color blue
n 
\color inherit
garantit que le polygone ait au moins trois côtés.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Refonte-(ou-refactoring)"

\end_inset

Refonte
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
refonte
\end_layout

\end_inset

 (ou 
\emph on
refactoring
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
refactoring
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
Quand nous avons écrit
\color blue
 circle
\color inherit
, il a été possible de réutiliser 
\color blue
polygon
\color inherit
, car un polygone à grand nombre de côtés est une bonne approximation d'un
 cercle.
 Si nous voulions tracer un arc, pourrait-on utiliser 
\color blue
polygon
\color inherit
 ou 
\color blue
circle
\color inherit
? Cela demande un peu de travail.
\end_layout

\begin_layout Standard
Une possibilité est de commencer avec une copie de 
\color blue
polygon
\color inherit
 et de la transformer en 
\color blue
arc
\color inherit
.
 Le résultat ressemblerait à ceci: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
arc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 arc(t, r, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

arc_length = 2 * 
\color green
π
\color inherit
 * r * (angle / 360)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
n
\color green
 = trunc
\color black
(arc_len / 3) + 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_len = arc_len / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_angle = angle / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, step_len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -step_angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La deuxième moitié de cette fonction ressemble à 
\color blue
polygon
\color inherit
.
 Malheureusement, on ne peut pas réutiliser 
\color blue
polygon
\color inherit
 sans en changer l'interface.
 Nous pourrions généraliser
\color blue
 polygon 
\color inherit
pour prendre un angle comme troisième argument.
 Cependant, 
\color blue
polygon
\color inherit
 ne serait plus un nom approprié.
 En conséquence, renommons de manière plus générale cette fonction en 
\color blue
polyline
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
polyline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 polyline(t, n, len, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À présent, nous pouvons réécrire 
\color blue
polygon
\color inherit
 et 
\color blue
arc
\color inherit
 pour tirer parti de 
\color blue
polyline
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 polygon(t, n, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

angle = 360 / n
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
polyline(t, n, len, angle)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 arc(t, r, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

arc_length = 2 * 
\color green
π
\color inherit
 * r * (angle / 360)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
n
\color green
 = trunc
\color black
(arc_len / 3) + 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_len = arc_len / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_angle = angle / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polyline(t, n, step_len, step_angle)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Enfin, nous pouvons réécrire 
\color blue
circle
\color inherit
 afin d'utiliser 
\color blue
arc
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 circle(t, r)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

arc(t, r, 360)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce processus, qui consiste à réorganiser un programme pour améliorer les
 interfaces et faciliter la réutilisation du code, s'appelle la 
\emph on
refonte
\emph default
 (
\color black
ou
\emph on
 refactoring
\emph default
\color inherit
).
 Dans le cas présent, nous avons remarqué un code similaire dans 
\color blue
arc
\color inherit
 et 
\color blue
polygon
\color inherit
, nous l'avons donc 
\begin_inset Quotes cld
\end_inset

remanié
\begin_inset Quotes crd
\end_inset

 (refondu) en 
\color blue
polyline
\color inherit
.
\end_layout

\begin_layout Standard
Si nous avions planifié la programmation, nous aurions peut-être écrit 
\color blue
polyline
\color inherit
 au premier jet et évité la refonte.
 Souvent, au début d'un projet, on n'en connait pas assez pour concevoir
 les interfaces optimales.
 Lorsqu'on entame le codage, le problème est mieux cerné.
 Parfois, la refonte est le signe d'une compréhension approfondie d'un problème.
\end_layout

\begin_layout Section
Plan de développement
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
developpement@développement, plan de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un 
\emph on
plan de développement
\emph default
 est un processus de rédaction de programmes.
 Celui que nous avons utilisé dans cette étude de cas est constitué de deux
 étapes: l'encapsulation
\begin_inset Index idx
status open

\begin_layout Plain Layout
encapsulation
\end_layout

\end_inset

 et la généralisation
\begin_inset Index idx
status open

\begin_layout Plain Layout
generalisation@généralisation
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Les étapes de ce processus sont les suivantes :
\end_layout

\begin_layout Enumerate
commencer par écrire un petit programme sans définition de fonction,
\end_layout

\begin_layout Enumerate
une fois le programme opérationnel, identifier une partie cohérente de celui-ci.
 L'encapsuler dans une fonction et le nommer,
\end_layout

\begin_layout Enumerate
généraliser la fonction en ajoutant les paramètres appropriés,
\end_layout

\begin_layout Enumerate
répéter les étapes 1 à 3 jusqu'à obtenir un ensemble de fonctions opérationnelle
s.
 Copier et coller le code de travail (pour éviter des saisies et déboguer
 à nouveau),
\end_layout

\begin_layout Enumerate
chercher des possibilités d'améliorer le programme en le remaniant (processus
 de refonte).
 Par exemple, avec un code similaire à plusieurs endroits, envisager de
 le refondre dans une fonction générale idoine.
\end_layout

\begin_layout Standard
Cette manière de procéder présente quelques inconvénients — nous verrons
 les alternatives plus tard —, mais il s'avère utile si le programmeur ignore
 comment diviser le programme en fonctions.
 Cette approche permet de concevoir un programme de manière progressive.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Documentation-interne"

\end_inset

Documentation interne
\end_layout

\begin_layout Standard
Une documentation interne
\begin_inset Index idx
status open

\begin_layout Plain Layout
documentation interne
\end_layout

\end_inset

 brève (
\emph on
docstring
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
docstring
\end_layout

\end_inset

) est un bloc de commentaires
\begin_inset Index idx
status open

\begin_layout Plain Layout
commentaire
\end_layout

\end_inset

 situé avant une fonction pour en expliciter l'interface:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color brown
Draws n line segments with the given length and
\end_layout

\begin_layout Plain Layout

\size small
\color brown
angle (in degrees) between them.
 t is a turtle.
\end_layout

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 polyline(t, n, len, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, len)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On peut accéder à la documentation dans le REPL
\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 en saisissant le caractère
\color blue
 ?
\color inherit
 suivi du nom d'une fonction ou d'une macro et en appuyant sur ENTER:
\begin_inset Index ind
status open

\begin_layout Plain Layout
polyline
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
search
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
help
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string?
\end_layout

\end_inset

>
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
?, caractère
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
help?> polyline
\end_layout

\begin_layout Plain Layout

\size small
search
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polyline(t, n, len, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Draws n line segments with the given length and angle (in degrees) between
 them.
 t is a turtle.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La documentation brève consiste souvent en des chaînes précédées et suivies
 d'un triple
\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemet triple
\end_layout

\end_inset

 
\color brown
"
\color inherit
, également appelées chaînes multilignes, car les triples guillemets permettent
 à la chaîne de s'étendre sur plus d'une ligne.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Une documentation brève contient les informations essentielles qu'un utilisateur
 peut requérir pour utiliser correctement une fonction.
 Elle explique de manière concise ce que fait la fonction, sans toutefois
 entrer dans les détails techniques.
 Elle explique l'effet de chaque paramètre sur le comportement de la fonction
 et le type de chaque paramètre (quand cela n'est pas évident).
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une interface s'apparente à un 
\begin_inset Quotes cld
\end_inset

contrat
\begin_inset Quotes crd
\end_inset

 entre une fonction et un appelant.
 L'appelant accepte de fournir certains paramètres et la fonction consent
 à effectuer certains travaux.
\end_layout

\begin_layout Standard
Par exemple, 
\color blue
polyline
\color inherit
 nécessite quatre arguments: 
\color blue
t
\color inherit
 doit être de 
\begin_inset Quotes cld
\end_inset

type
\begin_inset Quotes crd
\end_inset

 
\family typewriter
Turtle
\family default
, 
\color blue
n
\color inherit
 un nombre entier, 
\color blue
len
\color inherit
 un nombre positif et 
\color blue
angle
\color inherit
 un nombre exprimé en degrés.
 
\end_layout

\begin_layout Standard
Ces exigences sont appelées conditions préalables
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition préalable
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
condition 
\emph on
a priori
\end_layout

\end_inset

 (ou 
\emph on
a priori
\emph default
), car elles sont supposées être vraies avant que la fonction commence à
 s'exécuter.
 
\emph on
A contrario
\emph default
, les conditions résultant de l'exécution de la fonction sont dites 
\emph on
a posteriori
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition 
\emph on
a posteriori
\end_layout

\end_inset

 Ces conditions 
\emph on
a posteriori
\emph default
 comprennent l'effet prévu de la fonction (comme les segments de ligne de
 dessin) et tout effet secondaire (comme le déplacement de la tortue ou
 d'autres modifications).
 Les conditions préalables sont de la responsabilité de l'appelant.
 Si l'appelant viole une condition préalable (correctement documentée) et
 que la fonction ne donne pas le résultat attendu, le bogue se trouve chez
 l'appelant et non dans la fonction.
 Si les conditions préalables sont satisfaites et que les conditions 
\emph on
a posteriori
\emph default
 ne le sont pas, le bogue se trouve dans la fonction.
 Si les conditions préalables et les conditions 
\emph on
a posteriori
\emph default
 sont claires, elles peuvent aider au débogage.
 
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
module fichier qui contient une collection de fonctions connexes et diverses
 définitions,
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
module
\end_layout

\end_inset


\end_layout

\begin_layout Description
paquet bibliothèque externe avec des fonctionnalités supplémentaires, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
paquet
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration
\begin_inset space ~
\end_inset

d'utilisation déclaration qui lit un fichier de module et crée un objet
 de module, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
declaration@déclaration d'utilisation
\end_layout

\end_inset


\end_layout

\begin_layout Description
boucle partie d'un programme qui peut être exécutée de manière répétitive,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
boucle
\end_layout

\end_inset


\end_layout

\begin_layout Description
encapsulation processus de transformation d'une séquence d'instructions
 en une définition de fonction, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
encapsulation
\end_layout

\end_inset


\end_layout

\begin_layout Description
généralisation processus consistant à remplacer un élément inutilement spécifiqu
e (comme un nombre) par élément suffisamment général (comme une variable
 ou un paramètre), 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
generalisation@généralisation
\end_layout

\end_inset


\end_layout

\begin_layout Description
interface description de la manière d'utiliser une fonction, y compris le
 nom ainsi que la description des arguments et de la valeur de retour, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
interface
\end_layout

\end_inset


\end_layout

\begin_layout Description
refonte
\begin_inset space ~
\end_inset

(
\emph on
refactoring
\emph default
) processus de modification d'un programme pour améliorer les interfaces
 des fonctions et d'autres qualités du code, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
refactoring
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
refonte
\end_layout

\end_inset


\end_layout

\begin_layout Description
plan
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

développement processus de conception et de rédaction de programmes, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
plan de développement
\end_layout

\end_inset


\end_layout

\begin_layout Description
documentation
\begin_inset space ~
\end_inset

courte
\begin_inset space ~
\end_inset

(
\emph on
docstring
\emph default
) chaîne qui apparaît juste avant la définition d'u\SpecialChar softhyphen
ne fonction pour documenter
 l'interface de cette dernière, 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
docstring
\end_layout

\end_inset


\end_layout

\begin_layout Description
condition
\begin_inset space ~
\end_inset

préalable
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset


\emph on
a
\begin_inset space ~
\end_inset

priori
\emph default
) exigence qui doit être satisfaite par l'appelant avant le début d'une
 fonction
\series medium

\begin_inset Index idx
status open

\begin_layout Plain Layout
condition préalable
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
condition 
\emph on
a priori
\end_layout

\end_inset


\series default
,
\end_layout

\begin_layout Description
condition
\begin_inset space ~
\end_inset


\emph on
a
\begin_inset space ~
\end_inset

posteriori
\emph default
 exigence qui doit être satisfaite par la fonction avant qu'elle ne prenne
 fin
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
\emph off
condition
\emph default
 a posteriori
\end_layout

\end_inset


\emph default
.
\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 4-8
\end_layout

\begin_layout Standard
À moins d'utiliser des scripts, inscrivez le code de ce chapitre dans un
 carnet Jupyter
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jupyter
\end_layout

\end_inset

 ou dans Pluto
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pluto
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Dessinez un diagramme de pile qui montre l'état du programme pendant l'exécution
 de 
\color blue
circle(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, radius)
\color inherit
.
 Vous pouvez faire l'arithmétique à la main ou ajouter des commentaires
 au code.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
circle
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
La version d'
\color blue
arc
\color inherit
 dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Refonte-(ou-refactoring)"
plural "false"
caps "false"
noprefix "false"

\end_inset

 n'est pas très précise, car l'approximation linéaire du cercle se fait
 toujours en dehors du vrai cercle.
 Par conséquent, la tortue se retrouve à quelques pixels de sa destination
 correcte.
 Ci-dessous, une solution qui illustre un moyen de réduire l'effet de cette
 erreur.
 Lisez le code et voyez si cela vous semble logique.
 Si vous dessinez un diagramme de pile, vous appréhenderez très probablement
 le fonctionnement.
\begin_inset Index ind
status open

\begin_layout Plain Layout
arc
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
polyline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color brown
Trace un arc d'un rayon et d'un angle donnés :
\end_layout

\begin_layout Plain Layout

\size small
\color brown
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t: turtle
\end_layout

\begin_layout Plain Layout

\size small
\color brown
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r: rayon
\end_layout

\begin_layout Plain Layout

\size small
\color brown
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

angle: angle sous-tendu par l'arc, en degrés
\end_layout

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 arc(t, r, angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

arc_len = 2 * π * r * 
\color green
abs
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
abs
\end_layout

\end_inset

(angle) / 360
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = 
\color green
trunc
\color inherit
(arc_len / 4) + 3
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_len = arc_len / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

step_angle = angle / n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# faire un léger virage à gauche avant de démarrer
\end_layout

\begin_layout Plain Layout

\size small
\color cyan
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# réduit l'erreur causée par l'approximation linéaire de l'arc
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -step_angle/2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

polyline(t, n, step_len, step_angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, step_angle/2)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-9
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Rédigez un ensemble de fonctions générales appropriées pour dessiner des
 fleurs telles que celles-ci:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Figures/PNG/turtleflowers.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-10
\end_layout

\begin_layout Standard
Rédigez un ensemble de fonctions générales appropriées pour dessiner des
 formes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Figures/PNG/turtlepies.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 4-11
\end_layout

\begin_layout Standard
Les lettres de l'alphabet peuvent être construites à partir d'un nombre
 restreint d'éléments de base, comme des lignes verticales et horizontales
 ainsi que quelques courbes.
 Concevez un alphabet qui peut être dessiné avec un nombre minimal d'éléments
 de base et écrivez ensuite des fonctions qui dessinent les lettres.
\end_layout

\begin_layout Standard
Vous devez écrire une fonction pour chaque lettre, avec les noms 
\color blue
draw_a
\color inherit
, 
\color blue
draw_b
\color inherit
, etc., et mettre vos fonctions dans un fichier nommé 
\color blue
letters.jl
\color inherit
.
\end_layout

\begin_layout Subsection*
Exercice 4-11
\end_layout

\begin_layout Standard
Consultez cette 
\begin_inset CommandInset href
LatexCommand href
name "page Wikipédia"
target "https://en.wikipedia.org/wiki/Spiral"
literal "false"

\end_inset

 afin d'apprendre des informations sur les spirales
\begin_inset Index idx
status open

\begin_layout Plain Layout
spirale
\end_layout

\end_inset

.
 Ensuite, écrivez un programme qui dessine une spirale d'Archimède
\begin_inset Index idx
status open

\begin_layout Plain Layout
Archimède, spirale
\end_layout

\end_inset

 telle que ceci:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Figures/PNG/spirale_archimede.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Conditions-et-récursion"

\end_inset

Conditions et récursion
\end_layout

\begin_layout Standard
Le sujet principal de ce chapitre est la déclaration
\color blue
 if
\color inherit
, qui exécute un code différent selon l'état du programme.
 Auparavant, considérons deux nouveaux opérateurs: la division euclidienne
 
\color blue
÷
\color inherit
 (
\color blue

\backslash
div TAB
\color inherit
)
\begin_inset Foot
status open

\begin_layout Plain Layout
Le signe 
\color blue
÷
\color inherit
 est un obèle.
\end_layout

\end_inset

 et le modulo.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
recursion@récursion
\end_layout

\end_inset


\end_layout

\begin_layout Section
Division euclidienne
\series medium

\begin_inset Index idx
status open

\begin_layout Plain Layout
division euclidienne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
euclidienne, division
\end_layout

\end_inset


\series default
 (entière) et modulo
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
modulo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
division entière
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'opérateur de division euclidienne
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
div$}
\end_layout

\end_inset

 ou entière 
\color blue
÷
\color inherit
 divise deux nombres et arrondit au quotient
\begin_inset Index idx
status open

\begin_layout Plain Layout
quotient
\end_layout

\end_inset

, c'est-à-dire au nombre entier inférieur.
 Par exemple, supposons que la durée d'un film soit de 105 minutes.
 Combien de temps en heures cela représente-t-il? La division conventionnelle
 
\color blue
/
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
/
\end_layout

\end_inset


\color inherit
 donne un nombre à virgule flottante: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
obèle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
minutes = 105
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
105
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 minutes / 60
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1.75
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Or, nous n'écrivons normalement pas les heures avec des points décimaux.
 La division entière
\color blue
 ÷
\color inherit
 retourne le quotient:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 heures = minutes
\size default
\color blue
 ÷
\size small
\color inherit
 60
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour obtenir le reste, nous pourrions pratiquer ainsi: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
division décimale
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 reste = minutes - heures * 60
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
45
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une autre solution consiste à utiliser l'opérateur modulo, 
\color blue
%
\color inherit
, qui divise deux nom\SpecialChar softhyphen
bres et retourne le reste.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 reste = minutes %
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size small
%
\end_layout

\end_inset

 60
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
45
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

L'opérateur modulo est plus utile qu'il n'y paraît, par exemple, pour déterminer
 si un nombre est divisible par un autre.
 Si 
\backslash
textcolor{blue}{x 
\backslash
% y} vaut zéro, alors 
\backslash
textcolor{blue}{x} est divisible par 
\backslash
textcolor{blue}{y}.
\end_layout

\begin_layout Plain Layout

L'opérateur modulo est commode pour extraire le ou les chiffres les plus
 à droite d'un nombre.
 Par exemple, en base 10, 
\backslash
textcolor{blue}{x 
\backslash
% 10} donne le chiffre le plus à droite d'un nombre entier 
\backslash
textcolor{blue}{x}.
 De même, 
\backslash
textcolor{blue}{x 
\backslash
% 100} donne les deux derniers chiffres.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Expressions booléennes 
\end_layout

\begin_layout Standard
Une 
\emph on
expression booléenne
\emph default
 est
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression booléenne
\end_layout

\end_inset

 une expression qui est soit vraie, soit fausse.
 Les exemples suivants utilisent l'opérateur 
\color blue
==
\color inherit
, qui compare deux opérandes et retourne 
\color blue
true 
\color inherit
s'ils sont égaux et 
\color blue
false
\color inherit
 sinon
\begin_inset Index idx
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
false
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 5 == 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 5 == 6
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
true
\color inherit
 et 
\color blue
false
\color inherit
 sont des valeurs spéciales qui appartiennent
\begin_inset Index idx
status open

\begin_layout Plain Layout
type Bool
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Bool, type
\end_layout

\end_inset

 au type 
\color blue
Bool
\color inherit
.
 Il ne s'agit en rien de chaînes de caractères: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(
\color green
true
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Bool
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(
\color green
false
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Bool
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
==
\color inherit
 fait partie
\begin_inset Index idx
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset

 des opérateurs relationnels
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur relationnel
\end_layout

\end_inset

 (voir tableau 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Liste-des-opérateurs-relationnels"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Bien que ces opérations soient probablement familières, les symboles de
 Julia sont différents des symboles mathématiques.
 Une erreur courante consiste à utiliser un signe égal simple (
\backslash
textcolor{blue}{=}) 
\backslash
index{=} au lieu d'un signe égal double (
\backslash
textcolor{blue}{==}).
 Il faut garder à l'esprit que 
\backslash
textcolor{blue}{=} est un opérateur d'affectation et que 
\backslash
textcolor{blue}{==} est un opérateur relationnel.
 Il n'existe pas de =<  ou de =>.
 
\end_layout

\begin_layout Plain Layout


\backslash
index{opérateur relationnel}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Liste-des-opérateurs-relationnels"

\end_inset

Liste des opérateurs relationnels.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="25mm">
<column alignment="left" valignment="top" width="65mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Opérateurs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Signification
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x == y
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x est égal à y 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x 
\begin_inset ERT
status open

\begin_layout Plain Layout

{ !=}
\end_layout

\end_inset

 y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

!=}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x n'est pas égal à y 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x ≠ y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
neq$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# (
\backslash
ne TAB) 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal

\backslash
ne
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x > y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$>$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x est plus grand que y 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x < y 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$<$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x est plus petit que y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x >= y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$>=$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x est plus grand ou égal à y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x ≥ y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
geqslant$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# (
\backslash
ge TAB) 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal

\backslash
ge
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x <= y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$<=$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# x est plus petit ou égal à y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
x ≤ y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
leqslant$}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
# (
\backslash
le TAB) 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal

\backslash
le
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Opérateurs logiques
\end_layout

\begin_layout Standard
Il y a trois opérateurs logiques
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur logique
\end_layout

\end_inset

: 
\color blue
&&
\color inherit
 (et), 
\color blue
||
\color inherit
 (ou) et
\color blue
 !
\color inherit
 (non).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
&&
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

!}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
Vert$}
\end_layout

\end_inset

 La signification de ces opérateurs est la même que dans le langage courant.
 Par exemple, 
\color blue
x > 0 && x < 10
\color inherit
 n'est vrai que si 
\color blue
x
\color inherit
 appartient au segment fermé 
\color blue
[1,9]
\color inherit
.
\end_layout

\begin_layout Standard
L'expression 
\color blue
n % 2 == 0 || n % 3 == 0
\color inherit
 est vraie si l'une ou l'autre des conditions (ou les deux) est vraie, c'est-à-d
ire si le nombre est divisible par 2 ou par 3.
\end_layout

\begin_layout Standard
Les deux 
\color blue
&&
\color inherit
 et
\color blue
 ||
\color inherit
 s'associent à droite, mais 
\color blue
&&
\color inherit
 a une priorité plus élevée que 
\color blue
||
\color inherit
.
\end_layout

\begin_layout Standard
Enfin, l'opérateur
\color blue
 !
\color inherit
 annule une expression booléenne, donc 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout

{ !}
\end_layout

\end_inset

(x > y)
\color inherit
 est vrai si 
\color blue
x > y
\color inherit
 est faux, c'est-à-dire si 
\color blue
x
\color inherit
 est inférieur ou égal à 
\color blue
y
\color inherit
.
 
\end_layout

\begin_layout Section
Exécution conditionnelle
\end_layout

\begin_layout Standard
Afin d'écrire des programmes utiles,
\begin_inset Index idx
status open

\begin_layout Plain Layout
exécution conditionnelle
\end_layout

\end_inset

 il est presque toujours nécessaire de pouvoir vérifier les conditions et
 modifier le comportement du programme en conséquence.
 Les déclarations conditionnelles nous offrent cette capacité.
 La forme la plus simple est la déclaration 
\color blue
if
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 x > 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est positif"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression booléenne après 
\color blue
if
\color inherit
 est appelée une 
\emph on
condition
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
if, expression booléenne
\end_layout

\end_inset

 Si elle est vraie, les instructions du bloc indenté sont exécutées.
 Sinon, rien ne se passe.
\end_layout

\begin_layout Standard
Les instructions 
\color blue
if
\color inherit
 ont la même structure que les définitions de fonctions: un en-tête suivi
 d'un corps terminé par le mot-clé 
\color blue
end
\color inherit
.
 Les instructions de ce type sont dites composées.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
instruction composée
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il n'y a pas de limite au nombre d'instructions formant le corps.
 Parfois, il est utile d'avoir un corps sans déclaration (généralement pour
 réserver la place pour un code non-encore écrit).
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 x < 0
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# À FAIRE gérer les valeurs négatives!
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Exécution alternative
\end_layout

\begin_layout Standard
Une deuxième
\begin_inset Index idx
status open

\begin_layout Plain Layout
exécution alternative
\end_layout

\end_inset

 forme de la déclaration
\color blue
 if
\color inherit
 consiste en une « exécution alternative » avec deux possibilités.
 La condition détermine quelle branche de l'alternative doit être exécutée.
 La syntaxe est: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 x % 2 == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est pair"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
else
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est impair"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque 
\color blue
x
\color inherit
 est divisible par 2, le programme affiche 
\color blue
x est pair
\color inherit
.
 Si la condition est fausse, la deuxième série d'instructions est exécutée.
 Comme la condition doit être vraie ou fausse, l'une des branches de l'alternati
ve est toujours exécutée.
\end_layout

\begin_layout Section
Enchaînement de conditions
\end_layout

\begin_layout Standard
Il arrive
\begin_inset Index idx
status open

\begin_layout Plain Layout
enchaînement de conditions
\end_layout

\end_inset

 souvent qu'un programme requière plus de deux branches.
 Une manière de procéder consiste à exploiter les enchaînements de conditions
 avec le mot-clé 
\color blue
elseif
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
elseif
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 x < y
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est inférieur à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
elseif 
\color black
x > y
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est supérieur à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est égal à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À nouveau, seule une branche fonctionnera.
 Il n'y a pas de limite au nombre de déclarations 
\color blue
elseif
\color inherit
.
 S'il y a une clause 
\color blue
else
\color inherit
, elle doit se trouver à la fin, mais n'est pas nécessaire.
\begin_inset Index idx
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 choice ==
\color brown
 "a"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

draw_a
\end_layout

\begin_layout Plain Layout

\size small
\color green
elseif 
\color black
choice ==
\color green
 
\color brown
"b"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

draw_b
\end_layout

\begin_layout Plain Layout

\size small
\color green
elseif 
\color black
choice ==
\color green
 
\color brown
"c"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

draw_c
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Chaque condition est examinée dans l'ordre.
 Si la première est fausse, la suivante est vérifiée et ainsi de suite.
 Si l'une d'entre elles est vraie, la branche correspondante est parcourue
 et la déclaration se termine.
 Même si plus d'une condition est vraie, seule la première branche vraie
 est exécutée.
\end_layout

\begin_layout Section
Imbrication de conditions
\end_layout

\begin_layout Standard
Une condition
\begin_inset Index idx
status open

\begin_layout Plain Layout
imbrication de conditions
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
conditions imbriquées
\end_layout

\end_inset

 peut être imbriquée dans une autre.
 L'exemple de la section précédente peut s'écrire ainsi: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 x == y
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est égal à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if 
\color black
x < y
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est inférieur à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est égal à y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La condition « extérieure
\begin_inset Quotes crd
\end_inset

 contient deux branches.
 La première branche contient une seule instruction.
 La deuxième branche renferme un autre bloc 
\color blue
if
\color inherit
, qui lui-même comprend deux branches.
 Ces deux branches contiennent des instructions simples, bien qu'elles puissent
 également être des instructions conditionnelles à leur tour.
\end_layout

\begin_layout Standard
Même lorsque l'indentation est scrupuleusement observée, les conditions
 imbriquées deviennent très rapidement difficiles à lire.
 Il est bon de les éviter quand c'est possible.
\end_layout

\begin_layout Standard
Les opérateurs logiques permettent souvent de simplifier les déclarations
 conditionnelles imbriquées.
 Par exemple, le code suivant peut être reformulé en utilisant une seule
 condition:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 0 < x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if 
\color black
x < 10
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est un nombre positif"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'instruction d'affichage ne fonctionne que si les deux conditions sont
 passées.
 Le même résultat peut être obtenu avec l'opérateur 
\color blue
&&
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 0 < x && x < 10
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est un nombre positif"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Récursion"

\end_inset

Récursion
\end_layout

\begin_layout Standard
Il est permis 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion
\end_layout

\end_inset

 qu'une fonction en appelle une autre et aussi qu'elle s'appelle elle-même.
 C'est un des aspects les plus 
\begin_inset Quotes cld
\end_inset

magiques
\begin_inset Quotes crd
\end_inset

 de la programmation.
 Considérons, par exemple, la fonction suivante: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
countdown
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 countdown(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n ≤ 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"mise à feu!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(n, 
\color brown
"
\begin_inset space ~
\end_inset

"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

countdown(n-1)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si 
\color blue
n
\color inherit
 vaut 0 ou est négatif, le programme affiche 
\color blue
"mise à feu!"
\color inherit
.
 Sinon, il affiche 
\color blue
n
\color inherit
 suivi d'un espace.
 Ensuite, le programme appelle une fonction appelée 
\color blue
countdown
\color inherit
 (compte à rebours) se passant à elle même 
\color blue
n-1
\color inherit
 comme argument.
\end_layout

\begin_layout Standard
Que se passe-t-il si nous appelons cette fonction comme ceci? 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
countdown(3)
\end_layout

\begin_layout Plain Layout

\color lightgray
3 2 1 "mise à feu!"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'exécution de 
\color blue
countdown
\color inherit
 commence avec
\color blue
 n = 3
\color inherit
 et, comme 
\color blue
n
\color inherit
 est supérieur à 0, le programme passe à l'intérieur du 
\color blue
else
\color inherit
 et affiche la valeur 3 suivie d'un espace.
 L'exécution de la fonction 
\color blue
countdown
\color inherit
 s'appelle elle-même, l'exécution se poursuit avec 
\color blue
n = 2
\color inherit
.
 Puisque 
\color blue
n
\color inherit
 est supérieur à 0, le programme passe à nouveau dans la partie 
\color blue
else
\color inherit
; il affiche la valeur 2 suivie d'un espace.
 Le programme continue avec un autoappel de 
\color blue
countdown
\color inherit
 avec 
\color blue
n = 1
\color inherit
.
 Puisque 
\color blue
n
\color inherit
 est supérieur à 0, le programme passe à nouveau dans la partie 
\color blue
else
\color inherit
; il affiche la valeur 1 suivie d'un espace.
 Le cycle se prolonge avec un auto-appel de 
\color blue
countdown
\color inherit
 qui se poursuit avec 
\color blue
n = 0
\color inherit
.
 Cette fois, comme 
\color blue
n
\color inherit
 n'est pas supérieur à 0, le programme affiche l'expression 
\color blue
"mise à feu!"
\color inherit
.
 
\end_layout

\begin_layout Standard
Une fonction qui s'appelle elle-même est récursive
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction récursive
\end_layout

\end_inset

; le processus qui y est associé se nomme une 
\emph on
récursion
\emph default
.
\end_layout

\begin_layout Standard
Voici un autre exemple d'une fonction qui affiche
\color blue
 n
\color inherit
 fois une chaîne de caractères à l'écran: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printn(s, n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n ≤ 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

printn(s, n-1)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si 
\color blue
n ≤ 0
\color inherit
, la déclaration 
\color blue
return
\color inherit
 permet de quitter la fonction.
 Le flux d'exécution revient immédiatement à l'instruction appelante.
\begin_inset Index idx
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 Donc, le programme s'arrête et les autres lignes de la fonction ne sont
 pas exécutées.
 Par exemple, imaginons la fonction appelante suivante:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
printn(
\color black
"bonjour"
\color inherit
, 2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
bonjour
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
bonjour
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Du fait que
\color blue
 n = 2
\color inherit
, le programme affiche une première fois 
\color blue
bonjour
\color inherit
.
 Puis, il appelle 
\color blue
printn
\color inherit
 avec
\color blue
 n = 1
\color inherit
.
 Cet autoappel correspond à 
\color blue
printn("bonjour", 1)
\color inherit
.
 Le programme affiche une fois encore 
\color blue
bonjour
\color inherit
.
 Puis, il appelle 
\color blue
printn
\color inherit
 avec 
\color blue
n = 0
\color inherit
.
 En rentrant une troisième fois dans la fonction, le programme constate
 que la condition 
\color blue
n ≤ 0
\color inherit
 est remplie: il effectue un 
\color blue
return
\color inherit
.
\end_layout

\begin_layout Standard
Pour des exemples simples comme celui-ci, il est probablement plus facile
 d'utiliser une boucle
\color blue
 for
\color inherit
.
 Cependant, nous verrons plus tard des exemples difficiles à écrire avec
 une boucle 
\color blue
for
\color inherit
 et beaucoup plus faciles à rédiger en invoquant une récursion.
 
\end_layout

\begin_layout Section
Diagrammes de pile pour les fonctions récursives
\end_layout

\begin_layout Standard
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Diagrammes-de-pile"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de pile
\end_layout

\end_inset

 avons utilisé un diagramme de pile pour représenter l'état d'un programme
 lors d'un appel de fonction.
 Le même type de diagramme peut aider à interpréter une fonction récursive.
\end_layout

\begin_layout Standard
Chaque fois qu'une fonction est appelée, Julia crée un cadre pour contenir
 les variables et paramètres locaux de la fonction.
 Pour une fonction récursive, il peut y avoir plus d'un cadre sur la pile
 en même temps.
 La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Diagramme-de-pile-pour-countdown-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre un diagramme de pile pour la fonction 
\color blue
countdown
\color inherit
 (compte à rebours) appelée avec 
\color blue
n = 3
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
countdown
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-pile-countdown-inkscape.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-de-pile-pour-countdown-3"

\end_inset

Diagramme de pile pour 
\color blue
countdown
\color inherit
 appelé avec
\color blue
 n = 3
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comme d'habitude, le haut de la pile est le cadre de 
\color blue
Main
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Main
\end_layout

\end_inset

 Il est vide parce qu'aucune variable n'a été instanciée dans 
\color blue
Main
\color inherit
 et qu'aucun argument ne lui a été passé.
 Les quatre cadres de 
\color blue
countdown
\color inherit
 ont des valeurs différentes pour le paramètre 
\color blue
n
\color inherit
.
 Le bas de la pile, où 
\color blue
n = 0
\color inherit
, est appelé le cas de base.
 Aucun appel récursif n'a lieu pour 
\color blue
n = 0
\color inherit
, il n'y a donc plus de cadres en-dessous.
\end_layout

\begin_layout Subsection*
Exercice 5-1
\end_layout

\begin_layout Standard
En guise d'exercice, dessinez un diagramme de pile pour une fonction
\color blue
 printn
\color inherit
 appelée avec 
\color blue
s = "bonjour"
\color inherit
 et 
\color blue
n = 2
\color inherit
.
 Ensuite, écrivez une fonction appelée 
\color blue
do_n
\color inherit
 qui prend un objet de fonction et un nombre 
\color blue
n
\color inherit
 comme argument, et qui appelle la fonction 
\emph on
\color black
n
\emph default
\color inherit
 fois.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printn
\end_layout

\end_inset


\end_layout

\begin_layout Section
Récursion infinie
\end_layout

\begin_layout Standard
Si une récursion n'atteint jamais le cas de base, elle continue à faire
 des appels récursifs indéfiniment: le programme ne se termine jamais.
 Il s'agit là d'une 
\emph on
récursion infinie
\emph default
, ce qui constitue un mauvais cas de figure.
 Voici un programme minimal avec une récursion infinie: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion infinie
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
recurse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 recurse()
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

recurse()
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans la plupart des environnements de programmation, un programme à récursion
 infinie ne fonctionne pas indéfiniment.
 Julia envoie un message d'erreur lorsque la profondeur de récursion maximale
 est atteinte:
\begin_inset Index idx
status open

\begin_layout Plain Layout
profondeur de récursion
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
recurse()
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 StackOverflowError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color red
Stacktrace
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color red
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[1] recurse() at ./REPL[1]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2 (repeats 80000 times)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La trace d'appels (appelée encore trace de pile ou 
\emph on
stacktrace
\emph default
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
trace d'appel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
trace de pile
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stacktrace
\end_layout

\end_inset

 est un peu plus grande que celle que nous avons vue dans le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Fonctions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Lorsque l'erreur se produit, il y a 80
\begin_inset space ~
\end_inset

000 images récurrentes dans la pile.
\end_layout

\begin_layout Standard
Lorsqu'une récursion infinie est rencontrée accidentellement, la fonction
 incriminée doit être analysée pour confirmer qu'un cas de base ne fait
 pas d'appel récursif.
 Si un cas de base existe, il est nécessaire de vérifier que son accès est
 garanti.
 
\end_layout

\begin_layout Section
Saisie au clavier
\end_layout

\begin_layout Standard
Les programmes que nous avons écrits jusqu'ici n'acceptent aucune entrée
 de la part de l'utilisateur.
 Leur exécution produit toujours le même résultat.
\end_layout

\begin_layout Standard
Julia fournit une fonction interne 
\begin_inset Index idx
status open

\begin_layout Plain Layout
readline()
\end_layout

\end_inset

 appelée 
\color blue
readline
\color inherit
 qui arrête le programme et attend que l'utilisateur saisisse une information.
 Lorsque l'utilisateur presse la touche 
\color black
ENTER
\color inherit
, le programme reprend et 
\color blue
readline
\color inherit
 transmet l'information que l'utilisateur a saisie sous forme de chaîne
 de caractères.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
texte = readline()
\end_layout

\begin_layout Plain Layout

\color lightgray
Qu'attendez-vous?
\end_layout

\begin_layout Plain Layout

\color lightgray
"Qu'attendez-vous?"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Avant d'obtenir la contribution de l'utilisateur, il est conseillé d'afficher
 un message lui indiquant ce qu'il doit saisir: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
print(
\color brown
"Quel est votre prénom? "
\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset

 readline()
\end_layout

\begin_layout Plain Layout

\color lightgray
Quel est votre prénom? Thierry
\end_layout

\begin_layout Plain Layout

\color lightgray
"Thierry"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un point-virgule
\color blue

\begin_inset space ~
\end_inset

;
\begin_inset space ~
\end_inset


\color inherit
permet de placer plusieurs déclarations sur la même ligne
\begin_inset Index idx
status open

\begin_layout Plain Layout
;
\end_layout

\end_inset

.
 Dans le REPL, seul le dernier énoncé retourne sa valeur.
\end_layout

\begin_layout Standard
S'il est attendu de l'utilisateur qu'il saisisse un entier, il convient
 de convertir la valeur transmise en 
\color blue
Int64
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
print("
\color brown
Quelle est la célérité du son dans l'air au niveau de la mer (m/s)?
\color inherit
")
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset

 c = readline()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Quelle est la célérité du son dans l'air
\size default
 au niveau de la mer (m/s)? 340
\end_layout

\begin_layout Plain Layout

\color lightgray
"340"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
parse(Int64, c)
\end_layout

\begin_layout Plain Layout

\color lightgray
340
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Toutefois
\begin_inset Index idx
status open

\begin_layout Plain Layout
parse
\end_layout

\end_inset

, si l'utilisateur saisit autre chose qu'une suite de chiffres, une erreur
 apparaît à la conversion: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
print(
\color brown
"Quelle est la célérité du son dans l'air au niveau de la mer (m/s)?"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout

)
\backslash
string;
\end_layout

\end_inset

 c = readline()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Quelle est la célérité du son dans l'air
\size default
 au niveau de la mer (m/s)? Que signifie célérité?
\end_layout

\begin_layout Plain Layout

\color lightgray
"Que signifie célérité?"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
parse(Int64, c)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ArgumentError invalid base 10 digit 'C' in " Célérité
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string?
\end_layout

\end_inset

 " 
\end_layout

\begin_layout Plain Layout

\size small
\color red
[...]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ultérieurement, nous verrons comment gérer ce genre d'erreur.
 
\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Lorsqu'une
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset

 erreur de syntaxe ou d'exécution se produit, le message d'erreur contient
 beaucoup d'informations, mais il peut être surchargé.
 Les parties les plus utiles sont généralement:
\end_layout

\begin_layout Itemize
quel type d'erreur s'est-il produit?
\end_layout

\begin_layout Itemize
à quel endroit du programme l'erreur s'est-il produite?
\end_layout

\begin_layout Standard
Les erreurs de syntaxe sont généralement faciles à trouver, mais quelques
 astuces existent.
 En général, les messages d'erreur indiquent l'endroit où le problème a
 été découvert, mais l'erreur réelle peut se situer en amont dans le code,
 parfois sur la ligne précédente.
\end_layout

\begin_layout Standard
Il en va de même pour les erreurs d'exécution.
 Supposons que nous tentions de calculer un rapport signal/bruit en décibels
 (Signal-to-Noise Ratio, SNR).
 La formule est la suivante:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
SNR_{\mathrm{dB}}=10\log10\left(\frac{P_{signal}}{P_{bruit}}\right)
\]

\end_inset

où 
\begin_inset Formula $P$
\end_inset

 représente l'amplitude.
 En Julia, il est possible d'écrire ce code: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
log10()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
signal_power = 9
\end_layout

\begin_layout Plain Layout

\size small
noise_power = 10
\end_layout

\begin_layout Plain Layout

\size small
ratio = signal_power ÷ noise_power
\end_layout

\begin_layout Plain Layout

\size small
decibels = 10 * log10(ratio)
\end_layout

\begin_layout Plain Layout

\size small
print(decibels)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, Julia retourne: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Inf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
-Inf
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce n'est pas le résultat attendu.
 Pour trouver l'erreur, il pourrait être utile d'afficher la valeur de 
\color blue
ratio
\color inherit
, qui s'avère valoir 
\color blue
0
\color inherit
.
 Le problème se situe à la ligne 3, qui utilise la division 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
div$}
\end_layout

\end_inset

euclidienne 
\color blue
÷
\color inherit
 au lieu de la division décimale (
\color black
/
\color inherit
).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
division décimale
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Il est nécessaire de prendre le temps de lire attentivement les messages
 d'erreur, bien qu'ils ne soient pas  forcément explicites.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
division
\begin_inset space ~
\end_inset

euclidienne opération, notée 
\color blue
÷
\color inherit
, qui divise deux nombres et les arrondit au nombre entier inférieur (à
 la différence de la division décimale, qui retourne un quotient à virgule
 flottante), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
division euclidienne
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérateur
\begin_inset space ~
\end_inset

modulo opérateur, désigné par le signe pourcentage (
\color blue
%
\color inherit
), qui fonctionne sur des nombres entiers et retourne le reste lorsqu'un
 nombre est divisé par un autre, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
modulo
\end_layout

\end_inset


\end_layout

\begin_layout Description
expression
\begin_inset space ~
\end_inset

booléenne expression dont la valeur est soit vraie (
\color blue
true
\color inherit
), soit fausse (
\color blue
false
\color inherit
), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression booléenne
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérateur
\begin_inset space ~
\end_inset

relationnel un des opérateurs qui compare deux opérandes: 
\color blue
==
\color inherit
, 
\color blue
≠
\color inherit
 (
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout

{!=}
\end_layout

\end_inset


\color inherit
),
\color blue
 >
\color inherit
,
\color blue
 <
\color inherit
, 
\color blue
≥
\color inherit
 (
\color blue
>=
\color inherit
) et 
\color blue
≤
\color inherit
 (
\color blue
<=
\color inherit
), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur relationnel
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérateur
\begin_inset space ~
\end_inset

logique un des opérateurs qui combine les expressions booléennes: 
\color blue
&&
\color inherit
 (et), 
\color blue
|| 
\color inherit
(ou) et 
\color blue
!
\color inherit
 (non), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur logique
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration
\begin_inset space ~
\end_inset

conditionnelle déclaration qui contrôle le flux d'exécution en fonction
 de certaines conditions, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration conditionnelle
\end_layout

\end_inset


\end_layout

\begin_layout Description
condition expression booléenne dans une déclaration conditionnelle qui détermine
 quelle branche emprunter, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition
\end_layout

\end_inset


\end_layout

\begin_layout Description
instruction
\begin_inset space ~
\end_inset

composée instruction complexe qui se compose d'un en-tête et d'un corps.
 Le corps est terminé par le mot-clé 
\color blue
end
\color inherit
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
instruction composée
\end_layout

\end_inset


\end_layout

\begin_layout Description
branche une des options d'instructions dans une déclaration conditionnelle,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
branche
\end_layout

\end_inset


\end_layout

\begin_layout Description
chaîne
\begin_inset space ~
\end_inset

conditionnelle déclaration conditionnelle avec une série de branches alternative
s, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne conditionnelle
\end_layout

\end_inset


\end_layout

\begin_layout Description
imbrication
\begin_inset space ~
\end_inset

conditionnelle déclaration conditionnelle qui apparaît dans une des branches
 d'une autre déclaration conditionnelle, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
imbrication conditionnelle
\end_layout

\end_inset


\end_layout

\begin_layout Description
instruction
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

retour instruction qui fait qu'une fonction s'arrête immédiatement et revient
 à l'appelant, 
\end_layout

\begin_layout Description
récursion processus d'autoappel d'une fonction en cours d'exécution, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion
\end_layout

\end_inset


\end_layout

\begin_layout Description
cas
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

base branche conditionnelle dans une fonction récursive qui n'effectue pas
 d'appel récursif, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cas de base
\end_layout

\end_inset


\end_layout

\begin_layout Description
récursion
\begin_inset space ~
\end_inset

infinie récursion qui n'a pas de cas de base ou qui ne l'atteint jamais.
 Finalement, une récursion infinie provoque une erreur d'exécution.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion infinie
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 5-2
\end_layout

\begin_layout Standard
La fonction 
\color blue
time
\color inherit
 retourne le temps actualisé, au méridien de Greenwich en secondes depuis
 une date de référence arbitraire qui, sur les systèmes 
\noun on
Unix
\noun default
, est le 1
\begin_inset script superscript

\begin_layout Plain Layout
er
\end_layout

\end_inset

 janvier 1970.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
time()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 time()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1.602969109299345e9
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Écrivez un script qui lit l'heure actuelle puis la convertit en jours, heures,
 minutes et secondes depuis la date de référence.
\end_layout

\begin_layout Subsection*
Exercice 5-3
\end_layout

\begin_layout Standard
Selon le dernier théorème de Fermat
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fermat, théorème de
\end_layout

\end_inset

, il n'existe pas d'entiers positifs 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

 et 
\begin_inset Formula $c$
\end_inset

 tel que pour toute valeur de 
\begin_inset Formula $n$
\end_inset

 > 2:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
a^{n}+b^{n}=c^{n}
\]

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
checkfermat
\color inherit
 qui prend quatre paramètres (
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

 et 
\begin_inset Formula $n$
\end_inset

) et qui vérifie si le théorème de Fermat est valide.
 Si 
\color blue
n
\color inherit
 est supérieur à 2 et que 
\color blue
a^n + b^n == c^n
\color inherit
, le programme doit afficher 
\begin_inset Quotes cld
\end_inset

Diantre, Fermat avait tort!
\begin_inset Quotes crd
\end_inset

.
 Sinon, le programme doit afficher 
\begin_inset Quotes cld
\end_inset

Non, ça ne fonctionne pas...
\begin_inset Quotes crd
\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
checkfermat
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction qui invite l'utilisateur à entrer des valeurs pour
 
\color blue
a
\color inherit
, 
\color blue
b
\color inherit
, 
\color blue
c
\color inherit
 et 
\color blue
n
\color inherit
, les convertit en nombres entiers et utilise 
\color blue
checkfermat
\color inherit
 pour vérifier s'ils violent le théorème de Fermat.
 
\end_layout

\begin_layout Subsection*
Exercice 5-4
\end_layout

\begin_layout Standard
Avec trois bâtonnets, vous pouvez éventuellement construire un triangle.
 Par exemple, si l'un des bâtonnets mesure 12 cm de long et les deux autres
 1 cm de long, vous ne pourrez pas faire se rencontrer les bâtonnets courts.
 Pour trois longueurs quelconques, il existe un test simple permettant de
 déterminer s'il est possible de former un triangle:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Si une des trois longueurs est supérieure à la somme des deux autres, un
 triangle sera impossible à former.
 Par ailleurs, si la somme de deux longueurs est égale à la troisième, nous
 obtenons un triangle dégénéré.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
istriangle
\color inherit
 qui prend trois entiers comme arguments et qui imprime soit "Oui" soit
 "Non", selon que vous pouvez ou non former un triangle à partir de bâtonnets
 ayant les longueurs entrées.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
istriangle
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction qui invite l'utilisateur à entrer trois longueurs de
 bâtonnets, les convertit en nombres entiers et utilise 
\color blue
istriangle
\color inherit
 pour vérifier si les bâtonnets ayant les longueurs données peuvent former
 un triangle.
\end_layout

\begin_layout Subsection*
Exercice 5-5
\end_layout

\begin_layout Standard
Quel est le résultat du programme suivant? Dessinez un diagramme de pile
 qui montre l'état du programme lorsqu'il affiche le résultat.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
recurse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
recurse(n, s)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if 
\color black
n == 0
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
println(s)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
recurse(n-1, n+s)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\color black
recurse(3, 0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Que se passerait-il si l'appel de fonction devenait: 
\color blue
recurse(-1, 0)
\color inherit
?
\end_layout

\begin_layout Standard
Écrivez une chaîne de caractères qui explique tout ce que quelqu'un doit
 savoir pour utiliser cette fonction (et rien d'autre).
\end_layout

\begin_layout Standard
Les exercices suivants utilisent le module ThinkJulia (ou ThinkJuliaFR),
 décrit dans le chapitre
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Subsection*
Exercice 5-5
\end_layout

\begin_layout Standard
Lisez la fonction suivante.
 Pouvez-vous déterminer ce qu'elle effectue (voir les exemples dans le chapitre
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

)? Ensuite, exécutez-la pour voir si vous avez bien compris.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
draw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 draw(t, length, n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

angle = 50
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, length*n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

draw(t, length, n-1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, 2*angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

draw(t, length, n-1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(t, -angle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(t, -length*n)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Fonctions-avec-retour"

\end_inset

Fonctions avec retour
\end_layout

\begin_layout Standard
De nombreuses fonctions de Julia
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction avec retour
\end_layout

\end_inset

, telles que les fonctions mathématiques (dont nous avons vu un échantillon),
 produisent des valeurs de retour.
 Cependant, toutes les fonctions que nous avons écrites sont vides (ou nulles):
 elles ont un effet comme l'affichage d'une valeur ou le déplacement d'une
 tortue, mais elles ne retournent rien.
 Ce chapitre aborde les fonctions avec retour.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction vide
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction nulle
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
void function
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Valeurs-retournées"

\end_inset

Valeurs retournées
\end_layout

\begin_layout Standard
Dans ce cas, l'appel d'une fonction retourne une valeur que nous attribuons
 généralement à une variable ou que nous utilisons dans le cadre d'une expressio
n.
 Par exemple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
exp()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
sin()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
e
\color inherit
 = exp
\color black
(1.0)
\end_layout

\begin_layout Plain Layout

\size small
\color black
height = radius * sin(radians)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le premier exemple d'une fonction avec retour est 
\color blue
area
\color inherit
, qui retourne l'aire d'un cercle de rayon donné: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
area
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 area(radius)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = 
\color green
π
\color inherit
 * radius^2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 a
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous avons déjà vu la déclaration
\begin_inset Index idx
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 
\color blue
return
\color inherit
.
 Cependant, dans une fonction avec retour, l'instruction 
\color blue
return
\color inherit
 comprend une expression.
 Cette instruction signifie littéralement: 
\begin_inset Quotes cld
\end_inset

Quitter immédiatement la fonction et utiliser l'expression qui suit 
\color blue
return
\color inherit
 comme valeur de retour
\begin_inset Quotes crd
\end_inset

.
 L'expression peut être plus ou moins compliquée.
 Ainsi, la fonction 
\color blue
area
\color inherit
 aurait pu être plus concise:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 area(radius)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
π
\color inherit
 * radius^2
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En effet, la valeur retournée par une fonction est la valeur de la dernière
 expression évaluée qui, par défaut, est la dernière expression figurant
 dans le corps de la définition de la fonction.
 
\end_layout

\begin_layout Standard
Cependant, des variables temporaires comme 
\color blue
a
\color inherit
 (deuxième cadre de cette section) et des déclarations de retour explicites
 facilitent grandement le débogage.
 Il est parfois même utile d'avoir plusieurs déclarations de retour, une
 dans chaque branche conditionnelle: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
absvalue
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 absvalue(x)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x < 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 -x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme ces instructions 
\color blue
return
\color inherit
 sont dans un branche conditionnelle alternative, une seule des options
 est empruntée.
 Dès qu'une déclaration 
\color blue
return
\color inherit
 est exécutée, la fonction se termine sans exécuter d'instructions ultérieures.
 Le code qui apparaît après une instruction 
\color blue
return 
\color inherit
ou après toute autre partie que le flux d'exécution ne peut jamais atteindre
 est appelé un 
\emph on
code mort
\emph default
.
\end_layout

\begin_layout Standard
Dans une fonction avec retour, il est bon de s'assurer que tous les chemins
 possibles du programme aboutissent à une instruction 
\color blue
return
\color inherit
.
 Par exemple:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 absvalue(x)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x < 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 -x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x > 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fonction est incorrecte, car, si 
\color blue
x
\color inherit
 vaut 0, aucune des deux conditions n'est avérée, si bien que la fonction
 se termine sans atteindre une instruction 
\color blue
return
\color inherit
.
 Si le flux d'exécution arrive ainsi à la fin d'une fonction, la valeur
 retournée est 
\color blue
nothing
\color inherit
, ce qui ne correspond pas à la valeur absolue de 0.
 Ceci est vérifiable: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nothing
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
absvalue
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> show
\color inherit
(absvalue(0))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
nothing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Julia fournit une fonction interne 
\backslash
textcolor{blue}{abs} qui calcule les valeurs absolues.
 
\backslash
index{abs()}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Exercice 6-1
\end_layout

\begin_layout Standard
Écrivez une fonction 
\color blue
compare
\color inherit
 qui prend deux valeurs, 
\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
, et retourne 
\color blue
1
\color inherit
 si 
\color blue
x > y
\color inherit
, 
\color blue
0
\color inherit
 si 
\color blue
x == y
\color inherit
, et 
\color blue
-1
\color inherit
 si 
\color blue
x < y
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
compare
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Développement-progressif"

\end_inset

Développement progressif
\end_layout

\begin_layout Standard
À mesure
\begin_inset Index idx
status open

\begin_layout Plain Layout
developpement@développement progressif
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
developpement@développement incrémental
\end_layout

\end_inset

 que les fonctions deviennent de plus en plus volumineuses, le temps de
 débogage s'allonge.
 Pour faire face à des programmes de plus en plus complexes, il est astucieux
 de tirer parti d'un procédé appelé 
\emph on
développement progressif
\emph default
 ou
\emph on
 incrémental
\emph default
.
 L'objectif est d'éviter de longues sessions de débogage en ajoutant et
 en testant individuellement un code de petite taille.
\end_layout

\begin_layout Standard
Par exemple, supposons que vous vouliez trouver la distance entre deux points,
 donnée par les coordonnées 
\begin_inset Formula $(x_{1},y_{1})$
\end_inset

 et 
\begin_inset Formula $(x_{2},y_{2})$
\end_inset

.
 Selon le théorème de Pythagore
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pythagore, théorème de
\end_layout

\end_inset

, la distance est donnée par: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
d=\sqrt{(x_{2}-x_{1}){}^{2}+(y_{2}-y_{1})^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
La première étape consiste à examiner à quoi devrait ressembler une fonction
 
\color blue
distance
\color inherit
 en Julia.
 En d'autres termes, quelles sont les entrées (paramètres) et quelle est
 la sortie (valeur de retour)? 
\begin_inset Index ind
status open

\begin_layout Plain Layout
distance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, les entrées sont deux points, que vous pouvez représenter à
 l'aide de quatre nombres.
 La valeur de retour est la distance représentée par une valeur en virgule
 flottante.
\end_layout

\begin_layout Standard
Dans l'immédiat, écrivons un aperçu de la fonction: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
distance(x₁, x₂, y₁, y₂)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Évidemment, cette version ne calcule pas les distances; elle retourne toujours
 zéro.
 Cependant, elle est syntaxiquement correcte.
 Elle fonctionne, ce qui signifie que vous pouvez la tester avant de la
 complexifier.
 Les numéros d'indice sont disponibles dans le codage des caractères Unicode
 (
\color blue

\backslash
_1 TAB
\color inherit
, 
\color blue

\backslash
_2 TAB
\color inherit
, etc.).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
_1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour tester la nouvelle fonction, appelons-la avec des exemples d'arguments:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
distance(1, 2, 4, 6)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ces valeurs ont été choisies pour que la distance horizontale soit 3 et
 la distance verticale 4.
 De cette façon, le résultat est 5: c'est-à-dire l'hypoténuse d'un triangle
 3-4-5.
 Lorsqu'on teste une fonction, il est utile de connaître la bonne réponse.
\end_layout

\begin_layout Standard
À ce stade, il est acquis que la fonction est syntaxiquement correcte.
 Dès lors, du code peut être ajouté dans le corps.
 La prochaine étape raisonnable consiste à trouver les différences 
\begin_inset Formula $(x_{2}-x_{1})$
\end_inset

 et 
\begin_inset Formula $(y_{2}-y_{1})$
\end_inset

.
 La version suivante enregistre ces valeurs dans des variables temporaires
 et les affiche avec la macro 
\color blue
@show
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@show}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
distance(x₁, x₂, y₁, y₂)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dx = 
\color black
x₂
\color inherit
 - 
\color black
x₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dy =
\color black
 y₂
\color inherit
 -
\color black
 y₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@show
\color inherit
 dx
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dy
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour un appel 
\color blue
distance(1, 2, 4, 6)
\color inherit
, la fonction doit afficher 
\color blue
dx = 3
\color inherit
 et 
\color blue
dy = 4
\color inherit
.
 Si c'est le cas, cela signifie que la fonction reçoit les bons arguments
 et effectue correctement le premier calcul (sinon, il n'y a que quelques
 lignes à vérifier).
 
\end_layout

\begin_layout Standard
Ensuite, la somme des carrés de 
\color blue
dx
\color inherit
 et 
\color blue
dy
\color inherit
 peut être incorporée:
\begin_inset Index ind
status open

\begin_layout Plain Layout
distance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
distance(x₁, y₁, x₂, y₂)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dx = 
\color black
x₂
\color inherit
 - 
\color black
x₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dy = 
\color black
y₂
\color inherit
 -
\color black
 y₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d² = dx^2 + dy^2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@show
\color inherit
 d²
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Là encore, il convient de lancer le programme à ce stade et de vérifier
 le résultat (d² = 25).
 Les puissances sont également disponibles (
\color blue

\backslash
^2 TAB
\color inherit
).
 Enfin, la fonction 
\color blue
sqrt
\color inherit
 est introduite afin de calculer et de retourner le résultat: 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
sqrt()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
distance(x₁, y₁, x₂, y₂)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dx = 
\color black
x₂
\color inherit
 - 
\color black
x₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

dy = 
\color black
y₂
\color inherit
 -
\color black
 y₁
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d² = dx^2 + dy^2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sqrt(d²)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si tout fonctionne correctement, nous en avons terminé.
 Sinon, il sera nécessaire d'afficher la valeur de 
\color blue
sqrt(d²)
\color inherit
 avant 
\color blue
end
\color inherit
 à l'aide de 
\color magenta
@show
\color inherit
.
 
\end_layout

\begin_layout Standard
La version finale de la fonction n'affiche rien lorsqu'elle est exécutée.
 Elle ne fait que retourner une valeur.
 Les instructions d'affichage que nous avons écrites sont utiles pour le
 débogage, mais, une fois la fonction opérationnelle, il convient de les
 supprimer.
 Un tel code est appelé 
\begin_inset Quotes cld
\end_inset

canevas
\begin_inset Index idx
status open

\begin_layout Plain Layout
canevas
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 (ou 
\emph on
scaffolding
\emph default
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
scaffolding
\end_layout

\end_inset

 parce qu'il est utile pour construire le programme tout en n'apparaissant
 pas dans le produit final.
\end_layout

\begin_layout Standard
Au début, il est judicieux de n'ajouter qu'une ou deux lignes de code à
 la fois.
 Avec une expérience s'affinant progressivement, il devient possible d'écrire
 et de déboguer des parties un peu plus longues.
 Quoi qu'il en soit, le développement incrémental permet de gagner beaucoup
 de temps de débogage.
\end_layout

\begin_layout Standard
Les principaux aspects du processus sont les suivants:
\end_layout

\begin_layout Enumerate
commencer par un programme opérationnel et apporter de petites modifications
 progressives.
 À tout moment, s'il y a une erreur, il est essentiel d'avoir une bonne
 idée de l'endroit où elle se trouve,
\end_layout

\begin_layout Enumerate
utiliser des variables pour maintenir des valeurs intermédiaires afin de
 pouvoir les afficher et les vérifier,
\end_layout

\begin_layout Enumerate
une fois que le programme complété fonctionne, supprimer une partie du canevas
 ou consolider plusieurs instructions en expressions composées (voir la
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Composition"
plural "false"
caps "false"
noprefix "false"

\end_inset

), mais à la condition que cela ne rende pas le programme difficile à lire.
 
\end_layout

\begin_layout Subsection*
Exercice 6-2
\end_layout

\begin_layout Standard
Utilisez le développement incrémental pour écrire une fonction appelée 
\color blue
hypotenuse
\color inherit
 qui retourne la longueur de l'hypoténuse d'un triangle rectangle en fonction
 de la longueur des deux autres côtés comme arguments.
 Enregistrez chaque étape du processus de développement au fur et à mesure.
\begin_inset Index ind
status open

\begin_layout Plain Layout
hypotenuse
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Composition"

\end_inset

Composition
\end_layout

\begin_layout Standard
Bien entendu, une fonction peut être appelée depuis une autre.
\begin_inset Index idx
status open

\begin_layout Plain Layout
composition
\end_layout

\end_inset

 Par exemple, nous allons écrire une fonction qui prend deux points, le
 centre d'un cercle et un point sur la circonférence.
 Ceci nous permet de calculer le rayon et, partant, la surface de ce cercle.
\end_layout

\begin_layout Standard
Supposons que les coordonnées du centre soient enregistrées dans les variables
 
\begin_inset Formula $x_{c}$
\end_inset

 et 
\begin_inset Formula $y_{c}$
\end_inset

 et que les coordonnées du point de la circonférence le soient dans 
\begin_inset Formula $x_{p}$
\end_inset

 et 
\begin_inset Formula $y_{p}$
\end_inset

.
 La première étape consiste à trouver le rayon du cercle.
 Dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Développement-progressif"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons écrit une fonction 
\color blue
distance
\color inherit
.
 En transposant pour le rayon:
\begin_inset Index ind
status open

\begin_layout Plain Layout
distance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
radius = distance(xc, yc, xp, yp)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'étape suivante consiste à trouver l'aire d'un cercle de ce rayon (ce que
 nous avons aussi écrit dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Valeurs-retournées"
plural "false"
caps "false"
noprefix "false"

\end_inset

), ce qui fait que nous pouvons appeler cette fonction:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
result
\color black
 = area(radius)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Par encapsulation, nous obtenons: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
circlearea
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
circlearea(xc, yc, xp, yp)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

radius = 
\color black
distance(xc, yc, xp, yp)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result
\color black
 = area(radius)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les variables temporaires
\color blue
 radius
\color inherit
 et 
\color blue
result
\color inherit
 sont utiles pour le développement et le débogage.
 Lorsque qu'il est opérationnel, le programme peut être rédigé de manière
 plus concise en composant les appels de fonction: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
circlearea(xc, yc, xp, yp)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
area(distance(xc, yc, xp, yp))
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Fonctions-booléennes"

\end_inset

Fonctions booléennes
\end_layout

\begin_layout Standard
Les fonctions peuvent renvoyer des booléens
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction booléenne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
false
\end_layout

\end_inset

, ce qui est souvent pratique pour cacher des tests complexes à l'intérieur
 de celles-ci.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
isdivisible
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
isdivisible(x, y)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x % y == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return true
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il est courant de donner aux fonctions booléennes des noms qui ressemblent
 à des questions dichotomiques
\begin_inset Foot
status open

\begin_layout Plain Layout
Questions qui reposent sur une division binaire.
\end_layout

\end_inset

.
 La fonction 
\color blue
isdivisible
\color inherit
 retourne soit 
\color blue
true
\color inherit
, soit 
\color blue
false
\color inherit
 pour indiquer si 
\color blue
x
\color inherit
 est divisible, ou non, par
\color blue
 y
\color inherit
.
\end_layout

\begin_layout Standard
Voici deux exemples: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
isdivisible(6, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
isdivisible(6, 4)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat de l'opérateur 
\color blue
==
\color inherit
 étant un booléen, la fonction peut être reformulée de manière plus concise:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
isdivisible(x, y)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x % y == 0
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les fonctions booléennes sont souvent utilisées dans les déclarations conditionn
elles:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if 
\color black
isdivisible(x, y)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est divisible par y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il pourrait être tentant d'écrire quelque chose comme ceci:
\begin_inset Index ind
status open

\begin_layout Plain Layout
isdivisible
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if 
\color black
isdivisible(x, y) == 
\color green
true
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"x est divisible par y"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, la comparaison supplémentaire avec 
\color blue
true
\color inherit
 est inutile.
\end_layout

\begin_layout Subsection*
Exercice 6-3
\end_layout

\begin_layout Standard
Écrivez une fonction
\color blue
 isbetween(x, y, z)
\color inherit
 qui retourne 
\color blue
true
\color inherit
 si 
\color blue
x ≤ y ≤ z
\color inherit
 ou 
\color blue
false
\color inherit
 dans le cas contraire.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
isbetween
\end_layout

\end_inset


\end_layout

\begin_layout Section
Davantage de récursion
\end_layout

\begin_layout Standard
Nous n'avons couvert qu'un petit sous-ensemble de Julia.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion
\end_layout

\end_inset

 Cependant, Julia est un langage de programmation complet, ce qui signifie
 que tout ce qui est calculable peut être exprimé dans ce langage.
 Tout programme écrit à ce jour pourrait être retranscrit en utilisant uniquemen
t les caractéristiques de Julia telles que présentées jusqu'à présent.
 En principe, il n'y a plus que quelques commandes à apprendre pour contrôler
 des périphériques comme la souris, les disques, etc.
\end_layout

\begin_layout Standard
Prouver cette affirmation est un exercice complexe réalisé pour la première
 fois par 
\begin_inset CommandInset href
LatexCommand href
name "Alan Turing"
target "https://fr.wikipedia.org/wiki/Alan_Turing"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Turing, Alan M.
\end_layout

\end_inset

, un des pionniers de l'informatique
\begin_inset Foot
status open

\begin_layout Plain Layout
Depuis 1966, un 
\begin_inset CommandInset href
LatexCommand href
name "prix Turing "
target "https://fr.wikipedia.org/wiki/Prix_Turing"
literal "false"

\end_inset

est annuellement décerné à une personne sélectionnée pour sa contribution
 de nature technique vis-à-vis de la communauté informatique.
 Les contributions doivent être d’une importance technique majeure et durable
 dans le domaine informatique.
\end_layout

\end_inset

 et mathématicien à l'origine.
 C'est
\begin_inset Index idx
status open

\begin_layout Plain Layout
Turing, thèse de
\end_layout

\end_inset

 pourquoi elle est connue sous le nom de thèse de Turing
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:Pour-une-discussion"

\end_inset

Pour une discussion plus complète et plus précise de la thèse de Turing,
 consultez le livre de Michael Sipser, 
\begin_inset CommandInset href
LatexCommand href
name "Introduction to the Theory of Computation"
target "https://www.mog.dog/files/SP2019/Sipser_Introduction.to.the.Theory.of.Computation.3E.pdf"
literal "false"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "key-7"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sipser, Michael
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Pour se persuader de ce qui est réalisable avec les outils étudiés jusqu'à
 présent, nous allons évaluer quelques fonctions mathématiques définies
 de manière récursive.
 Une définition récursive est analogue à une définition circulaire, dans
 le sens où la définition contient une référence à ce qui y est défini (ou
 à son exact contraire).
 Une définition vraiment circulaire n'est pas très utile
\begin_inset Foot
status open

\begin_layout Plain Layout
Les truismes, les tautologies, les lapalissades sont de cet ordre.
 
\end_layout

\end_inset

.
 Dans le dictionnaire anglais, voyons la définition de:
\end_layout

\begin_layout Description
vorpal an adjective used to describe something that is vorpal
\begin_inset Index idx
status open

\begin_layout Plain Layout
vorpal
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Carroll, Lewis
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Ce mot a été inventé par Lewis Carroll dans le poème Jabberwocky
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jabberwocky
\end_layout

\end_inset

 et semble désigner le tranchant d'une épée.
 Voir la traduction française de ce poème 
\begin_inset CommandInset href
LatexCommand href
name "sous ce lien"
target "https://angellier-biblio.univ-lille3.fr/ressources/jabberwockytraduction.html"
literal "false"

\end_inset

.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Nous pourrions imaginer en français:
\end_layout

\begin_layout Description
gauche inverse de la droite 
\end_layout

\begin_layout Description
droite inverse de la gauche
\begin_inset Index idx
status open

\begin_layout Plain Layout
gauche 
\begin_inset Formula $\leftrightarrow$
\end_inset

 droite 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
De telles définitions rendent perplexe.
 En revanche, si on cherche la définition de la fonction factorielle
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction factorielle
\end_layout

\end_inset

, désignée par le symbole 
\color black
!
\color inherit
, on obtiendra probablement ceci:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
n!=\begin{cases}
1 & \mathit{si}\,\,n=0\\
n(n-1)! & \mathit{si}\,\,n>0
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Cette définition établit que la factorielle de 
\begin_inset Formula $0$
\end_inset

 est 
\begin_inset Formula $1$
\end_inset

 et que la factorielle
\begin_inset Index idx
status open

\begin_layout Plain Layout
factorielle
\end_layout

\end_inset

 de toute autre valeur 
\emph on

\begin_inset Formula $n$
\end_inset


\emph default
 s'exprime comme 
\emph on

\begin_inset Formula $n$
\end_inset


\emph default
 multiplié par la factorielle de 
\emph on

\begin_inset Formula $n-1$
\end_inset


\emph default
.
 Donc 
\begin_inset ERT
status open

\begin_layout Plain Layout

3
\backslash
string!
\end_layout

\end_inset

 est 3 fois 
\begin_inset ERT
status open

\begin_layout Plain Layout

2
\backslash
string!
\end_layout

\end_inset

 avec 
\begin_inset ERT
status open

\begin_layout Plain Layout

2
\backslash
string!
\end_layout

\end_inset

, qui est 2 fois 
\begin_inset ERT
status open

\begin_layout Plain Layout

1
\backslash
string!
\end_layout

\end_inset

 avec 
\begin_inset ERT
status open

\begin_layout Plain Layout

1
\backslash
string!
\end_layout

\end_inset

, qui est 1 fois 
\begin_inset ERT
status open

\begin_layout Plain Layout

0
\backslash
string!
\end_layout

\end_inset

.
 En combinant le tout, 
\begin_inset ERT
status open

\begin_layout Plain Layout

3
\backslash
string!
\end_layout

\end_inset

 est égal à 3 * 2 * 1 * 1, ce qui fait 6.
\end_layout

\begin_layout Standard
Si un programmeur peut rédiger une définition récursive, il peut développer
 un programme Julia pour l'évaluer.
 La première étape consiste à décider des paramètres.
 Dans ce cas, il doit être clair que la fonction factorielle prend un entier:
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
fact
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
fact(n)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
S'il advenait que l'argument vaille 0, la fonction devrait retourner 1:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
fact(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Sinon — et c'est la partie intéressante —, nous devons faire un appel récursif
 pour trouver la factorielle de 
\color blue
n-1
\color inherit
 et ensuite la multiplier par 
\color blue
n
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
fact(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

recurse = fact(n-1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = n * recurse
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 result
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le flux d'exécution de ce programme est similaire au flux de 
\color blue
countdown
\color inherit
 vu dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Récursion"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Si nous appelons 
\color blue
fact
\color inherit
 avec 
\color blue
n = 3
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
fact
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Vu que 3 n'est pas égal à 0, nous prenons la deuxième branche et calculons
 la factorielle de 
\color blue
n-1
\color inherit
…
\end_layout

\begin_deeper
\begin_layout Itemize
Puisque 2 n'est pas égal à 0, nous prenons la deuxième branche et calculons
 la factorielle de 
\color blue
n-1
\color inherit
…
\end_layout

\begin_deeper
\begin_layout Itemize
Puisque 1 n'est pas égal à 0, nous prenons la deuxième branche et calculons
 la factorielle de 
\color blue
n-1
\color inherit
…
\end_layout

\begin_deeper
\begin_layout Itemize
Puisque nous arrivons au cas 0, nous prenons la première branche et nous
 retournons 1 sans faire d'appels récursifs supplémentaires.
\end_layout

\end_deeper
\begin_layout Itemize
La valeur de retour, 1, est multipliée par 
\color blue
n
\color inherit
, qui est 1, et le résultat est retourné.
\end_layout

\end_deeper
\begin_layout Itemize
La valeur de retour, 1, est multipliée par 
\color blue
n
\color inherit
, qui vaut 2, et le résultat est retourné.
\end_layout

\end_deeper
\begin_layout Itemize
La valeur de retour 2 est multipliée par 
\color blue
n
\color inherit
 (qui vaut 3) et le résultat, c'est-à-dire 6, devient la valeur de retour
 de l'appel de fonction qui a lancé l'ensemble du processus.
 
\end_layout

\begin_layout Standard
Le diagramme de pile
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de pile
\end_layout

\end_inset

 (figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrame-de-pile-fonction-fact(n)"
plural "false"
caps "false"
noprefix "false"

\end_inset

) illustre cette séquence d'appels de fonction.
 Les valeurs de retour sont indiquées en remontant dans la pile.
 Dans chaque cadre, la valeur de retour est celle de 
\color blue
result
\color inherit
, qui est le produit de
\color blue
 n
\color inherit
 et de 
\color blue
recurse
\color inherit
.
 Dans le dernier cadre, les variables locales 
\color blue
recurse
\color inherit
 et 
\color blue
result
\color inherit
 n'existent pas, car la branche qui les crée n'est pas exécutée.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-pile-factoriel-inkscape.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrame-de-pile-fonction-fact(n)"

\end_inset

Diagramme de pile associé à la fonction 
\color blue
fact(n)
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Julia fournit une fonction interne 
\backslash
textcolor{blue}{factorial} qui calcule la factorielle d'un entier.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Un acte de confiance
\end_layout

\begin_layout Standard
Suivre le déroulement de l'exécution est une manière de lire les programmes,
 bien que cela puisse s'avérer ardu.
 Souvent, nous agissons en confiance.
 Ainsi, lorsque nous arrivons à un appel de fonction, au lieu de suivre
 le flux d'exécution, nous supposons que la fonction se comporte correctement
 et retourne le bon résultat.
\end_layout

\begin_layout Standard
En fait, ceci est déjà vrai, par exemple, lorsque des fonctions internes
 sont utilisées.
 Lorsque
\color blue
 cos()
\color inherit
 ou 
\color blue
exp()
\color inherit
 sont appelées, leur utilisateur n'examine pas le corps de ces fonctions.
 Il suppose assez naturellement qu'elles sont opérationnelles, parce que
 les personnes qui les ont écrites sont de bons programmeurs.
\end_layout

\begin_layout Standard
Il en va de même lorsque nous appelons une de nos propres fonctions.
 Par exemple, dans les fonctions booléennes (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Fonctions-booléennes"
plural "false"
caps "false"
noprefix "false"

\end_inset

), nous avons écrit 
\color blue
isdivisible
\color inherit
 qui détermine si un nombre est divisible par un autre.
 Une fois que nous nous sommes convaincus que cette fonction est correcte
 — en examinant le code et en faisant des tests —, nous pouvons utiliser
 la fonction sans devoir analyser à nouveau le corps.
\begin_inset Index ind
status open

\begin_layout Plain Layout
isdivisible
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il en va de même pour les programmes récursifs.
 Arrivé à un appel récursif, au lieu de suivre le déroulement de l'exécution,
 il est supposé que l'appel récursif fonctionne (c'est-à-dire qu'il retourne
 le résultat correct).
 Ensuite, survient la question: 
\begin_inset Quotes cld
\end_inset

En supposant que je puisse trouver la factorielle de 
\begin_inset Formula $n-1$
\end_inset

, puis-je calculer la factorielle de 
\begin_inset Formula $n$
\end_inset

?
\begin_inset Quotes crd
\end_inset

.
 Il est clair que cela peut se faire en multipliant par 
\color blue
n
\color inherit
.
\end_layout

\begin_layout Standard
Il est un peu étrange d'accepter que la fonction se comporte correctement
 alors même qu'on n'a pas fini de l'écrire.
 C'est pour cela que l'expression 
\begin_inset Quotes cld
\end_inset

acte de confiance
\begin_inset Quotes crd
\end_inset

 peut être invoquée.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Un-exemple-supplémentaire"

\end_inset

Un exemple supplémentaire
\end_layout

\begin_layout Standard
Après la factorielle, l'exemple le plus courant d'une fonction mathématique
 définie de manière récursive est la 
\begin_inset CommandInset href
LatexCommand href
name "suite de Fibonacci"
target "https://fr.wikipedia.org/wiki/Suite_de_Fibonacci"
literal "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fibonacci, suite de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
fib(n)=\begin{cases}
0 & if\,n=0\\
1 & if\,n=1\\
fib(n-1)+fib(n-2) & if\,n>1
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Voici un programme Julia représentant cette suite:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
fib(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
elseif 
\color black
n == 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 fib(n-1) + fib(n-2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Suivre le déroulement de l'exécution, même pour des valeurs assez faibles
 de 
\color blue
n
\color inherit
, conduit rapidement à la saturation.
 Néanmoins, selon le principe de l'acte de confiance, il suffit de constater
 que deux appels récursifs fonctionnent correctement, pour admettre que
 le bon résultat est obtenu par addition.
\end_layout

\begin_layout Section
Types et vérification
\end_layout

\begin_layout Standard
Que se passe-t-il si 
\color blue
fact
\color inherit
 est appelée avec 1.5 comme argument? 
\begin_inset Index ind
status open

\begin_layout Plain Layout
fact
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 fact(1.5)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarErro
\begin_inset ERT
status open

\begin_layout Plain Layout

r
\backslash
string:
\end_layout

\end_inset

 fact not defined
\end_layout

\begin_layout Plain Layout

\size small
\color red
Stacktrace
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color red
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[1] fact(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:F
\end_layout

\end_inset

loat64) at ./REPL[3
\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string:
\end_layout

\end_inset

2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela ressemble à une récursion infinie.
 Au premier abord, c'est surprenant, car la fonction possède un cas de base
 lorsque 
\color blue
n == 0
\color inherit
.
 Cependant, si 
\color blue
n
\color inherit
 n'est pas un entier, le cas de base peut ne pas être atteint.
 En conséquence, la récursion opère à l'infini.
\end_layout

\begin_layout Standard
Dans le premier appel récursif, la valeur de 
\color blue
n
\color inherit
 est 
\color blue
0.5
\color inherit
.
 Dans le suivant, elle est 
\color blue
-0.5
\color inherit
.
 À partir de là, cette valeur devient inférieure à 0 sans jamais passer
 par 0.
\end_layout

\begin_layout Standard
Pour résorber ce problème, nous avons deux options: (i) soit essayer de
 généraliser la fonction factorielle pour travailler avec des nombres à
 virgule flottante, (ii) soit faire vérifier le type de son argument à la
 fonction
\color blue
 fact
\color inherit
.
 La première option recourt à la 
\begin_inset CommandInset href
LatexCommand href
name "fonction gamma"
target "https://fr.wikipedia.org/wiki/Fonction_gamma"
literal "false"

\end_inset

, mais cela dépasse le cadre de ce livre.
 La seconde option est à notre portée.
\end_layout

\begin_layout Standard
L'opérateur interne 
\color blue
isa
\color inherit
 permet de vérifier le type de l'argument.
 Par ailleurs, pourquoi ne pas s'assurer que l'argument est positif?
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
fact(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(n isa 
\color brown
Int64
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

error(
\color brown
"La factorielle est seulement définie pour les entiers."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
elseif 
\color black
n < 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

error(
\color brown
"La factorielle n'est pas définie pour les entiers négatifs."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
elseif 
\color black
n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 n * fact(n-1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le premier cas de base traite des non-entiers, le second des entiers négatifs.
 Dans les deux cas, le programme affiche un message d'erreur et ne retourne
 rien pour indiquer que quelque chose s'est mal passé:
\begin_inset Index ind
status open

\begin_layout Plain Layout
fact
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 fact(
\color brown
"Knuth"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color red
"La factorielle est seulement définie pour les entiers."
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 fact(-2)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 La factoriel n'est pas définie pour les entiers négatifs.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si les deux contrôles sont correctement franchis, cela signifie que 
\color blue
n
\color inherit
 est positif ou nul.
 En conséquence, la preuve est faite que la récursion prend fin.
\end_layout

\begin_layout Standard
Ce programme démontre un schéma parfois appelé 
\begin_inset Quotes cld
\end_inset

sentinelle
\begin_inset Quotes crd
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
sentinelle
\end_layout

\end_inset

 Les deux premières conditions agissent comme des sentinelles, protégeant
 le code qui suit des valeurs qui pourraient causer une erreur.
 Les sentinelles permettent de prouver l'exactitude du code.
\end_layout

\begin_layout Standard
Dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Levée-des-exceptions"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous verrons une option plus souple à l'affichage d'un message d'erreur:
 la levée d'une exception.
\begin_inset Index idx
status open

\begin_layout Plain Layout
levée d'exception
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
exception, levée
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Débogage-Chap-7"

\end_inset

Débogage
\end_layout

\begin_layout Standard
La subdivision
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset

 d'un programme de grande taille en petites fonctions crée des points de
 contrôle naturels pour le débogage.
 Si une fonction n'opère pas correctement, trois possibilités sont à envisager:
\end_layout

\begin_layout Enumerate
un problème avec les arguments que la fonction reçoit: une condition
\emph on
 a priori
\emph default
 est violée, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition 
\emph on
a priori
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
un problème avec la fonction elle-même: une condition 
\emph on
a posteriori
\emph default
 est violée, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
condition 
\emph on
a posteriori
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
un problème avec la valeur de retour ou la façon dont elle est utilisée.
\end_layout

\begin_layout Standard
Pour écarter la première possibilité, il convient d'ajouter une instruction
 d'affichage au début de la fonction et d'y indiquer les valeurs des paramètres
 (et peut-être leur type).
 Une option consiste à écrire un code qui vérifie explicitement les conditions
 préalables.
\end_layout

\begin_layout Standard
Si les paramètres semblent bons, il convient d'ajouter une instruction d'afficha
ge avant chaque instruction de retour et afficher la valeur de retour.
 Lorsque c'est possible, il est conseillé de vérifier le résultat à la main.
 Exécuter des appels de la fonction avec des valeurs qui facilitent la vérificat
ion du résultat aide beaucoup au débogage (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Développement-progressif"
plural "false"
caps "false"
noprefix "false"

\end_inset

 qui traite du développement incrémental).
\end_layout

\begin_layout Standard
Si la fonction semble opérationnelle, l'appel de la fonction doit être examiné
 pour s'assurer que la valeur de retour est utilisée correctement.
\end_layout

\begin_layout Standard
L'ajout d'instructions d'affichage au début et à la fin d'une fonction peut
 contribuer à rendre le flux d'exécution plus compréhensible.
 Par exemple, voici une version de
\color blue
 fact 
\color inherit
avec des instructions d'affichage:
\begin_inset Index ind
status open

\begin_layout Plain Layout
fact
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 fact(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

space = "
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

" ^ (4 * n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
println
\color inherit
(space, 
\color brown
"factorial "
\color inherit
, n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
println
\color inherit
(space, 
\color brown
"returning 1"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

recurse = fact(n-1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = n * recurse
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
println
\color inherit
(space, 
\color brown
"returning "
\color inherit
, result)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return 
\color inherit
result
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
space
\color inherit
 est une chaîne de caractères d'espacement qui contrôle l'indentation de
 la sortie:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fact(4)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

factorial 4
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

factorial 3
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

factorial 2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray
factorial 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
factorial 0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
returning 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

returning 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

returning 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

returning 6
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

returning 24
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
24
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce type de résultat peut être utile quand l'exécution d'un programme se
 passe de manière déroutante.
 Mettre au point un canevas efficace prend du temps, mais cette technique
 en épargnera beaucoup lors du débogage.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
variable
\begin_inset space ~
\end_inset

temporaire variable utilisée pour stocker une valeur intermédiaire dans
 un calcul complexe, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable temporaire
\end_layout

\end_inset


\end_layout

\begin_layout Description
code
\begin_inset space ~
\end_inset

mort partie d'un programme qui ne peut jamais fonctionner, souvent parce
 qu'il apparaît après une instruction de retour, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
code mort
\end_layout

\end_inset


\end_layout

\begin_layout Description
développement
\begin_inset space ~
\end_inset

progressif
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset

incrémental) plan de développement de program\SpecialChar softhyphen
mes destiné à limiter le débogage
 en ajoutant et en testant seulement de petits blocs d'instructions, un
 à un, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
developpement@développement progressif
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
developpement@développement incrémental
\end_layout

\end_inset


\end_layout

\begin_layout Description
canevas
\begin_inset space ~
\end_inset

(
\emph on
scaffolding
\emph default
) code utilisé pendant le développement du programme mais qui ne fait pas
 partie de la version finale, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
canevas
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
scaffolding
\end_layout

\end_inset


\end_layout

\begin_layout Description
sentinelle modèle de programmation qui utilise une déclaration conditionnelle
 pour vérifier et gérer les circonstances susceptible de causer une erreur.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sentinelle
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 6-4
\end_layout

\begin_layout Standard
Dessinez un diagramme de pile pour le programme suivant.
 Qu'affiche le programme?
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 b(z)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

prod = a(z, z)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
println
\color inherit
(z, 
\color brown
" "
\color inherit
, prod)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

prod
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color lightgray
 
\color black
a(x, y)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x = x + 1
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x * y
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 c(x, y, z)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total = x + y + z
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

square = b(total)^2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

square
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
x = 1
\end_layout

\begin_layout Plain Layout

\size small
y = x + 1
\end_layout

\begin_layout Plain Layout

\size small
println(c(x, y+3, x+y))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-7-11-2-Ackermann1"

\end_inset

Exercice 6-5
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset href
LatexCommand href
name "fonction d'Ackermann"
target "https://fr.wikipedia.org/wiki/Fonction_d%27Ackermann"
literal "false"

\end_inset

, 
\begin_inset Formula $A(m,n)$
\end_inset

, est définie comme:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A(m,n)=\begin{cases}
n+1 & \mathit{si}\,\,m=0\\
A(m-1,\,1) & \mathit{si}\,\,m>0\,\,\mathit{et}\,\,n=0\\
A(m−1,\,A(m,\,n−1)) & \mathit{si}\,\,m>0\,\,\mathit{et}\,\,n>0.
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Rédigez une fonction appelée 
\color blue
ack
\color inherit
 qui évalue la fonction d'Ackermann
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ackermann, fonction d'
\end_layout

\end_inset

.
 Utilisez votre fonction pour évaluer 
\color blue
ack(3, 4)
\color inherit
.
 Le résultat devrait être 125.
 Que se passe-t-il pour les valeurs plus grandes de 
\color blue
m
\color inherit
 et 
\color blue
n
\color inherit
? 
\begin_inset Index ind
status open

\begin_layout Plain Layout
ack
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-ispalindrome"

\end_inset

Exercice 6-6
\end_layout

\begin_layout Standard
Un palindrome
\begin_inset Index idx
status open

\begin_layout Plain Layout
palindrome
\end_layout

\end_inset

 est un mot qui s'écrit de la même façon à l'envers et à l'endroit, comme
 
\begin_inset Quotes cld
\end_inset

ada
\begin_inset Quotes crd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Un langage de programmation (voir 
\begin_inset CommandInset href
LatexCommand href
name "Wikipédia"
target "https://fr.wikipedia.org/wiki/Ada_(langage)"
literal "false"

\end_inset

).
\end_layout

\end_inset

, 
\begin_inset Quotes cld
\end_inset

kayak
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

ressasser
\begin_inset Quotes crd
\end_inset

.
 Récursivement, un mot est un palindrome si la première et la dernière lettre
 sont identiques et si le milieu est un palindrome.
\end_layout

\begin_layout Standard
Voici des fonctions qui prennent un argument de chaîne de caractères et
 retournent la première, la dernière et le milieu des lettres: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
first
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
last
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
middle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 first(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

first = 
\color green
firstindex
\color inherit
(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

word[first]
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color lightgray
 
\color black
last(word)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

last = 
\color green
lastindex
\color black
(word)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

word[last]
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 middle(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

first =
\color green
 firstindex
\color inherit
(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
last = 
\color green
lastindex
\color black
(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

word[nextind(word, first) : prevind(word, last)]
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous verrons comment cela fonctionne dans le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Chaînes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Enumerate
Testez ces fonctions.
 Que se passe-t-il si vous appelez le milieu avec une chaîne de deux lettres?
 Une lettre? Qu'en est-il de la chaîne vide, qui s'écrit 
\color blue
"
\begin_inset space ~
\end_inset

"
\color inherit
 et ne contient pas de lettres?
\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
ispalindrome
\color inherit
 qui prend un argument sous la forme d'une chaîne de caractères et soit
 retourne 
\color blue
true
\color inherit
 si c'est un palindrome, soit 
\color blue
false
\color inherit
 dans le cas contraire.
 N'oubliez pas que vous pouvez utiliser la fonction intégrée 
\color blue
length
\color inherit
 pour vérifier la longueur d'une chaîne de caractères.
\begin_inset Index ind
status open

\begin_layout Plain Layout
ispalindrome
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 6-7
\end_layout

\begin_layout Standard
Un nombre 
\color blue
a 
\color inherit
est une puissance de
\color blue
 b
\color inherit
 si, d'une part, il est divisible par
\color blue
 b
\color inherit
 et si, de l'autre, 
\color blue
a / b
\color inherit
 est une puissance de 
\color blue
b
\color inherit
.
 Écrivez une fonction appelée
\color blue
 ispuissance
\color inherit
 qui prend les paramètres 
\color blue
a 
\color inherit
et 
\color blue
b
\color inherit
 et qui retourne 
\color blue
true
\color inherit
 si 
\color blue
a 
\color inherit
est une puissance de 
\color blue
b
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
ispuissance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Rappelez-vous les caractéristiques d'un cas de base.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 6-8
\end_layout

\begin_layout Standard
Le plus grand commun diviseur (PGCD) de deux entiers 
\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 est le plus grand nombre qui divise les deux entiers avec un reste nul.
\end_layout

\begin_layout Standard
Il existe une manière simple de trouver le PGCD
\begin_inset Index idx
status open

\begin_layout Plain Layout
PGCD
\end_layout

\end_inset

 de deux nombres: si 
\color blue
r
\color inherit
 est le reste de la division 
\color blue
a
\color inherit
 / 
\color blue
b
\color inherit
, alors 
\color blue
PGCD(a, b) = PGCD(b, r)
\color inherit
.
 Comme cas de base, nous pouvons utiliser 
\color blue
PGCD(a, 0) = a
\color inherit
.
\end_layout

\begin_layout Standard
Écrivez une fonction appelée
\color blue
 pgcd
\color inherit
 qui prend les paramètres 
\color blue
a
\color inherit
 et 
\color blue
b 
\color inherit
et retourne leur plus grand diviseur commun.
\begin_inset Index ind
status open

\begin_layout Plain Layout
pgcd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Itération"

\end_inset

Itération
\end_layout

\begin_layout Standard
Ce chapitre traite de l'itération
\begin_inset Index idx
status open

\begin_layout Plain Layout
itération
\end_layout

\end_inset

, c'est-à-dire de la capacité à exécuter un bloc d'instructions de manière
 répétée.
 Une sorte d'itération a déjà été rencontrée lors de l'utilisation de la
 récursion (
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Conditions-et-récursion"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Une autre l'a été avec les boucles, dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Répétitions-simples"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Dans le présent chapitre, nous utilisons l'instruction 
\color blue
while
\color inherit
 qui constitue un autre type d'itération.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Auparavant, il est utile de revenir sur l'affectation des variables.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Réaffectation"

\end_inset

Réaffectation
\end_layout

\begin_layout Standard
Comme le lecteur l'a certainement observé, il est permis de faire plus d'une
 affectation à la même variable.
 Une nouvelle affectation fait en sorte qu'une variable existante se réfère
 à une nouvelle valeur et, en conséquence, cesse de se référer à l'ancienne
 valeur.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reaffectation@réaffectation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
x = 7
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
7
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première fois que nous affichons 
\color blue
x
\color inherit
, sa valeur est de 
\color blue
5
\color inherit
; la deuxième fois, sa valeur est de
\color blue
 7
\color inherit
.
 La réaffectation peut se représenter dans un diagramme d'état comme suit:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Figures/reaffectation.svg
	scale 40

\end_inset


\end_layout

\begin_layout Standard
À ce stade, il est temps d'aborder une source commune de confusion.
 Du fait que Julia utilise le signe égal 
\color blue
=
\color inherit
 pour l'affectation, il est tentant d'interpréter une déclaration telle
 que 
\color blue
a = b
\color inherit
 comme une proposition mathématique d'égalité, c'est-à-dire l'affirmation
 que 
\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 sont égaux.

\emph on
 Cette interprétation est erronée
\emph default
.
\end_layout

\begin_layout Standard
Premièrement, l'égalité est une relation symétrique.
 L'affectation ne l'est pas.
 Par exemple, en mathématiques, si 
\color blue
a = 7
\color inherit
, il est permis d'écrire 
\color blue
7 = a
\color inherit
.
 Dans Julia, l'énoncé 
\color blue
a = 7
\color inherit
 est licite; 
\color blue
7 = a
\color inherit
 ne l'est pas.
\end_layout

\begin_layout Standard
En outre, en mathématiques, une proposition d'égalité est soit vraie soit
 fausse 
\emph on
ad vitam
\emph default
.
 Si 
\color blue
a = b
\color inherit
 maintenant, alors 
\color blue
a
\color inherit
 sera toujours égal à 
\color blue
b
\color inherit
.
 Dans Julia, une déclaration d'affectation peut rendre deux variables égales,
 mais elles ne doivent pas nécessairement le rester éternellement.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a = 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
b = a
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# a et b pointent vers la même valeur 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a = 3
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# a ne pointe plus vers 5, mais vers 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\size default
\color inherit
 
\size small
b
\size default

\begin_inset space ~
\end_inset


\size small

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# b pointe toujours vers 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La troisième ligne modifie la valeur de 
\color blue
a
\color inherit
, mais ne change pas la valeur de 
\color blue
b
\color inherit
, de sorte qu'elles ne sont plus égales.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

La réaffectation des variables est souvent utile, mais il faut l'utiliser
 avec prudence.
 Si les valeurs des variables changent fréquemment, cela peut rendre le
 code difficile à lire et à déboguer.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Il n'est pas permis de définir une fonction qui porte le même nom qu'une
 variable définie précédemment.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mise à jour des variables
\end_layout

\begin_layout Standard
Il est courant de réaffecter une variable via la mise à jour de son ancienne
 valeur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = x + 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela signifie 
\begin_inset Quotes cld
\end_inset

obtenir la valeur actuelle de 
\color blue
x
\color inherit
 (à savoir 7), y ajouter 1 et ensuite affecter 8 à 
\color blue
x
\color inherit

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Lors d'une tentative de mise à jour d'une variable non déclarée, Julia retourne
 une erreur:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = y + 1
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 y not defined
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Avant de pouvoir mettre à jour une variable, il est impératif de l'initialiser,
 généralement grâce à une simple affectation:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = 0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = y +1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\color blue
while
\end_layout

\begin_layout Standard
Les ordinateurs sont souvent utilisés pour automatiser les tâches répétitives.
 Répéter des tâches identiques ou similaires sans faire d'erreur constitue
 un point fort des ordinateurs, contrairement aux humains.
 Dans un programme informatique, la répétition est également appelée 
\emph on
itération.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
while
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nous avons déjà vu deux fonctions, 
\color blue
countdown
\color inherit
 et 
\color blue
printn
\color inherit
, qui utilisent la récursion
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion
\end_layout

\end_inset

 (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Récursion"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Comme l'itération est très courante, Julia propose des fonctions pour la
 rendre plus facile d'utilisation.
 L'une d'entre elles est la déclaration
\color blue
 for
\color inherit
 que nous avons vue dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Répétitions-simples"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Nous y reviendrons ultérieurement.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color blue
while
\color inherit
 constitue une autre déclaration.
 Voici une version de 
\color blue
countdown
\color inherit
 exploitant la déclaration 
\color blue
while
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
countdown
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 countdown(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 n > 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(n, 
\color brown
" "
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = n - 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"mise à feu!"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette déclaration 
\color blue
while
\color inherit
 peut quasiment être lue comme si elle était formulée en langage naturel:
 
\begin_inset Quotes cld
\end_inset

Si n est supérieur à 0, affichez la valeur de 
\color blue
n
\color inherit
, puis décrémentez 
\color blue
n
\color inherit
.
 Lorsque vous arrivez à 0, affichez l'expression
\color black
 
\color blue
"mise à feu!"
\color black

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
De manière un peu plus formelle, voici le déroulement de l'instruction 
\color blue
while
\color inherit
:
\end_layout

\begin_layout Enumerate
déterminer si la condition est vraie ou fausse,
\end_layout

\begin_layout Enumerate
si elle est fausse, quitter la déclaration 
\color blue
while
\color inherit
 et continuer l'exécution à l'instruction suivante,
\end_layout

\begin_layout Enumerate
si la condition est vraie, exécuter le corps et revenir ensuite à l'étape
 1.
\end_layout

\begin_layout Standard
Ce type de flux est appelé une boucle, car la troisième étape revient en
 boucle vers le haut.
 Il est fondamental que le corps de la boucle modifie la valeur d'une ou
 plusieurs variables, de sorte que la condition devienne fausse à terme
 et que la boucle se termine.
 Sinon,
\begin_inset Index idx
status open

\begin_layout Plain Layout
boucle infinie
\end_layout

\end_inset

 celle-ci se répète indéfiniment (
\emph on
boucle infinie
\emph default
).
\begin_inset Foot
status open

\begin_layout Plain Layout
Une source d'amusement pour les informaticiens provient des instructions
 sur les bouteilles de shampoing: 
\begin_inset Quotes cld
\end_inset

Faire mousser, rincer, répéter
\begin_inset Quotes crd
\end_inset

, ce qui constitue une boucle infinie.
\begin_inset CommandInset label
LatexCommand label
name "fn:Une-source-d'amusement"

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Dans le cas de 
\color blue
countdown
\color inherit
, on peut prouver que la boucle se termine: si 
\color blue
n
\color inherit
 est nul ou négatif, la boucle ne se répète jamais.
 Sinon,
\color blue
 n
\color inherit
 est décrémenté à chaque passage dans la boucle, de sorte que 
\color blue
n
\color inherit
 finit par valoir 0.
 Pour certaines autres boucles, ce n'est pas si facile à identifier.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
seq
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 seq(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 n 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

= 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n % 2 == 0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# n est pair
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = n /2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\color inherit

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# n est impair
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = n*3 + 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La condition pour cette boucle est 
\color blue
n != 1
\color inherit
, donc la boucle continue jusqu'à ce que 
\color blue
n
\color inherit
 vaille 
\color blue
1
\color inherit
 (ce qui rend la condition fausse).
 À chaque fois que la boucle se poursuit, le programme fournit la valeur
 de
\color blue
 n
\color inherit
 et vérifie ensuite si elle est paire ou impaire.
 S'il est pair, 
\color blue
n
\color inherit
 est divisé par 
\color blue
2
\color inherit
 tandis que, s'il est impair, la valeur de 
\color blue
n
\color inherit
 est remplacée par 
\color blue
n*3 + 1
\color inherit
.
 Par exemple, si l'argument passé à la séquence vaut 
\color blue
3
\color inherit
, les valeurs résultantes de 
\color blue
n
\color inherit
 sont 
\color black
3
\color inherit
, 10, 5, 16, 8, 4, 2, 1.
\end_layout

\begin_layout Standard
Comme 
\color blue
n
\color inherit
 augmente parfois et qu'il diminue parfois, il n'y a pas de preuve évidente
 que 
\color blue
n
\color inherit
 atteindra 1 ou que le programme se termine.
 Pour certaines valeurs particulières de 
\color blue
n
\color inherit
, nous pouvons prouver la fin du programme.
 Par exemple, si la valeur de départ est une puissance de deux, 
\color blue
n
\color inherit
 sera pair à chaque passage dans la boucle jusqu'à ce qu'il atteigne 
\color blue
1
\color inherit
.
 L'exemple précédent se termine par une telle séquence, en commençant par
 
\color blue
16
\color inherit
.
\end_layout

\begin_layout Standard
La question véritablement difficile est de savoir s'il peut être prouvé
 que ce programme se termine pour toutes les valeurs positives de
\color blue
 n
\color inherit
.
 Jusqu'à présent, personne n'a été capable ni de prouver ni de réfuter cet
 énoncé.
 Il s'agit de la 
\begin_inset CommandInset href
LatexCommand href
name "conjecture de Collatz"
target "https://en.wikipedia.org/wiki/Collatz_conjecture"
literal "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Collatz, conjecture de
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 7-1
\end_layout

\begin_layout Standard
Réécrivez la fonction 
\color blue
printn
\color inherit
 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Récursion"
plural "false"
caps "false"
noprefix "false"

\end_inset

) en tirant parti de l'itération plutôt que de la récursion.
\begin_inset Index ind
status open

\begin_layout Plain Layout
printn
\end_layout

\end_inset


\end_layout

\begin_layout Section

\color blue
break
\end_layout

\begin_layout Standard
Parfois,
\begin_inset Index idx
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 on ne sait pas qu'il est temps de terminer une boucle avant d'avoir parcouru
 la moitié du corps.
 Dans ce cas, l'
\emph on
instruction 
\emph default
\color blue
break
\color inherit
 peut être utilisée pour sortir de la boucle.
 Supposons, par exemple, qu'il faille capter les données d'un utilisateur
 jusqu'à ce que celui-ci saisisse 
\begin_inset Quotes cld
\end_inset

done
\begin_inset Quotes crd
\end_inset

.
 Voici un exemple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
readline()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
while true
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(
\color brown
">
\begin_inset space ~
\end_inset

"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

line = readline()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 line == 
\color brown
"done"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
break
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(line)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
println(
\color brown
"Done!"
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La boucle conditionnelle est toujours vraie.
 Donc, la boucle se déroule jusqu'à ce qu'elle atteigne l'instruction 
\color blue
break
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\begin_layout Standard
À chaque passage, la boucle présente une invite 
\color blue
>
\color inherit
 à l'utilisateur.
 Si l'utilisateur saisit le terme 
\color blue
done
\color inherit
, l'instruction 
\color blue
break
\color inherit
 force la sortie de la boucle.
 Sinon, le programme retourne la saisie de l'utilisateur et, ensuite, il
 revient au début de la boucle.
 Voici un exemple d'exécution:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
> not done
\end_layout

\begin_layout Plain Layout

\size small
\color black
not done
\end_layout

\begin_layout Plain Layout

\size small
\color black
> done
\end_layout

\begin_layout Plain Layout

\size small
\color black
Done!
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette manière d'écrire des boucles 
\color blue
while
\color inherit
 est courante, car on peut vérifier la condition n'importe où dans la boucle
 (pas seulement en haut) et la condition d'arrêt peut être exprimée affirmativem
ent (
\begin_inset Quotes cld
\end_inset

arrêtez quand cela se produit
\begin_inset Quotes crd
\end_inset

) plutôt que négativement (
\begin_inset Quotes cld
\end_inset

continuez tant que cela ne se produit pas
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Section

\color blue
continue
\end_layout

\begin_layout Standard
L'instruction 
\color blue
break
\color inherit
 force la sortie d'une boucle.
 Lorsque l'instruction 
\color blue
continue
\color inherit
 est rencontrée à l'intérieur d'une boucle, l'exécution saute au début de
 la boucle afin d'entamer l'itération suivante.
 Donc, l'exécution des instructions à l'intérieur du corps de la boucle
 est contournée.
 Par exemple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
continue
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for 
\color black
i
\color green
 in 
\color black
1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 i % 3 == 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
continue
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(i, 
\color brown
"
\begin_inset space ~
\end_inset

"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia retourne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
1 2 4 5 7 8 10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si 
\color blue
i
\color inherit
 est divisible par 3, l'instruction 
\color blue
continue
\color inherit
 arrête l'itération en cours et l'itération suivante commence.
 Seuls les nombres compris entre 1 et 10 non divisibles par 3 sont affichés.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Racines-carrées"

\end_inset

Racines carrées
\end_layout

\begin_layout Standard
Les boucles sont souvent utilisées dans les programmes qui traitent des
 résultats numériques en commençant par une réponse approximative et en
 l'améliorant de manière itérative pour converger vers la solution.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
racine carrée
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple, la méthode de Newton
\begin_inset Index idx
status open

\begin_layout Plain Layout
Newton, méthode de
\end_layout

\end_inset

 permet de calculer les racines carrées.
 Supposons que nous souhaitons connaître la racine carrée d'un nombre 
\begin_inset Formula $\alpha$
\end_inset

.
 En commençant avec presque n'importe quelle estimation 
\color blue
x
\color inherit
, il est possible calculer une meilleure estimation avec la formule suivante:
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=\frac{1}{2}\left(x+\frac{\alpha}{x}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $\alpha$
\end_inset

 = 4 et 
\color blue
x
\color inherit
 = 3 (
\begin_inset Formula $\alpha$
\end_inset

 s'obtient par 
\color blue

\backslash
alpha TAB
\color inherit
 et ainsi de suite pour tout l'alphabet grec): 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
alpha
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
alpha$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia> 
\color black
α = 4
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 x =3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.1666666666666665
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Par rapport à la valeur initiale introduite (
\color blue
x = 3
\color inherit
), le résultat s'approche davantage de 
\begin_inset Formula $\sqrt{4}=2$
\end_inset

.
 Après une répétition, le calcul converge vers la solution: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia> 
\color black
x = y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.1666666666666665
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0064102564102564
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Après quelques itérations manuelles, l'estimation devient presque exacte:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia> 
\color black
x = y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0064102564102564
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0000102400262145
\end_layout

\begin_layout Plain Layout

\color green
julia> 
\color black
x = y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0000102400262145
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\color lightgray
2.0000000000262146
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En général, le nombre d'itérations nécessaires pour obtenir la bonne réponse
 est 
\emph on
a priori
\emph default
 inconnu.
 En revanche, lorsque la valeur de l'estimation ne change plus, le calcul
 peut être arrêté:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia> 
\color black
x = y
\end_layout

\begin_layout Plain Layout

\color lightgray
2.0000000000262146
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0
\end_layout

\begin_layout Plain Layout

\color green
julia> 
\color black
x = y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2.0
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout

\color lightgray
2.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
C'est le cas quand 
\color blue
y == x
\color inherit
.
 Voici une boucle qui commence avec une estimation initiale, 
\color blue
x
\color inherit
, et qui améliore celle-ci jusqu'à ce que le résultat cesse de changer:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
while true
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(x)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y = (x + 
\color black
α
\color inherit
/x) / 2
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 y == x
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
break
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x = y
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour la plupart des valeurs, ce code fonctionne bien.
 Cependant, en général, il est dangereux de tester l'égalité de nombres
 à virgules flottantes.
 Les valeurs à virgule flottante ne sont qu'approximativement correctes:
 la plupart des nombres rationnels,
\begin_inset Index idx
status open

\begin_layout Plain Layout
nombre rationnel
\end_layout

\end_inset

 comme 
\begin_inset Formula $\frac{1}{3}$
\end_inset

, et les nombres irrationnels,
\begin_inset Index idx
status open

\begin_layout Plain Layout
nombre irationnel
\end_layout

\end_inset

 comme 
\begin_inset Formula $\sqrt{2}$
\end_inset

, ne peuvent pas être représentés exactement par un 
\color blue
Float64
\color inherit
.
\end_layout

\begin_layout Standard
Plutôt que de vérifier si 
\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
 sont rigoureusement égaux, il est plus sûr d'utiliser la fonction interne
 
\color blue
abs
\color inherit
 pour calculer la valeur absolue de leur différence: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
abs()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
if
\color inherit
 abs(x - y) < ε
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
break
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce code, ε (
\color blue

\backslash
varepsilon TAB
\color inherit
) a une valeur telle que 0,000
\begin_inset space ~
\end_inset

000
\begin_inset space ~
\end_inset

1 qui détermine la proximité au résultat réel.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
varepsilon
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
varepsilon$}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Algorithmes
\end_layout

\begin_layout Standard
La méthode de Newton est un exemple d'
\emph on
algorithme
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
algorithme
\end_layout

\end_inset

 Il s'agit d'un processus mécanique pour résoudre une catégorie de problèmes
 (dans ce cas, le calcul de racines carrées).
\end_layout

\begin_layout Standard
Pour comprendre ce qu'est un algorithme, il peut être utile de commencer
 par un procédé qui ne relève pas d'un algorithme.
 Pour apprendre la multiplication des nombres à un chiffre, il est nécessaire
 de mémoriser les tables de multiplication avec 100 solutions spécifiques.
 Ce type de connaissance n'est pas algorithmique.
\end_layout

\begin_layout Standard
Toutefois, un individu 
\begin_inset Quotes cld
\end_inset

paresseux
\begin_inset Quotes crd
\end_inset

 aurait peut-être appris quelques astuces.
 Par exemple, pour trouver le produit de 
\color blue

\begin_inset Formula $n$
\end_inset

 
\color inherit
et 9, il est possible d'écrire 
\begin_inset Formula $n-1$
\end_inset

 comme premier chiffre et 
\begin_inset Formula $10-n$
\end_inset

 comme deuxième chiffre.
 Cette astuce est une solution générale pour multiplier tout nombre à un
 chiffre par 9: il s'agit d'un algorithme.
\end_layout

\begin_layout Standard
De même, les techniques apprises à l'école primaire pour l'addition avec
 report, la soustraction par emprunt (ou celle par compensation) et la division
 longue (méthode de la potence) sont toutes de nature algorithmique.
 Les algorithmes ont pour caractéristique commune de ne nécessiter aucune
 intelligence pour être exécutés.
 Ce sont des processus mécaniques où chaque étape suit la précédente selon
 un ensemble de règles simples.
 
\end_layout

\begin_layout Standard
Exécuter des algorithmes est ennuyeux, mais les concevoir est intéressant,
 intellectuellement stimulant et constitue une part centrale de l'informatique.
\end_layout

\begin_layout Standard
Certains actes naturellement exécutés par les humains, sans difficulté ni
 pensée consciente, sont les plus difficiles à exprimer par des algorithmes.
 La compréhension du langage naturel en est un bon exemple.
 Nous agissons tous ainsi, mais, jusqu'à présent, personne n'a pu expliquer
 comment nous pratiquons, du moins pas sous la forme d'un algorithme.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Débogage-8-8"

\end_inset

Débogage
\end_layout

\begin_layout Standard
Plus la taille des programmes augmente, plus de temps de débogage s'allonge.
 Davantage de code signifie davantage de risques d'erreur et plus d'endroits
 où les bogues peuvent se camoufler.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bissection
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le 
\begin_inset Quotes cld
\end_inset

débogage par bissection
\begin_inset Quotes crd
\end_inset

 est un des méthodes permettant de réduire le temps de débogage.
 Par exemple, s'il y a 100 lignes dans un programme et qu'elles sont vérifiées
 une à une, il en résultera 100 étapes.
 Il est plus astucieux de diviser le problème en deux en regardant vers
 le milieu du programme pour capter une valeur intermédiaire vérifiable.
 Il suffit d'ajouter une instruction d'affichage (ou quelque technique vérifiabl
e) et lancer le programme.
 Si la vérification intermédiaire est incorrecte, le problème se situe dans
 la première moitié du programme.
 Si la vérification est correcte, le problème se situe dans la seconde moitié.
\end_layout

\begin_layout Standard
Chaque fois qu'un contrôle de ce type est utilisé, le nombre de lignes à
 analyser est divisé par deux.
 Pour 100 lignes de codes et après seulement six étapes, il n'y a plus qu'une
 ou deux lignes de code à vérifier, du moins en théorie.
\end_layout

\begin_layout Standard
Dans la pratique, il n'est pas toujours aisé de déterminer le 
\begin_inset Quotes cld
\end_inset

milieu du programme
\begin_inset Quotes crd
\end_inset

 et une vérification n'est pas toujours réalisable.
 Il n'est pas pertinent de compter les lignes et de trouver l'exact milieu.
 Mieux vaut repérer les endroits du programme où des erreurs pourraient
 apparaître et où il est facile de pratiquer une vérification.
 Ensuite, il est judicieux de choisir un endroit où les chances de débusquer
 le bogue avant ou après la vérification sont approximativement les mêmes.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
réaffectation attribution d'une nouvelle valeur à une variable qui existe
 déjà, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reaffectation@réaffectation
\end_layout

\end_inset


\end_layout

\begin_layout Description
mise
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

jour affectation où la nouvelle valeur de la variable dépend de l'ancienne,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mise à jour
\end_layout

\end_inset


\end_layout

\begin_layout Description
initialisation affectation qui donne une valeur initiale à une variable
 qui sera mise à jour ultérieurement, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
initialisation
\end_layout

\end_inset


\end_layout

\begin_layout Description
incrémentation mise à jour qui augmente la valeur d'une variable (typiquement
 de 1), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
incrémentation
\end_layout

\end_inset


\end_layout

\begin_layout Description
décrémentation mise à jour qui diminue la valeur d'une variable (typiquement
 de 1), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
decrementation@décrémentation
\end_layout

\end_inset


\end_layout

\begin_layout Description
itération exécution répétée d'un ensemble d'instructions en utilisant soit
 un appel de fonction récursif, soit une boucle, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
itération
\end_layout

\end_inset


\end_layout

\begin_layout Description

\color blue
while
\color inherit
 instruction qui permet des itérations contrôlées par une condition, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\end_layout

\begin_layout Description

\color blue
break
\color inherit
 instruction permettant de sortir d'une boucle, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\begin_layout Description

\color blue
continue
\color inherit
 instruction à l'intérieur d'une boucle qui provoque un saut au début de
 la boucle pour l'itération suivante, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
continue
\end_layout

\end_inset


\end_layout

\begin_layout Description
boucle
\begin_inset space ~
\end_inset

infinie boucle dans laquelle la condition de fin n'est jamais remplie, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
boucle infinie
\end_layout

\end_inset


\end_layout

\begin_layout Description
algorithme processus général pour résoudre une catégorie de problèmes.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
algorithme
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 7-2
\end_layout

\begin_layout Standard
Copiez la boucle de la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Racines-carrées"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et encapsulez-la dans une fonction appelée 
\color blue
mysqrt
\color inherit
 qui prend 
\color blue
a
\color inherit
 comme paramètre, choisit une valeur raisonnable de
\color blue
 x
\color inherit
 et retourne une estimation de la racine carrée de 
\color blue
a
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
mysqrt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour tester 
\color blue
mysqrt
\color inherit
, écrivez une fonction appelée
\color blue
 testsquareroot
\color inherit
 qui affiche un tableau tel que représenté en 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Tableau-produit-par-testsquareroot"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
testsquareroot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PNG/tableau_sqrt_mysqrt.png
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tableau-produit-par-testsquareroot"

\end_inset

Tableau produit par la fonction 
\color blue
testsquareroot
\color inherit
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 7-3
\end_layout

\begin_layout Standard
La fonction interne 
\color blue
Meta.parse
\color inherit
 prend une chaîne de caractères et la transforme en une expression.
 Cette expression peut être évaluée dans Julia avec la fonction 
\color blue
Core.eval
\color inherit
.
 Par exemple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Meta.parse()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Core.eval()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
expr = Meta.parse(
\color brown
"1+2*3"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

(1 + 2 * 3)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eval(expr)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
7
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 expr = Meta.parse(
\color brown
"sqrt(π)"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

(sqrt(π))
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eval(expr)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1.7724538509055159
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Écrivez une fonction appelée
\color blue
 evalloop
\color inherit
 qui invite l'utilisateur de manière itérative à saisir une expression,
 prend les données résultantes et les évalue à l'aide de la fonction 
\color blue
eval
\color inherit
, puis affiche le résultat.
 
\color blue
eval
\color inherit
 doit continuer jusqu'à ce que l'utilisateur saisisse 
\color blue
done
\color inherit
, puis retourner la valeur de la dernière expression évaluée.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
evalloop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 7-4
\end_layout

\begin_layout Standard
Le mathématicien 
\begin_inset CommandInset href
LatexCommand href
name "Srinivasa Ramanujan"
target "https://fr.wikipedia.org/wiki/Srinivasa_Ramanujan"
literal "false"

\end_inset

 a trouvé une série infinie qui peut être utilisée pour générer une approximatio
n numérique de 
\begin_inset Formula $\nicefrac{1}{\pi}$
\end_inset

: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ramanujan, Srinivasa
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{1}{\pi}=\frac{2\sqrt{2}}{9801}\sum_{k=0}^{\infty}\frac{(4k)!(1103+26390k)}{(k!)^{4}396^{4k}}
\]

\end_inset


\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
estimatepi
\color inherit
 qui utilise cette formule pour calculer et retourner une estimation de
 
\begin_inset Formula $\pi$
\end_inset

.
 Elle doit utiliser une boucle 
\color blue
while
\color inherit
 pour calculer les termes de la somme jusqu'à ce que le dernier terme soit
 inférieur à 
\color blue
1e-15
\color inherit
 (ce qui est la notation Julia pour 
\begin_inset Formula $10^{-15}$
\end_inset

).
 Vous pouvez vérifier le résultat en le comparant à la valeur de π fournie
 par Julia.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
estimatepi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Chaînes"

\end_inset

Chaînes
\end_layout

\begin_layout Standard
Les chaînes
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaînes
\end_layout

\end_inset

 sont des entités différentes des entiers, des flottants et des booléens.
 Elles font partie des structures de données
\begin_inset Index idx
status open

\begin_layout Plain Layout
structure de données
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
données, structure de
\end_layout

\end_inset

 (comme les tableaux [
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Tableaux"
plural "false"
caps "false"
noprefix "false"

\end_inset

], les dictionnaires [
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Dictionnaires"
plural "false"
caps "false"
noprefix "false"

\end_inset

], les tuples [
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Tuples"
plural "false"
caps "false"
noprefix "false"

\end_inset

] et les structures composites [
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Structures-et-fonctions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et suivants]).
 Une chaîne est une séquence
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence
\end_layout

\end_inset

, ce qui signifie qu'elle forme un ensemble ordonné de valeurs.
 Dans ce chapitre, nous voyons comment accéder aux caractères qui composent
 une chaîne et nous découvrirons certaines fonctions d'aide fournies par
 Julia afin de manipuler des chaînes.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Caractères"

\end_inset

Caractères
\end_layout

\begin_layout Standard
Les locuteurs de langue anglaise sont familiarisés avec les caractères tels
 que les lettres de l'alphabet (A, B, C…), les chiffres et la ponctuation
 courante.
 Ces caractères
\begin_inset Index idx
status open

\begin_layout Plain Layout
caractère
\end_layout

\end_inset

 sont normalisés et mis en correspondance avec des valeurs entières comprises
 entre 0 et 127 par la norme ASCII
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset

 (
\emph on
American Standard Code for Information Interchange
\emph default
).
\end_layout

\begin_layout Standard
Il existe bien sûr de nombreux autres caractères utilisés dans d'autres
 langues que l'anglais, y compris des variantes des caractères ASCII avec
 des accents et d'autres modifications, des écritures connexes telles que
 le cyrillique et le grec, et des écritures sans aucun rapport avec l'ASCII
 et l'anglais, notamment l'arabe, le chinois, l'hébreu, l'hindi, le japonais
 et le coréen.
\end_layout

\begin_layout Standard
La norme Unicode traite les difficultés associées à la définition exacte
 d'un caractère et elle est généralement acceptée comme la norme définitive
 pour résoudre ces problèmes.
 Elle fournit un numéro unique pour chaque caractère à l'échelle mondiale.
\end_layout

\begin_layout Standard
Une valeur 
\color blue
Char
\color inherit
 représente un seul caractère et elle est entourée de guillemets droits
 simples:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Char
\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0078 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 25

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 25

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Unicode U+1F34C (category So
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Symbol, other)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 typeof(
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Char
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Même les emojis
\begin_inset Foot
status open

\begin_layout Plain Layout
C'est-à-dire les pictogrammes
\begin_inset Index idx
status open

\begin_layout Plain Layout
pictogramme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
emoji
\end_layout

\end_inset

.
\end_layout

\end_inset

 font partie de la norme Unicode (par exemple,
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue

\backslash

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:banana
\backslash
string:
\end_layout

\end_inset

 TAB
\color inherit
) 
\end_layout

\begin_layout Section
Une chaîne est une séquence
\end_layout

\begin_layout Standard
Une chaîne est une séquence de caractères.
 Il nous est loisible d'accéder aux caractères un à un avec l'opérateur
 double crochets [
\begin_inset space ~
\end_inset

]: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
fruit =
\color brown
 "banane"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 letter = fruit[1]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0062 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La deuxième déclaration sélectionne le caractère numéro 1 de la variable
 
\color blue
fruit
\color inherit
 et l'attribue à la variable 
\color blue
letter
\color inherit
.
\end_layout

\begin_layout Standard
L'expression entre parenthèses contient un indice
\begin_inset Index idx
status open

\begin_layout Plain Layout
indice
\end_layout

\end_inset

 qui désigne le caractère traité de la séquence.
\end_layout

\begin_layout Standard
En Julia, toute séquence indicée
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence indicée
\end_layout

\end_inset

 commence à 1: le premier élément de tout objet indicé sur la base de nombres
 entiers se trouve à l'indice 1 et le dernier élément correspond à 
\color blue
end
\color inherit
 (voir la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:index-caractères"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/indice_de_chaine.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:index-caractères"

\end_inset

Exemple d'une table d'indices pour les séquences de caractères.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tables d'indice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fruit[
\color green
end
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0065 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme pour tout indice, une expression qui contient des variables et des
 opérateurs peut être employée:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 i = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fruit[i+1]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0061 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fruit[end-1]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+006E (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Naturellement, la valeur d'un indice doit être un entier, à défaut de quoi
 Julia retourne une erreur:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fruit[1.5]
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching getindex(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:S
\end_layout

\end_inset

tring, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:F
\end_layout

\end_inset

loat64)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\color blue
length
\end_layout

\begin_layout Standard

\color blue
length 
\color inherit
est une fonction interne qui retourne le nombre de caractères d'une chaîne:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
length()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fruit = 
\color brown
"
\color inherit

\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename Figures/PNG/apple.png
	scale 35

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename Figures/PNG/pear.png
	scale 35

\end_inset


\color brown
"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"
\color inherit

\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 35

\end_inset

 
\begin_inset Graphics
	filename Figures/PNG/apple.png
	scale 35

\end_inset

 
\begin_inset Graphics
	filename Figures/PNG/pear.png
	scale 35

\end_inset


\color lightgray
"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 length(fruit)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour obtenir la dernière lettre d'une chaîne, il est tentant d'essayer ceci:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 last = length(fruit)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0020 (category Zs
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Separator, space)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat est quelque peu inattendu.
 Les chaînes sont encodées en utilisant le codage UTF-8
\begin_inset Index idx
status open

\begin_layout Plain Layout
UTF-8
\end_layout

\end_inset

.
 Or, l'UTF-8 est un codage à largeur variable, ce qui signifie que tous
 les caractères ne sont pas codés avec le même nombre d'octets.
\end_layout

\begin_layout Standard
La fonction
\color blue
 sizeof
\color inherit
 retourne le nombre d'octets d'une chaîne: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sizeof()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 sizeof
\color black
(
\color brown
"
\color inherit

\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 35

\end_inset


\color brown
"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Étant donné qu'un pictogramme est codé sur 4 octets et que l'indexation
 des chaînes est basée sur les octets, le 5
\begin_inset script superscript

\begin_layout Plain Layout
e
\end_layout

\end_inset

 élément de 
\color blue
fruit
\color inherit
 est un ESPACE.
 Cela signifie également que l'indice de chaque octet dans une chaîne UTF-8
 n'est pas nécessairement l'indice valide pour un caractère.
 Si un tel indice d'octet invalide était utilisé dans une chaîne, Julia
 afficherait une erreur:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 fruit
\color black
[2]
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 StringIndexError("
\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 30

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename Figures/PNG/apple.png
	scale 30

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename Figures/PNG/pear.png
	scale 30

\end_inset

 ", 2)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans le cas de 
\color blue
fruit
\color inherit
, le pictogramme 
\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 35

\end_inset

 s'étend sur quatre octets.
 Les indices 2, 3 et 4 ne sont donc pas valables et l'indice du caractère
 suivant est 5.
 Cet indice valable suivant peut être calculé par 
\color blue
nextind(fruits, 1)
\color inherit
.
 L'indice suivant peut être obtenu par 
\color blue
nextind(fruits, 5)
\color inherit
 et ainsi de suite.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nextind()
\end_layout

\end_inset


\end_layout

\begin_layout Section
Parcours d'une chaîne
\end_layout

\begin_layout Standard
De nombreux programmes requièrent le traitement en série d'une ou plusieurs
 chaînes de caractères.
 Souvent, ces traitements commencent au tout début.
 Ils sélectionnent chaque caractère à tour de rôle, effectuent une ou plusieurs
 modifications, puis continuent jusqu'à la fin de la chaîne.
 Ce type de traitement correspond à une traversée
\begin_inset Index idx
status open

\begin_layout Plain Layout
traversée de chaîne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, traversée de
\end_layout

\end_inset

 ou un parcours de chaîne.
 Une façon d'effectuer un tel traitement consiste à recourir à une boucle
 
\color blue
while
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
index = firstindex(fruits)
\end_layout

\begin_layout Plain Layout

\size small
\color green
while
\color inherit
 index <= sizeof(fruits)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

letter = fruits[index]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(letter)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
global
\color inherit
 index = nextind(fruits, index)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette boucle parcourt la chaîne et affiche chaque élément ligne après ligne.
 La condition de la boucle est 
\color blue
index <= sizeof(fruit)
\color inherit
.
 Donc, quand l'indice est plus grand que le nombre d'octets dans la chaîne,
 la condition devient fausse et le corps de la boucle n'est plus exécuté.
\end_layout

\begin_layout Standard
La fonction 
\color blue
firstindex
\color inherit
 retourne le premier indice d'octet valide.
 Le mot-clé 
\color blue
global
\color inherit
 précédant
\color blue
 index
\color inherit
 indique que nous voulons réaffecter l'indice de la variable définie dans
\color blue
 Main
\color inherit
 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Variables-globales"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Main
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
firstindex
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 8-1
\end_layout

\begin_layout Standard
Écrivez une fonction qui prend une chaîne de caractères comme argument et
 affiche les lettres à l'envers, une par ligne.
\end_layout

\begin_layout Standard
La lecture intégrale d'une chaîne peut être menée à bien avec une boucle
 
\color blue
for
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 letter 
\color green
in 
\color inherit
fruits
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(letter)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À chaque passage dans la boucle, le caractère suivant de la chaîne est attribué
 à la variable 
\color blue
letter
\color inherit
.
 La boucle se poursuit jusqu'à ce qu'il n'y ait plus de caractère à lire.
\end_layout

\begin_layout Standard
L'exemple suivant montre l'utilisation de la concaténation (mise bout à
 bout de plusieurs chaînes de caractères) et d'une boucle
\color blue
 for
\color inherit
 pour produire une série alphabétiquement ordonnée.
 Dans le célèbre livre américain pour enfants de 
\begin_inset CommandInset href
LatexCommand href
name "Robert McCloskey"
target "https://fr.wikipedia.org/wiki/Robert_McCloskey"
literal "false"

\end_inset

 intitulé
\emph on
 
\emph default

\begin_inset CommandInset href
LatexCommand href
name "\\textit{Make Way for Ducklings}"
target "https://fr.wikipedia.org/wiki/Make_Way_for_Ducklings"
literal "true"

\end_inset

 (dont la traduction en français a pour titre 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Laissez passer les canards}"
target "https://www.circonflexe.fr/catalogue/aux-couleurs-du-temps/laissez-passer-les-canards"
literal "true"

\end_inset

), les noms des canetons sont Jack, Kack, Lack, Mack, Nack, Ouack, Pack
 et Quack.
 La boucle
\color blue
 for 
\color inherit
ci-dessous produit ces noms dans l'ordre: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
prefixes = 
\color brown
"JKLMNOPQ"
\end_layout

\begin_layout Plain Layout

\size small
suffix = 
\color brown
"ack"
\end_layout

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 prefixes
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(letter * suffix)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le programme retourne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Jack
\end_layout

\begin_layout Plain Layout

\size small
Kack
\end_layout

\begin_layout Plain Layout

\size small
Lack
\end_layout

\begin_layout Plain Layout

\size small
Mack
\end_layout

\begin_layout Plain Layout

\size small
Nack
\end_layout

\begin_layout Plain Layout

\size small
Oack
\end_layout

\begin_layout Plain Layout

\size small
Pack
\end_layout

\begin_layout Plain Layout

\size small
Qack
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce retour est toutefois incorrect, puisque Ouack et Quack ne sont pas correcteme
nt écrits.
\end_layout

\begin_layout Subsection*
Exercice 8-2
\end_layout

\begin_layout Standard
Modifiez le programme précédent pour corriger cette erreur.
\end_layout

\begin_layout Section
Segments de chaînes
\end_layout

\begin_layout Standard
Un segment de chaîne est appelé 
\emph on
slice
\emph default
 en anglais.
 La sélection d'un segment est similaire à la sélection d'un caractère:
\begin_inset Index idx
status open

\begin_layout Plain Layout
slice
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
segment de chaîne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, segment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
str = 
\color brown
"Jules César"
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
str[1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

5]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Jules"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
[n
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
m] 
\color inherit
retourne la partie de la chaîne du 
\color blue
n
\color inherit

\begin_inset script superscript

\begin_layout Plain Layout
ième
\end_layout

\end_inset

 au 
\color blue
m
\color inherit

\begin_inset script superscript

\begin_layout Plain Layout
ième
\end_layout

\end_inset

 octet.
 Il faut donc faire preuve de la même prudence que lors de la manipulation
 d'indices simples.
\begin_inset Index idx
status open

\begin_layout Plain Layout
[n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

m]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le mot-clé 
\color blue
end
\color inherit
 peut être utilisé pour indiquer le dernier octet de la chaîne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
str[7
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

end]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"César"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si le premier indice est supérieur au second, le résultat est une chaîne
 vide entourée de deux guillemets doubles:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
str[78
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

7]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"
\begin_inset space ~
\end_inset

"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une chaîne vide ne contient aucun caractère et a une longueur égale à 0.
 Mis à part cela, ses caractéristiques sont identiques à toute autre chaîne.
\end_layout

\begin_layout Subsection*
Exercice 8-3
\end_layout

\begin_layout Standard
Pour poursuivre cet exemple, que pensez-vous que
\color blue
 str[
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
]
\color inherit
 signifie? Essayez.
\end_layout

\begin_layout Section
Les chaînes sont persistantes
\end_layout

\begin_layout Standard
Il est tentant d'utiliser l'opérateur 
\color blue
[ ] 
\color inherit
sur le côté gauche d'une affectation, avec l'intention de changer un caractère
 dans une chaîne.
 Par exemple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, persistance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
salut =
\color green
 
\color brown
"Hello, world!"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Hello, world!"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
salut[1] =
\color green
 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 J
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching setinde
\begin_inset ERT
status open

\begin_layout Plain Layout

x
\backslash
string!
\end_layout

\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:S
\end_layout

\end_inset

tring, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:C
\end_layout

\end_inset

har, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:I
\end_layout

\end_inset

nt64)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La raison de cette erreur provient de ce que les chaînes de caractères sont
 persistantes ou inchangeables (
\emph on
immutable
\emph default
 en anglais).
\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
immuabilité
\end_layout

\end_inset

 Cela signifie qu'une chaîne existante ne peut pas être modifiée.
 Le mieux qu'on puisse faire est de créer une nouvelle chaîne qui soit une
 variation de l'originale: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
salut = 
\color inherit
"J"
\color black
 * salut[2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

end]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Jello, world!"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cet exemple concatène une nouvelle première lettre avec un segment de 
\color blue
salut
\color inherit
.
 Il n'a aucun effet sur la chaîne de caractères originale.
 Ceci est explicité dans la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Schématisation-du-remplacement-lettre-chaine"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/concat_reaffectation_chaine.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schématisation-du-remplacement-lettre-chaine"

\end_inset

Schématisation du remplacement de lettre dans une chaîne de caractères.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Interpolation des chaînes
\end_layout

\begin_layout Standard
Construire des chaînes de caractères en utilisant la concaténation peut
 devenir rapidement ardu.
 Pour réduire la nécessité de ces appels verbeux à 
\color blue
string
\color inherit
 ou des multiplications de chaînes, Julia autorise l'
\emph on
interpolation de chaînes
\emph default
 à l'aide de 
\color blue
$
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
interpolation de chaîne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, interpolation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
$, interpolation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
salut1 = 
\color brown
"Hello"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Hello!"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
a_qui = 
\color brown
"World"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"World"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color brown
"
\color violet
$salut1
\color brown
,
\color black
 
\color violet
$
\color black
(a_qui)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color brown
"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Hello, World
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!"
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette formulation est plus lisible et plus pratique que la concaténation
\begin_inset Index idx
status open

\begin_layout Plain Layout
concaténation
\end_layout

\end_inset

 de chaînes: 
\color blue
salut1
\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

",
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

a_qui
\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

!"
\color inherit
.
\end_layout

\begin_layout Standard
L'expression complète la plus courte après le 
\color blue
$
\color inherit
 est prise comme l'expression dont la valeur doit être interpolée.
 Ainsi, toute expression dans une chaîne peut être interpolée en utilisant
 des parenthèses
\begin_inset Foot
status open

\begin_layout Plain Layout
Comme ce qui se pratique dans le shell 
\color blue
bash
\color black
, par exemple.
\end_layout

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
bash
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
greet = 
\color brown
"1 + 2 = 
\color violet
$
\color black
(1 + 2)
\color brown
"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"1 + 2 = 3"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Recherche-dans-les-chaines"

\end_inset

Recherche dans les chaînes
\end_layout

\begin_layout Standard
Que fait la fonction suivante? 
\begin_inset Index ind
status open

\begin_layout Plain Layout
find
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
find(word, letter)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

index = firstindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 index <= sizeof(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 word[index] == letter
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 index
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

index = nextind(word, index)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-1
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans un sens, cette fonction 
\color blue
find
\color inherit
 est l'inverse de l'opérateur 
\color blue
[
\begin_inset space ~
\end_inset

]
\color inherit
.
 Au lieu de prendre un indice et d'extraire le caractère correspondant,
 elle prend un caractère et trouve l'indice où ce caractère apparaît.
 Si le caractère n'est pas trouvé, la fonction retourne -1.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset


\end_layout

\begin_layout Standard
C'est le premier exemple que nous voyons d'une déclaration de retour à l'intérie
ur d'une boucle.
 Si 
\color blue
word[index] == letter
\color inherit
, la fonction sort de la boucle et retourne immédiatement la position de
 la lettre.
\end_layout

\begin_layout Standard
Si le caractère n'apparaît pas dans la chaîne de caractères, le programme
 sort normalement de la boucle en retournant 
\color blue
-1
\color inherit
.
\end_layout

\begin_layout Standard
Ce schéma de calcul s'appelle une 
\emph on
recherche
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 8-4
\end_layout

\begin_layout Standard
Modifiez 
\color blue
find
\color inherit
 pour qu'elle contienne un troisième paramètre, en l'occurrence l'indice
 dans 
\color blue
word
\color inherit
 où la recherche doit commencer.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Boucle-et-compteur"

\end_inset

Boucle et compteur
\end_layout

\begin_layout Standard
Le programme suivant compte le nombre d'occurrences de la lettre 
\color blue
a
\color inherit
 dans une chaîne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
word = 
\color brown
"banane"
\end_layout

\begin_layout Plain Layout

\size small
counter = 0
\end_layout

\begin_layout Plain Layout

\size small
\color green
for 
\color black
letter
\color green
 in 
\color black
word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter == 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
global
\color inherit
 counter = counter + 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
println(counter)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce programme illustre un mode de calcul avec emploi d'un 
\emph on
compteur
\emph default
.
 Le compteur
\begin_inset Index idx
status open

\begin_layout Plain Layout
compteur
\end_layout

\end_inset

 est une variable initialisée à 0 puis incrémentée (+1) à chaque fois que
 la lettre 
\color blue
a 
\color inherit
est détectée.
 Lorsque la boucle se termine, le compteur contient la somme des occurrences
 de 
\color blue
a
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
incrémentation
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-count"

\end_inset

Exercice 8-5
\end_layout

\begin_layout Standard
Encapsulez le code précédent dans une fonction appelée 
\color blue
count
\color inherit
 et généralisez-le pour qu'il accepte la chaîne et la lettre comme arguments.
\begin_inset Index ind
status open

\begin_layout Plain Layout
count
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ensuite, réécrivez la fonction de sorte que, au lieu de parcourir la chaîne
 de caractères, 
\color blue
count
\color inherit
 utilise la version à trois paramètres de 
\color blue
find
\color inherit
 évoquée dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-dans-les-chaines"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
find
\end_layout

\end_inset


\end_layout

\begin_layout Section
Bibliothèque des chaînes
\end_layout

\begin_layout Standard
Julia fournit des fonctions qui permettent d'effectuer diverses opérations
 utiles sur les chaînes de caractères.
 Par exemple, la fonction 
\color blue
uppercase
\color inherit
 prend une chaîne de caractères et retourne une nouvelle chaîne, toutes
 ses lettres étant converties en majuscules.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaînes, bibliothèque
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
uppercase(
\color brown
"Hello, World!"
\color black
)
\color brown
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"HELLO, WORLD!"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il s'avère qu'il existe une fonction appelée 
\color blue
findfirst
\color inherit
 qui est remarquablement similaire à la fonction 
\color blue
find
\color inherit
 que nous avons écrite: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
uppercase()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
findfirst()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
findfirst(
\color brown
"a"
\color black
, 
\color brown
"banane"
\color black
)
\end_layout

\begin_layout Plain Layout

\color lightgray
2
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En fait, la fonction 
\color blue
findfirst
\color inherit
 est plus générale que notre fonction 
\color blue
find
\color inherit
.
 En plus des caractères, elle peut trouver des sous-chaînes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
findfirst(
\color brown
"ane"
\color black
, 
\color brown
"banane"
\color black
)
\end_layout

\begin_layout Plain Layout

\color lightgray
4
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

6
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Par défaut, 
\color blue
findfirst
\color inherit
 commence au début de la chaîne de caractères, mais la fonction 
\color blue
findnext
\color inherit
 prend un troisième argument, l'indice où elle doit commencer:
\begin_inset Index idx
status open

\begin_layout Plain Layout
findnext
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
findnext(
\color brown
"ne"
\color black
, 
\color brown
"banane"
\color black
, 3)
\end_layout

\begin_layout Plain Layout

\color lightgray
5
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
6
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
L'opérateur 
\color blue
∈
\end_layout

\begin_layout Standard
L'opérateur ∈ (
\color blue

\backslash
in TAB
\color inherit
) est un booléen
\begin_inset Foot
status open

\begin_layout Plain Layout
∈ signifie 
\begin_inset Quotes cld
\end_inset

appartient à
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

est un élément de
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset

 qui prend un caractère et une chaîne.
 Il retourne
\color blue
 true
\color inherit
 si le caractère apparaît dans la chaîne: 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
in
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
in$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 
\color inherit
∈
\color brown
 "banane"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Par exemple, la fonction suivante permet d'afficher toutes les lettres de
 
\color blue
word1
\color inherit
 qui apparaissent également dans 
\color blue
word2
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
inboth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
inboth(word1, word2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for 
\color inherit
letter 
\color green
in
\color inherit
 word1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if 
\color inherit
letter ∈ word2
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(letter, " ")
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Avec des noms de variables bien choisis, Julia se lit parfois comme du français.
 Ainsi, cette boucle peut être lue comme ceci: 
\begin_inset Quotes cld
\end_inset

pour (chaque) lettre du (premier) mot, si (la) lettre est un élément du
 (deuxième) mot, affichez (ladite) lettre
\begin_inset Quotes crd
\end_inset

.
 Voici ce qui se passe quand on 
\begin_inset Quotes cld
\end_inset

compare
\begin_inset Quotes crd
\end_inset

 des pommes et des poires.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
inboth(
\color brown
"pommes", "poires"
\color black
)
\end_layout

\begin_layout Plain Layout

\color lightgray
p
\begin_inset space ~
\end_inset

o
\begin_inset space ~
\end_inset

e
\begin_inset space ~
\end_inset

s
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Comparaison de chaînes
\end_layout

\begin_layout Standard
Les opérateurs relationnels fonctionnent aussi avec les chaînes.
 Pour voir si deux chaînes sont égales: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaînes, comparaison
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
word = 
\color brown
"Prigogine"
\end_layout

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 word == 
\color brown
"thermodynamique"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Génial, la thermodynamique."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
D'autres opérations relationnelles sont utiles pour mettre les mots en ordre
 alphabétique:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
word = 
\color brown
"Prigogine"
\end_layout

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 word < 
\color brown
"thermodynamique"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Le mot 
\color violet
$word
\color brown
 vient avant thermodynamique."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
elseif
\color inherit
 word > 
\color brown
"thermodynamique"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Le mot 
\color violet
$word
\color brown
 vient après thermodynamique."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Génial, la thermodynamique."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia ne gère pas les lettres majuscules et minuscules comme nous le faisons.
 Toutes les lettres majuscules passent avant les minuscules, le résultat
 est donc:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
Le mot, Prigogine, vient avant thermodynamique.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Une manière courante de résoudre ce problème consiste à convertir les chaînes
 de caractères en un format standard, par exemple toutes les minuscules,
 avant d'effectuer la comparaison.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Débogage-9-13"

\end_inset

Débogage
\end_layout

\begin_layout Standard
Lorsque des indices sont exploités pour parcourir les valeurs d'une chaîne
 séquentiellement, il est délicat d'obtenir le début et la fin exacts de
 la traversée de chaîne.
 Voici une fonction qui est censée comparer deux mots et retourner 
\color blue
true 
\color inherit
si l'un des mots est l'inverse de l'autre.
 Cependant, elle contient deux erreurs: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
isreverse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
isreverse(word1, word2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if 
\color inherit
length(word1) 
\begin_inset ERT
status open

\begin_layout Plain Layout

!
\backslash
string=
\end_layout

\end_inset

 length(word2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = firstindex(word1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = lastindex(word2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 j >= 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = prevind(word2, j)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 word1[i] 
\begin_inset ERT
status open

\begin_layout Plain Layout

!
\backslash
string=
\end_layout

\end_inset

 word2[j]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = nextind(word1, i)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première déclaration vérifie si les mots sont de la même longueur.
 Si ce n'est pas le cas, nous pouvons immédiatement retourner 
\color blue
false
\color inherit
.
 Sinon, pour le reste de la fonction, nous supposons que les mots sont de
 la même longueur.
 C'est un exemple avec une sentinelle.
\end_layout

\begin_layout Standard

\color blue
i
\color inherit
 et
\color blue
 j 
\color inherit
sont des indices: 
\color blue
i
\color inherit
 parcourt 
\color blue
word1
\color inherit
 vers l'avant tandis que
\color blue
 j
\color inherit
 parcourt 
\color blue
word2
\color inherit
 à rebours.
 Si nous trouvons deux lettres qui ne correspondent pas, nous pouvons retourner
 
\color blue
false
\color inherit
 immédiatement.
 Si toute la boucle est parcourue et que toutes les lettres correspondent,
 le programme retourne
\color blue
 true
\color inherit
.
\end_layout

\begin_layout Standard
La fonction 
\color blue
lastindex
\color inherit
 retourne le dernier indice d'octet valide de la chaîne de caractères et
 
\color blue
prevind
\color inherit
 l'indice valide du caractère précédent.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
lastindex()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
prevind()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si nous testons cette fonction avec les mots 
\begin_inset Quotes cld
\end_inset

pots
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

stop
\begin_inset Quotes crd
\end_inset

, nous nous attendons à ce que la valeur de retour soit
\color blue
 true
\color inherit
.
 Ce n'est pourtant pas le cas:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
isreverse(
\color brown
"pots", "stop"
\color black
)
\end_layout

\begin_layout Plain Layout

\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour déboguer ce genre d'erreur, la première démarche consiste à imprimer
 la valeur des indices dans la séquence:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
while
\color inherit
 j >= 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = prevind(word2, j)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@show
\color inherit
 i j
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 word1[i] 
\begin_inset ERT
status open

\begin_layout Plain Layout

!
\backslash
string=
\end_layout

\end_inset

 word2[j]
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En relançant le programme, nous obtenons de précieuses informations: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@show}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
isreverse(
\color brown
"pots", "stop"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lors du premier passage dans la boucle,
\color blue
 j
\color inherit
 vaut 3.
 Or, ce devrait être 4.
 Cette valeur peut être fixée en déplaçant la ligne 
\color blue
j = prevind(word2, j)
\color inherit
 à la fin de la boucle 
\color blue
while
\color inherit
.
\end_layout

\begin_layout Standard
Cela accompli, le programme est relancé, ce qui conduit au résultat: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
isreverse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
isreverse(
\color brown
"pots", "stop"
\color green
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 4
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 4
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
i = 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
j = 0
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 BoundsError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 attempt to access "pots" at index [5]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fois, une
\size small
\color red
 BoundsError
\size default
\color inherit
 a été émise.
 La valeur de
\color blue
 i 
\color inherit
est de 5, ce qui est en dehors de la plage pour la chaîne 
\begin_inset Quotes cld
\end_inset

pots
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Subsection*
Exercice 8-6
\end_layout

\begin_layout Standard
Exécutez le programme sur papier, en changeant les valeurs de
\color blue
 i
\color inherit
 et 
\color blue
j
\color inherit
 à chaque itération.
 Trouvez et corrigez la deuxième erreur dans cette fonction.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
séquence collection ordonnée de valeurs où chaque valeur est identifiée
 par un indice entier, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence
\end_layout

\end_inset


\end_layout

\begin_layout Description
norme
\begin_inset space ~
\end_inset

ASCII norme de codage des caractères pour la communication électronique
 spécifiant 128 caractères, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset


\end_layout

\begin_layout Description
norme
\begin_inset space ~
\end_inset

Unicode norme de l'industrie informatique pour le codage, la représentation
 et le traitement cohérents des textes exprimés dans la plupart des systèmes
 d'écriture du monde, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unicode
\end_layout

\end_inset


\end_layout

\begin_layout Description
indice valeur entière utilisée pour sélectionner un élément dans une séquence,
 tel qu'un caractère dans une chaîne de caractères.
 En Julia, les indices commencent à 1, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
indice
\end_layout

\end_inset


\end_layout

\begin_layout Description
encodage
\begin_inset space ~
\end_inset

UTF-8 encodage de caractères à largeur variable capable de coder tous les
 1112064 points de code valides en Unicode en utilisant un à quatre octets
 de 8 bits (abréviation de l'anglais
\emph on
 
\series bold
U
\series default
niversal Character Set 
\series bold
T
\series default
ransformation 
\series bold
F
\series default
ormat – 
\series bold
8
\series default
 bits
\emph default
), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
UTF-8
\end_layout

\end_inset


\end_layout

\begin_layout Description
traversée lecture des éléments dans une séquence, en effectuant une opération
 similaire sur chacun d'eux, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, traversée de
\end_layout

\end_inset


\end_layout

\begin_layout Description
segment
\begin_inset space ~
\end_inset

(
\emph on
slice
\emph default
) partie d'une chaîne de caractères délimitée par une série d'indices, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
slice
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
segment
\end_layout

\end_inset


\end_layout

\begin_layout Description
chaîne
\begin_inset space ~
\end_inset

vide chaîne sans caractères et de longueur 0, représentée par deux guillemets
 droits, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne vide
\end_layout

\end_inset


\end_layout

\begin_layout Description
persistance
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset


\emph on
immutability
\emph default
) propriété d'une séquence dont les éléments ne peu\SpecialChar softhyphen
vent pas être modifiés,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
interpolation
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

chaîne processus d'évaluation d'une chaîne contenant un ou plusieurs caractères,
 donnant un résultat dans lequel les caractères sont remplacés par leurs
 valeurs correspondantes, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
interpolation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne, interpolation
\end_layout

\end_inset


\end_layout

\begin_layout Description
recherche modèle de traversée d'une séquence qui s'arrête lorsqu'il trouve
 ce qu'il cherche, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche
\end_layout

\end_inset


\end_layout

\begin_layout Description
compteur variable généralement initialisée à zéro puis incrémentée d'une
 unité à chaque passage dans une boucle.
\begin_inset Index idx
status open

\begin_layout Plain Layout
compteur
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-9-15-1"

\end_inset

Exercice 8-7
\end_layout

\begin_layout Standard
Le but de cet exercice est de consulter la 
\begin_inset CommandInset href
LatexCommand href
name "documentation Julia associées aux chaînes"
target "https://docs.julialang.org/en/v1/manual/strings/"
literal "false"

\end_inset

.
 Vous voudrez peut-être essayer certaines fonctions pour vous assurer que
 vous comprenez leur fonctionnement.
 Les méthodes 
\color blue
strip
\color inherit
 et 
\color blue
replace
\color inherit
 sont particulièrement utiles.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaînes, documentation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
strip()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
replace()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La documentation utilise une syntaxe qui peut être déroutante.
 Par exemple, dans 
\color blue
search(string
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:A
\end_layout

\end_inset


\size default
bstractString, chars
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:C
\end_layout

\end_inset


\size default
hars, [start
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:I
\end_layout

\end_inset


\size default
nteger])
\color inherit
, les crochets indiquent des arguments optionnels.
 Ainsi, 
\color blue
string
\color inherit
 et 
\color blue
chars
\color inherit
 sont obligatoires, tandis que 
\color blue
start
\color inherit
 est optionnel.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
char
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
string
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
start
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 8-8
\end_layout

\begin_layout Standard
Il existe une fonction interne appelée 
\color blue
count
\color inherit
 similaire à la fonction 
\color blue
count
\color inherit
 de la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Boucle-et-compteur"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (voir en particulier l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-count"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Documentation-interne"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Lisez la 
\begin_inset CommandInset href
LatexCommand href
name "documentation de count"
target "https://docs.julialang.org/en/v1/base/collections/#Base.count"
literal "false"

\end_inset

 et utilisez-la pour compter le nombre de 
\color blue
a
\color inherit
 dans 
\begin_inset Quotes cld
\end_inset

abracadabra
\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
count()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
count(), documentation
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 8-9
\end_layout

\begin_layout Standard
Un segment de chaîne peut prendre un troisième indice.
 Le premier indique le début, le troisième la fin et le deuxième la 
\begin_inset Quotes cld
\end_inset

taille du pas
\begin_inset Quotes crd
\end_inset

, c'est-à-dire le nombre d'espaces entre les caractères successifs.
 Un pas de 2 signifie un caractère sur deux, un pas de 3 signifie un caractère
 sur trois, etc.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
mot = 
\color brown
"servovalve"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"servovalve"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
mot[1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

6] 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"sro"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un pas de -1 traverse le mot à l'envers, de sorte que 
\color blue
[end
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
-1
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
1]
\color inherit
 produit une chaîne inversée.
 Utilisez cette technique pour écrire une version d'une ligne de la fonction
 
\color blue
ispalindrome
\color inherit
 (exercice de la sous-section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-ispalindrome"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
ispalindrome
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 8-10
\end_layout

\begin_layout Standard
Les fonctions suivantes sont toutes destinées à vérifier si une chaîne de
 caractères contient des minuscules, mais certaines d'entre elles sont erronées.
 Pour chaque fonction, décrivez ce que la fonction fait réellement (en supposant
 que le paramètre est une chaîne de caractères).
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
anylowercase1
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
anylowercase2
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
anylowercase3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 anylowercase1(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for 
\color inherit
c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 islowercase(c)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return true
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return false
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 anylowercase2(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for 
\color inherit
c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 islowercase(
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return 
\color brown
"true"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return 
\color brown
"false"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 anylowercase3(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for 
\color inherit
c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

flag = islowercase(c)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
flag
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 anylowercase4(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
flag =
\color green
 false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

flag = flag || islowercase(c)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

flag
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 anylowercase5(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

islowercase(c)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-9-15-5-rotatewords1"

\end_inset

Exercice 8-11
\end_layout

\begin_layout Standard
Un code César est une forme de chiffrement faible qui implique le décalage
 de chaque lettre par un nombre fixe (le cas échéant, une lettre peut revenir
 à sa place initiale).
 Par exemple, 
\color blue
'A'
\color inherit
 décalé de 3 devient 
\color blue
'D'
\color inherit
 et 
\color blue
'Z' 
\color inherit
décalé de 1 devient 
\color blue
'A'
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
code César
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour faire pivoter un mot, il suffit de décaler chaque lettre de la même
 manière.
 Par exemple, 
\begin_inset Quotes cld
\end_inset

oui
\begin_inset Quotes crd
\end_inset

 décalé de 10 devient 
\begin_inset Quotes cld
\end_inset

yes
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

lit
\begin_inset Quotes crd
\end_inset

 décalé de 7 devient 
\begin_inset Quotes cld
\end_inset

spa
\begin_inset Quotes crd
\end_inset

, et décalé de -4 devient 
\begin_inset Quotes cld
\end_inset

hep
\begin_inset Quotes crd
\end_inset

.
 Dans le film 
\emph on
2001: l'Odyssée de l'espace
\emph default
, l'ordinateur du vaisseau s'appelle HAL, c'est-à-dire IBM décalé de -1.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:Des-blagues-potentiellement"

\end_inset

Des blagues potentiellement grivoises sur l'internet sont parfois encodées
 en ROT13, un code César avec un décalage de 13.
 Si vous n'êtes pas facilement offensé, trouvez et décodez certaines d'entre
 elles.
\begin_inset Index idx
status open

\begin_layout Plain Layout
ROT13
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
rotateword
\color inherit
 qui prend une chaîne de caractères ainsi qu'un entier comme paramètres
 et retourne une nouvelle chaîne de caractères contenant les lettres de
 la chaîne originale pivotée de la quantité donnée.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
rotateword
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Vous pouvez utiliser la fonction intégrée 
\backslash
textcolor{blue}{Int}, qui convertit un caractère en un code numérique, et
 
\backslash
textcolor{blue}{Char}, qui convertit les valeurs numériques en caractères.
 Les lettres de l'alphabet sont codées dans l'ordre alphabétique, par exemple:
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\backslash
begin{tabularx}{0.95
\backslash
textwidth} { 
\end_layout

\begin_layout Plain Layout

    | >{
\backslash
raggedright
\backslash
arraybackslash}X  }  
\end_layout

\begin_layout Plain Layout

   
\backslash
textcolor{green}{
\backslash
small{julia>}} 
\backslash
small{
\backslash
textcolor{brown}{Int}(
\backslash
textcolor{brown}{
\backslash
textquotesingle c
\backslash
textquotesingle}) -  {Int}(
\backslash
textcolor{brown}{
\backslash
textquotesingle a
\backslash
textquotesingle})} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

    
\backslash
textcolor{lightgray}{
\backslash
small{2}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{tabularx}
\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\end_layout

\begin_layout Plain Layout

Cela parce que 
\backslash
textcolor{blue}{c} est la troisième lettre de l'alphabet.
 Prudence: les codes 
\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent numériques des lettres majuscules sont différents: 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\backslash
begin{tabularx}{0.95
\backslash
textwidth} { 
\end_layout

\begin_layout Plain Layout

    | >{
\backslash
raggedright
\backslash
arraybackslash}X  }  
\end_layout

\begin_layout Plain Layout

    
\backslash
textcolor{green}{
\backslash
small{julia>}} 
\backslash
textcolor{brown}{Char}(
\backslash
small{
\backslash
textcolor{brown}{Int}(
\backslash
textcolor{brown}{
\backslash
textquotesingle A
\backslash
textquotesingle}}) 
\backslash
textcolor{lightgray}{
\backslash
small{+ 32}}) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
textcolor{lightgray}{
\backslash
small{
\backslash
textquotesingle a
\backslash
textquotesingle
\backslash
string: ASCII/Unicode U+0061 (category Ll
\backslash
string: Letter, lowercase)}}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{tabularx}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Étude-de-cas-Jeux-de-mots"

\end_inset

Étude de cas: jeux de mots
\end_layout

\begin_layout Standard
Ce chapitre présente la deuxième étude de cas, qui consiste à résoudre des
 énigmes lexicales en recherchant des mots présentant certaines propriétés.
 Par exemple, nous trouverons les palindromes les plus longs en anglais
 et nous chercherons des mots dont les lettres apparaissent dans l'ordre
 alphabétique.
 Un autre plan de développement de programmes sera présenté: la réduction
 à un problème précédemment résolu.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Lecture-de-listes-de-mots"

\end_inset

Lecture de listes de mots
\end_layout

\begin_layout Standard
Pour les exercices de ce chapitre, nous utiliserons une liste de mots français.
 Celle qui convient le mieux à notre objectif est une liste de mots collectée
 et mise dans le domaine public par 
\begin_inset CommandInset href
LatexCommand href
name "Christophe Pallier"
target "https://chrplr.github.io/openlexicon/datasets-info/Liste-de-mots-francais-Gutenberg/README-liste-francais-Gutenberg.html"
literal "false"

\end_inset

 dans le cadre du projet de dictionnaire Français-GUTenberg de 
\begin_inset CommandInset href
LatexCommand href
name "Christophe Pythoud"
target "https://chrplr.github.io/openlexicon/datasets-info/Liste-de-mots-francais-Gutenberg/README-liste-francais-Gutenberg.html"
literal "false"

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-8"
literal "false"

\end_inset

.
 Il s'agit d'une liste de 336
\begin_inset space ~
\end_inset

531 mots encodés en UTF-8.
 Un navigateur comme Firefox permet d'enregistrer directement ce fichier
 sous le nom 
\color blue
mots_FR.txt
\color inherit
 (par exemple).
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pallier, Christophe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Pythoud, Christophe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Français-GUTenberg
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
GUTenberg, projet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ce fichier est en mode texte brut, tout éditeur de texte peut l'afficher.
 Cependant, ce fichier est lisible depuis Julia.
 La fonction intégrée 
\color blue
open
\color inherit
 prend le nom du fichier comme paramètre et retourne un flux de fichiers
 utilisable pour lire le fichier.
 
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fin = open(
\color brown
"/home/chemin_vers_fichier/mots_FR.txt"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
IOStream(<file /home/chemin_vers_fichier/mots_FR.txt>)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
fin
\color inherit
 est un flux de fichiers utilisé pour l'entrée et lorsqu'il n'est plus nécessair
e, il doit être fermé avec 
\color blue
close(fin)
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
open()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Julia fournit plusieurs fonctions de lecture, dont 
\color blue
readline
\color inherit
 qui lit les caractères du fichier jusqu'à arriver à une
\color blue
 NEWLINE
\color black

\begin_inset Index idx
status open

\begin_layout Plain Layout
NEWLINE
\end_layout

\end_inset


\color inherit
 et retourne le résultat sous forme de chaîne: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
readline()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 readline(fin)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"a"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le premier mot de cette liste est 
\color blue
"a"
\color inherit
 (conjugaison du verbe 
\begin_inset Quotes cld
\end_inset

avoir
\begin_inset Quotes crd
\end_inset

 à la troisième personne au singulier du présent de l'indicatif).
\end_layout

\begin_layout Standard
Le flux de fichiers garde une trace de l'endroit où il s'est arrêté, si
 bien qu'appeler à nouveau 
\color blue
readline
\color inherit
 conduit à l'affichage du mot suivant:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 readline(fin)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"à"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Parce que le fichier peut être parcouru dans une boucle
\color blue
 for
\color inherit
, ce programme lit le fichier 
\color blue
mots_FR.txt
\color inherit
 et imprime chaque mot, un par ligne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 line in eachline(
\color brown
"/chemin_vers_fichier/mots_FR.txt"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(line)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le dernier mot affiché est 
\begin_inset Quotes cld
\end_inset

zythums
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Exercices_10-2"

\end_inset

Exercices
\end_layout

\begin_layout Subsection*
Exercice 9-1
\end_layout

\begin_layout Standard
Écrivez un programme qui lit 
\color blue
mots_FR.txt
\color inherit
 et n'imprime que les mots de plus de 20 caractères (sans compter les espaces).
\end_layout

\begin_layout Subsection*
Exercice 9-2
\end_layout

\begin_layout Standard
Le roman
\emph on
 La Disparition
\emph default
 est un 
\begin_inset CommandInset href
LatexCommand href
name "lipogramme"
target "https://fr.wikipedia.org/wiki/Lipogramme"
literal "false"

\end_inset

 écrit par 
\begin_inset CommandInset href
LatexCommand href
name "Georges Perec"
target "https://fr.wikipedia.org/wiki/Georges_Perec"
literal "false"

\end_inset

 (membre de l'
\begin_inset CommandInset href
LatexCommand href
name "Oulipo"
target "https://fr.wikipedia.org/wiki/Oulipo"
literal "false"

\end_inset

) en 1968 et publié en 1969.
 Il tire son originalité du fait que ses 300 pages (nombre variable selon
 les éditions) ne comportent pas une seule fois la lettre 
\color blue
e
\color inherit
, pourtant généralement la plus utilisée dans la langue française.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Perec, Georges
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Disparition, La
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
lipogramme
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
hasno_e
\color inherit
 qui retourne 
\color blue
true
\color inherit
 si le mot passé en argument ne contient pas la lettre
\color blue
 e
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
hasno_e
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modifiez votre programme par rapport à la section précédente pour imprimer
 seulement les mots qui ne contiennent pas de 
\color blue
e
\color inherit
 et calculez-en le pourcentage sur la liste.
\end_layout

\begin_layout Subsection*
Exercice 9-3
\end_layout

\begin_layout Standard
Écrivez une fonction nommée 
\color blue
avoids
\color inherit
 qui prend un mot et une chaîne de lettres interdites en arguments, et qui
 retourne 
\color blue
true
\color inherit
 si le mot n'en utilise aucune.
\begin_inset Index ind
status open

\begin_layout Plain Layout
avoids
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modifiez votre programme pour demander à l'utilisateur d'entrer une chaîne
 de lettres interdites, puis imprimez le nombre de mots qui ne contiennent
 aucune de ces lettres.
 Pouvez-vous trouver une combinaison de 5 lettres interdites qui exclut
 le plus petit nombre de mots?
\end_layout

\begin_layout Subsection*
Exercice 9-4
\end_layout

\begin_layout Standard
Écrivez une fonction nommée 
\color blue
usesonly
\color inherit
 qui prend un mot et une chaîne de lettres, et qui retourne 
\color blue
true
\color inherit
 si le mot ne contient que des lettres de cette série.
 Pouvez-vous faire une phrase (autre que 
\begin_inset Quotes cld
\end_inset

Hoe alfalfa
\begin_inset Quotes crd
\end_inset

) en utilisant uniquement les lettres 
\color blue
acefhlo
\color inherit
? 
\begin_inset Index ind
status open

\begin_layout Plain Layout
useonly
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 9-5
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
usesall 
\color inherit
qui prend un mot et une chaîne de lettres obligatoires, et qui retourne
 
\color blue
true
\color inherit
 si le mot utilise toutes les lettres obligatoires au moins une fois.
 Combien y a-t-il de mots qui utilisent toutes les voyelles 
\color blue
aeiou
\color inherit
? Que diriez-vous de 
\color blue
aeiouy
\color inherit
? 
\end_layout

\begin_layout Subsection*
Exercice 9-6
\end_layout

\begin_layout Standard
Écrivez une fonction appelée
\color blue
 isabecedarian
\color inherit
 qui retourne
\color blue
 true
\color inherit
 si les lettres d'un mot apparaissent dans l'ordre alphabétique (les lettres
 doubles sont admises).
 Combien existe-t-il de mots abécédaires? 
\begin_inset Index idx
status open

\begin_layout Plain Layout
abécédaire
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
isabecedarian
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Recherche-10-3"

\end_inset

Recherche
\end_layout

\begin_layout Standard
Tous les exercices de la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Exercices_10-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

 présentent un point commun.
 Ils peuvent être résolus avec le modèle de recherche dans les chaînes (voir
 la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-dans-les-chaines"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 L'exemple le plus simple est le suivant: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
hasno_e
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
hasno_e(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter == 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La boucle 
\color blue
for 
\color inherit
traverse les caractères du mot passé en argument.
 Si la lettre 
\color blue
e
\color inherit
 est détectée, le programme retourne immédiatement 
\color blue
false
\color inherit
.
 Sinon, il passe à la lettre suivante.
 Si le programme sort de la boucle normalement, cela signifie que la lettre
 
\color blue
e
\color inherit
 n'a pas été décelée et, par conséquent, le programme retourne 
\color blue
true
\color inherit
.
\end_layout

\begin_layout Standard
Cette fonction pourrait être reformulée de manière plus concise en utilisant
 l'opérateur ∉ (
\color blue

\backslash
notin TAB
\color inherit
), mais la version de base illustre bien la logique du schéma de recherche.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
notin$}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
notin
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color black
La fonction
\color blue
 avoids
\color inherit
 est une version plus générale de 
\color blue
hasno_e
\color inherit
, bien qu'elle présente la même structure: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
avoids
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
avoids(word, forbidden)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter ∉ forbidden 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le programme peut retourner 
\color blue
false
\color inherit
 dès qu'il trouve une lettre interdite passée comme second argument.
 S'il arrive au bout de la boucle, le programme retourne 
\color blue
true
\color inherit
.
\end_layout

\begin_layout Standard

\color black
La fonction
\color blue
 usesonly
\color inherit
 est analogue, si ce n'est que le sens de la condition est inversé:
\begin_inset Index ind
status open

\begin_layout Plain Layout
useonly
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
useonly(word, available)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter ∉ available
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au lieu d'une série de lettres interdites, nous avons une série de lettres
 permises.
 Si nous trouvons une lettre qui n'est pas présente dans un mot, le programme
 retourne 
\color blue
false
\color inherit
.
\end_layout

\begin_layout Standard

\color blue
useall
\color inherit
 est similaire, sauf que nous inversons le rôle du mot et de la série de
 lettres:
\begin_inset Index ind
status open

\begin_layout Plain Layout
useall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
useall(word, required)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 required
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter ∉ word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au lieu de parcourir les lettres du mot, la boucle parcourt les lettres
 obligatoires.
 Si l'une des lettres requises n'apparaît pas dans le mot, le programme
 retourne 
\color blue
false
\color inherit
.
\end_layout

\begin_layout Standard
Si vous pensez vraiment comme un informaticien, vous avez identifié que
 
\color blue
usesall
\color inherit
 est un exemple de problème déjà résolu.
 Dans ce cas, il est vraisemblable que vous ayez écrit:
\begin_inset Index ind
status open

\begin_layout Plain Layout
useall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
useall(word, required)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

usesonly(required, word)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il s'agit d'un exemple de plan de développement de programmes appelé 
\emph on
réduction à un problème préalablement résolu
\emph default
.
 Cela signifie que le programmeur identifie le problème sur lequel il travaille
 comme un cas de problème résolu et qu'il applique une solution existante.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reduction@réduction
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Boucles sur les indices
\end_layout

\begin_layout Standard
Les fonctions de la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-10-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ont été écrites avec des boucles 
\color blue
for
\color inherit
 parce que seuls divers caractères des chaînes étaient utiles.
 Il était donc possible de travailler sans les indices.
\begin_inset Index idx
status open

\begin_layout Plain Layout
boucles, indices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour 
\color blue
isabecedarian
\color inherit
, nous devons comparer des lettres adjacentes, ce qui est un peu délicat
 avec une boucle
\color blue
 for
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
isabecedarian
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 isabecedarian(word) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = firstindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

previous = word[i]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = nextind(word, i)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 c
\color green
 in
\color inherit
 word[j
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color green
end
\color inherit
] 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 c < previous 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

previous = c
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une autre possibilité consiste à faire appel à la récursion:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
isabecedarian(word)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if 
\color black
length(word) <= 1
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return true
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = firstindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = nextind(word, i)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color black
 word[i] > word[j]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

isabecedarian(word[j
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color green
end
\color inherit
])
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une option supplémentaire revient à exploiter une boucle 
\color blue
while
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
isabecedarian
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
isabecedarian(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = firstindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = nextind(word, 1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 j <= sizeof(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 word[j] < word[i]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = j
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = nextind(word, i)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La boucle commence à 
\color blue
i = 1
\color inherit
 et 
\color blue
j = nextind(word, 1)
\color inherit
.
 Elle se termine lorsque 
\color blue
j > sizeof(word)
\color inherit
.
 À chaque passage, la boucle compare le 
\color blue
i
\color inherit

\begin_inset script superscript

\begin_layout Plain Layout
ième
\end_layout

\end_inset

 caractère (qui peut être considéré comme le caractère courant) au 
\color blue
j
\color inherit

\begin_inset script superscript

\begin_layout Plain Layout
ième
\end_layout

\end_inset

 caractère (qui est le suivant).
\end_layout

\begin_layout Standard
Si le caractère suivant est inférieur en terme d'ordre alphabétique au caractère
 courant, alors il y a rupture dans le schéma abécédaire.
 En conséquence, le programme retourne 
\color blue
false
\color inherit
.
\end_layout

\begin_layout Standard
Si la fin de la boucle est atteinte sans trouver de rupture, alors le mot
 passe le test.
 Pour se convaincre que la boucle se termine correctement, nous pouvons
 prendre pour exemple 
\begin_inset Quotes cld
\end_inset


\color blue
choux
\color inherit

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
À présent, voici une version d'
\color blue
ispalindrome
\color inherit
 qui utilise deux indices.
 L'un commence au début et croît, l'autre commence à la fin et décroît.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
ispalindrome
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 ispalindrome(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = firstindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = lastindex(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while
\color inherit
 i < j
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if word[i] 
\begin_inset ERT
status open

\begin_layout Plain Layout

!
\backslash
string=
\end_layout

\end_inset

 word[j]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = nextind(word, i)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

j = prevind(word, j)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce cas peut être réduit à un problème préalablement résolu:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 ispalindrome(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

isreverse(word, word)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
isreverse
\color inherit
 a étudiée à la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Débogage-9-13"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
isreverse
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Tester des programmes est une tâche complexe.
 Les fonctions présentées dans ce chapitre sont relativement faciles à tester,
 car les résultats sont vérifiables manuellement.
 Nonobstant cela, il est difficile — voire impossible — de choisir un ensemble
 de mots qui permettent de tester toutes les erreurs possibles.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple avec 
\color blue
hasno_e
\color inherit
, deux cas sont évidents à vérifier: les mots qui ont un 
\color blue
e
\color inherit
 devraient amener le programme à retourner 
\color blue
false
\color inherit
, et les mots qui n'en ont pas devrait forcer le programme à retourner 
\color blue
true
\color inherit
.
 Trouver chacun de ces cas est assez facile.
\end_layout

\begin_layout Standard
Très souvent, existent des sous-cas moins évidents.
 Parmi les mots qui contiennent un 
\begin_inset Quotes cld
\end_inset

e
\begin_inset Quotes crd
\end_inset

, il convient de tester les mots qui ont un 
\begin_inset Quotes cld
\end_inset

e
\begin_inset Quotes crd
\end_inset

 au début, à la fin et quelque part au milieu.
 Cela implique de tester les mots longs, les mots courts et les mots très
 courts, comme la chaîne vide.
 Or, la chaîne vide est un exemple de cas particulier non trivial où des
 erreurs se camouflent souvent.
\end_layout

\begin_layout Standard
En plus des situations de test à traiter manuellement, tester le programme
 avec une liste de mots comme
\color blue
 mots_FR.txt
\color inherit
 est nécessaire.
 En analysant la sortie, il est peut-être possible de détecter des erreurs.
 Attention, toutefois: on court toujours le risque de détecter un type d'erreur
 (des mots qui ne devraient pas être inclus, mais qui le sont) et inversement
 (des mots qui devraient être inclus et qui… ne le sont pas).
\end_layout

\begin_layout Standard
En général, les tests contribuent à trouver des bogues.
 En tout état de cause, il n'est guère facile de produire un bon ensemble
 de tests.
 Même dans ce cas, personne ne peut être sûr à 100
\begin_inset space ~
\end_inset

% que le programme est correct.
 Selon le célèbre informaticien 
\begin_inset CommandInset href
LatexCommand href
name "Edsger W. Dijkstra"
target "https://fr.wikipedia.org/wiki/Edsger_Dijkstra"
literal "false"

\end_inset

: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dijkstra, Edsger W.
\end_layout

\end_inset


\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
bug
\end_layout

\end_inset

 
\end_layout

\begin_layout Quotation

\emph on
Program testing can be used to show the presence of bugs, but never to show
 their absence!
\begin_inset Foot
status open

\begin_layout Plain Layout
Les tests de programmes peuvent être utilisés pour montrer la présence de
 bogues,
\begin_inset Index idx
status open

\begin_layout Plain Layout
bogue
\end_layout

\end_inset

 mais jamais pour montrer leur absence !
\end_layout

\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
flux
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

fichiers valeur qui représente un fichier ouvert, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
flux de fichier
\end_layout

\end_inset


\end_layout

\begin_layout Description
réduction
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

un
\begin_inset space ~
\end_inset

problème
\begin_inset space ~
\end_inset

préalablement
\begin_inset space ~
\end_inset

résolu procédé destiné à résoudre un problème en l'exprimant comme un cas
 de figure déjà résolu, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reduction@réduction
\end_layout

\end_inset


\end_layout

\begin_layout Description
cas
\begin_inset space ~
\end_inset

particulier cas de test atypique ou non trivial (et susceptible de ne pas
 être traité correctement).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cas particulier
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
cas atypique
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 9-7
\end_layout

\begin_layout Standard
Cet exercice est basée sur un casse-tête qui fut diffusé dans l'émission
 de radio 
\begin_inset CommandInset href
LatexCommand href
name "Car Talk"
target "https://www.cartalk.com/puzzler/browse"
literal "false"

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Car Talk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset


\emph on
Donnez-moi un mot avec trois paires de lettres consécutives.
 
\end_layout

\begin_layout Standard

\emph on
Je vous donne deux mots qui se qualifient presque.
 Par exemple, le mot 
\begin_inset Quotes cld
\end_inset

committee
\begin_inset Quotes crd
\end_inset

, c-o-m-m-i-t-t-e-e.
 Ce serait génial, sauf pour le i qui se faufile au milieu.
 Ou 
\begin_inset Quotes cld
\end_inset

Mississippi
\begin_inset Quotes crd
\end_inset

: M-i-s-s-i-s-s-i-p-p-i.
 Si vous pouviez enlever ces i, ce serait parfait.
 Pourtant, il existe un mot qui a trois paires de lettres consécutives et,
 à ma connaissance, c'est peut-être le seul mot.
 Bien sûr, il y en a probablement 500 autres, mais je n'en connais qu'un
 seul.
 Quel est ce mot?
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Écrivez un programme qui résout ce problème.
\end_layout

\begin_layout Subsection*
Exercice 9-8
\end_layout

\begin_layout Standard
Voici un autre casse-tête de l'émission de radio 
\begin_inset CommandInset href
LatexCommand href
name "Car Talk"
target "https://www.cartalk.com/puzzler/browse"
literal "false"

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Car Talk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset


\emph on
L'autre jour, je conduisais sur l'autoroute et, par hasard, j'ai jeté un
 coup d'œil à mon compteur kilométrique.
 Comme la plupart des odomètres, il affiche six chiffres, en kilomètres
 entiers seulement.
 Ainsi, si ma voiture avait par exemple fait 300 000 miles, je verrais 3-0-0-0-0
-0.
\end_layout

\begin_layout Standard

\emph on
Ce que j'ai vu ce jour-là était très intéressant.
 J'ai remarqué que les quatre derniers chiffres étaient palindromiques,
 c'est-à-dire qu'ils lisaient de la même façon en avant et en arrière.
 Par exemple, 5-4-4-5 est un palindrome.
 Donc, mon odomètre aurait pu afficher 3-1-5-4-4-5.
\end_layout

\begin_layout Standard

\emph on
Un kilomètre plus tard, les 5 derniers chiffres étaient palindromiques.
 Par exemple, il aurait pu lire 3-6-5-4-5-6.
 Un kilomètre plus loin, les 4 chiffres du milieu sur 6 étaient palindromiques.
 Vous êtes prêt? Un kilomètre plus tard, les 6 chiffres formaient un palindrome!
\end_layout

\begin_layout Standard

\emph on
La question est de savoir ce qui était inscrit sur l'odomètre quand je l'ai
 regardé la première fois.
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Rédigez un programme Julia qui teste tous les nombres à six chiffres et
 qui affiche tous les nombres répondant aux exigences du casse-tête.
\end_layout

\begin_layout Subsection*
Exercice 9-9
\end_layout

\begin_layout Standard
Voici un dernier casse-tête de 
\begin_inset CommandInset href
LatexCommand href
name "Car Talk"
target "https://www.cartalk.com/puzzler/browse"
literal "false"

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Car Talk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset


\emph on
Récemment, j'ai eu la visite de ma mère.
 Nous avons réalisé que les deux chiffres qui composent mon âge, lorsqu'ils
 sont inversés, donnent son âge.
 Par exemple, si elle est âgée de 73 ans, j'ai 37 ans.
 Nous nous sommes demandées combien de fois cela s'était produit au fil
 des ans, mais nous nous sommes laissées distraire par d'autres sujets et
 nous n'avons jamais trouvé de réponse.
\end_layout

\begin_layout Standard

\emph on
En rentrant chez moi, je me suis rendu compte que les chiffres de notre
 âge ont été réversibles six fois jusqu'à présent.
 J'ai aussi compris que si nous avons de la chance, cela se reproduirait
 dans quelques années, et si nous avons vraiment de la chance, cela se reproduir
ait encore une fois après.
 En d'autres termes, cela se produirait 8 fois en tout.
 La question est donc de savoir quel âge j'ai maintenant?
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Écrivez un programme Julia qui cherche des solutions à cette énigme.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
lpad()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

La fonction 
\backslash
textcolor{blue}{lpad} pourrait vous être utile.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Tableaux"

\end_inset

Tableaux
\end_layout

\begin_layout Standard
Ce chapitre présente un des types intégrés les plus utiles de Julia: les
 tableaux.
 Nous allons apprendre également ce qu'est un objet et ce qui se produit
 éventuellement lorsque plusieurs noms désignent le même objet.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau
\end_layout

\end_inset


\end_layout

\begin_layout Section
Un tableau est une séquence
\end_layout

\begin_layout Standard
À l'instar d'une chaîne de caractères, un 
\emph on
tableau
\emph default
 est une séquence de valeurs.
 Dans une chaîne, les valeurs sont des caractères.
 Dans un tableau, elles peuvent être de n'importe quel type.
 Les valeurs d'un tableau sont appelées des 
\emph on
éléments
\emph default
 (ou parfois des 
\emph on
items
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence, tableau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
element@élément, tableau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
item, tableau
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il existe plusieurs façons de créer un nouveau tableau.
 La plus simple consiste à mettre les éléments entre crochets [ ]: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 [10, 20, 30, 40]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4-element Array{Int64,1}
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

10
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

20
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

30
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

40
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 [
\color brown
"ici"
\color inherit
, 
\color brown
"là"
\color inherit
, 
\color brown
"encore"
\color inherit
, 
\color brown
"déjà"
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
[
\color brown
"spam"
\color inherit
, 2.0, 5, [10, 20]]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La deuxième ligne du dernier encadré illustre un cas de tableau 
\emph on
imbriqué
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau imbriqué
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un tableau qui ne contient aucun élément est dit 
\begin_inset Quotes cld
\end_inset

vide
\begin_inset Quotes crd
\end_inset

.
 Il est possible d'en créer un avec des crochets sans contenu 
\color blue
[
\begin_inset space ~
\end_inset

]
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau vide
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comme on peut s'y attendre, il est possible d'affecter des tableaux à des
 variables:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fromages = [
\color brown
"Maroilles"
\color inherit
, 
\color brown
"Beaufort"
\color inherit
, 
\color brown
"Ossau-iraty"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
nombres = [42, 123
\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
vide = [
\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(fromages, 
\color brown
" "
\color inherit
, nombres,
\color brown
 " "
\color inherit
, vide)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
["Maroilles", "Beaufort", "Ossau-iraty"] [42, 123] Any[]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
typeof
\color inherit
 permet de connaître le type d'un tableau: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
typeof()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(fromages)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Array{String,1}
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
typeof(nombres)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Array{Int64,1}
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
typeof(vide)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Array{Any,1}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Entre les accolades, se trouvent le type et un nombre.
 Ce nombre indique les dimensions du tableau (un tableau simple a une seule
 dimension; un tableau bidimensionnel ou matrice, deux, etc.).
 Le tableau 
\color blue
vide
\color inherit
 contient des valeurs de type 
\color blue
Any
\color inherit
, c'est-à-dire qu'il peut contenir des valeurs de tout type.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, dimension
\end_layout

\end_inset


\end_layout

\begin_layout Section
Les tableaux sont non persistants
\end_layout

\begin_layout Standard
La syntaxe pour accéder aux éléments d'un tableau est la même que celle
 permettant d'accéder aux caractères d'une chaîne: il convient d'utiliser
 l'opérateur
\color blue
 [ ]
\color inherit
.
 L'expression à l'intérieur des parenthèses spécifie l'indice.
 Pour rappel, en Julia, les indices commencent à 1 comme indiqué dans la
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Tableaux-et-indices."
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, non-persistance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/tableau_alpha.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tableaux-et-indices."

\end_inset

Tableau nommé alpha et ses indices.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple:
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, indice
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fromages[1] 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Maroilles
\begin_inset Quotes qrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 alpha =
\color green
 
\color inherit
[
\color brown
"spam"
\color inherit
, 2.0, 5, [10, 20]]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 alpha[4][2]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
20
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Contrairement aux chaînes, les tableaux sont non persistants (c'est-à-dire
 qu'ils sont modifiables).
 Lorsque l'opérateur 
\color blue
[
\begin_inset space ~
\end_inset

]
\color inherit
 apparaît à gauche d'une affectation, il identifie l'élément du tableau
 concerné par cette dernière: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 nombres[2] = 5
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(nombres)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[42, 5]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Alors qu'il était auparavant égal à 123, le second élément de 
\color blue
nombres
\color inherit
 vaut désormais 5.
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrammes-d'état-pour-3-tableaux-élémentaires"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre les diagrammes d'état pour 
\color blue
fromages
\color inherit
, 
\color blue
nombres
\color inherit
 et 
\color blue
vide
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, diagramme d'état
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-fromages-nombres-vide-inkscape.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrammes-d'état-pour-3-tableaux-élémentaires"

\end_inset

Diagrammes d'état pour 3 tableaux élémentaires.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les tableaux sont représentés par des cases contenant les éléments et les
 indices.
 
\color blue
fromages
\color inherit
 fait référence à un tableau avec trois éléments indicés 
\color blue
1
\color inherit
, 
\color blue
2
\color inherit
 et 
\color blue
3
\color inherit
.
 Le tableau
\color blue
 nombres
\color inherit
 contient deux éléments.
 Le diagramme montre que la valeur du deuxième élément a été réaffectée
 de 
\color blue
123
\color inherit
 à 
\color blue
5
\color inherit
.
 Quant à lui, 
\color blue
vide
\color inherit
 fait référence à un tableau sans élément.
\end_layout

\begin_layout Standard
Les indices de tableau fonctionnent de la même manière que ceux des chaînes
 (mais sans les mises en garde UTF-8):
\end_layout

\begin_layout Itemize
Toute expression entière peut être utilisée comme un indice.
 Par exemple, 
\color blue
alpha[1+1]
\color inherit
 retourne 
\color blue
2.0
\color inherit
.
\end_layout

\begin_layout Itemize
Si vous essayez de lire ou d'écrire un élément qui n'existe pas, vous obtenez
 une 
\color blue
BoundsError
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
BoundsError
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Le mot-clé 
\color blue
end
\color inherit
 pointe vers le dernier indice d'un tableau.
\end_layout

\begin_layout Standard
L'opérateur 
\color blue
∈
\color inherit
 fonctionne également sur les tableaux: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
in$}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"Ossau-iraty"
\color inherit
 ∈ fromages
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"Brie"
\color inherit
 
\color green
in
\color inherit
 fromages
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Parcourir un tableau
\end_layout

\begin_layout Standard
Avant de parcourir un tableau, il est utile de voir comment déterminer le
 nombre d'éléments qui le constituent en utilisant la fonction 
\color blue
length
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
length, tableau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, traversée
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
parcourir un tableau
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 length(nombres)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 length(alpha)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Bien qu'un tableau puisse en contenir un autre (comme c'est le cas pour
 
\color blue
alpha
\color inherit
), le tableau imbriqué compte toujours comme un élément unique.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau imbriqué
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La manière la plus courante de parcourir les éléments d'un tableau consiste
 à utiliser une boucle 
\color blue
for
\color inherit
.
 La syntaxe est la même que pour les chaînes de caractères: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 fromage 
\color green
in
\color inherit
 fromages
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(fromage)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela ne fonctionne bien que quand il suffit de lire les éléments du tableau.
 S'il est nécessaire d'en ajouter, d'en retirer ou d'en mettre à jour, il
 faut manipuler les indices.
 Une façon courante de procéder repose sur l'usage de la fonction interne
 
\color blue
eachindex
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
eachindex()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 i 
\color green
in
\color inherit
 eachindex(nombres)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

nombres[i] = nombres[i] * 2
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette boucle 
\color blue
for
\color inherit
 parcourt le tableau et met à jour chaque élément.
 Chaque fois que la boucle est parcourue, nous obtenons l'indice de l'élément
 suivant.
 L'instruction d'affectation dans le corps utilise 
\color blue
i
\color inherit
 pour lire l'ancienne valeur de l'élément et pour affecter la nouvelle valeur.
\end_layout

\begin_layout Standard
Une boucle 
\color blue
for
\color inherit
 sur un tableau vide
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau vide
\end_layout

\end_inset

 ne fait jamais tourner le corps de cette boucle: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 x 
\color green
in
\color inherit
 []
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Ceci n'arrivera pas!"
\color inherit
 )
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Segments de tableau
\end_layout

\begin_layout Standard
L'opérateur de segmentation fonctionne également avec les tableaux: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, segment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 f
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t[1
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
3])
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t[3
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
end])
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle 
\end_layout

\end_inset

c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color black
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 f
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur de segmentation
\color blue
 [
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\size default
] 
\color inherit
effectue une copie de l'ensemble du tableau:
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, copie de
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t[
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
])
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 f
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les tableaux étant non persistants, il est souvent utile d'en faire une
 copie avant d'effectuer des opérations qui les modifient.
\end_layout

\begin_layout Standard
Un opérateur de segmentation sur le côté gauche d'une affectation peut mettre
 à jour plusieurs éléments d'un coup: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau, segmentation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t[2
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
3] =
\color black
 [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 f
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Bibliothèque de fonctions associées aux tableaux
\end_layout

\begin_layout Standard
Plusieurs fonctions internes de Julia sont conçues pour agir sur les tableaux.
 Par exemple, 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 ajoute un nouvel élément à la fin d'un tableau: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableaux, bibliothèque
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = 
\color black
[
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

)
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
appen
\begin_inset ERT
status open

\begin_layout Plain Layout

d
\backslash
string!
\end_layout

\end_inset


\color inherit
 ajoute des éléments d'un second tableau à la fin d'un premier: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{append
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t1= 
\color black
[
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t2= 
\color black
[
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 append
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t1, t2)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il doit être noté que 
\color blue
t2
\color inherit
 n'est pas modifié au cours de cette opération.
\end_layout

\begin_layout Standard
La fonction 
\color blue
sor
\begin_inset ERT
status open

\begin_layout Plain Layout

t
\backslash
string!
\end_layout

\end_inset

 
\color inherit
organise les éléments du tableau dans l'ordre croissant (ou alphabétique):
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{sort
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = 
\color black
[
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
sor
\color inherit
t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color black
(t)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
sort
\color inherit
 retourne une copie des éléments du tableau dans l'ordre: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sort()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t1 = 
\color black
[
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset ERT
status open

\begin_layout Plain Layout

]
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
t2 = sort(t1
\begin_inset ERT
status open

\begin_layout Plain Layout

)
\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,
\color brown
 
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
newtheorem*{tip2}{Note}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip2}
\end_layout

\begin_layout Plain Layout

Par convention syntaxique, dans Julia, 
\backslash
textcolor{blue}{!} est associé aux noms des fonctions qui modifient leurs
 arguments.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip2}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mise en correspondance (
\emph on
mapping
\emph default
), filtre et réduction
\end_layout

\begin_layout Standard
Pour additionner tous les nombres d'un tableau, une boucle comme celle-ci
 est utilisable: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapping
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
filtre
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reduction@réduction
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
addall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 addall(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total = 0
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color inherit
 x 
\color green
in
\color inherit
 t
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total += x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La variable locale 
\color blue
total
\color inherit
 est initialisée à 0.
 À chaque passage dans la boucle 
\color blue
for
\color inherit
, 
\color blue
+=
\color inherit
 extrait
\begin_inset Index idx
status open

\begin_layout Plain Layout
+=
\end_layout

\end_inset

 un élément du tableau et l'ajoute à 
\color blue
total
\color inherit
.
 L'opérateur 
\color blue
+=
\color inherit
 constitue un raccourci pour mettre à jour une variable.
 Cette 
\emph on
déclaration d'affectation avec incrémentation
\emph default
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
incrémentation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
total += x
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
équivaut à:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
total = total + x
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À chaque passage dans la boucle, 
\color blue
total
\color inherit
 accumule la somme des éléments.
 Une variable utilisée de cette façon est appelée un 
\emph on
accumulateur
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
accumulateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'addition des éléments d'un tableau est une opération si courante que Julia
 fournit la fonction interne 
\color blue
sum
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t= [1, 2, 3, 4]
\end_layout

\begin_layout Plain Layout

\size small
sum(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une opération de ce type qui combine une séquence d'éléments en une seule
 valeur s'appelle une 
\emph on
opération de réduction
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
opération de réduction
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reduction@réduction, opération de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Souvent, il faut parcourir un tableau tout en en construisant un autre.
 Par exemple, la fonction suivante prend un tableau de chaînes de caractères
 et retourne un nouveau tableau qui contient les chaînes en majuscules:
\begin_inset Index ind
status open

\begin_layout Plain Layout
capitalizeall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 capitalizeall(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res = []
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color inherit
 s 
\color green
in
\color inherit
 t
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(res, uppercase(s))
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color black
La variable 
\color blue
res
\color inherit
 est initialisé avec un tableau vide.
 À chaque passage par la boucle, l'élément suivant est ajouté à 
\color blue
res
\color inherit
 qui, en conséquence, constitue un autre type d'
\emph on
accu\SpecialChar softhyphen
mulateur
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
accumulateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'opération qu'effectue 
\color blue
capitalizeall
\color inherit
 est parfois appelée 
\emph on
mapping
\emph default
 parce que cette fonction effectue une 
\begin_inset Quotes cld
\end_inset

mise en correspondance
\begin_inset Quotes crd
\end_inset

 sur chacun des éléments d'une séquence (en l'occurrence avec une conversion
 en majuscules).
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapping
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mise en correspondance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une autre opération courante consiste à sélectionner certains des éléments
 d'un tableau et à retourner un sous-tableau.
 Par exemple, la fonction suivante prend un tableau de chaînes de caractères
 et retourne un tableau qui ne contient que les chaînes en majuscules:
\begin_inset Index ind
status open

\begin_layout Plain Layout
onlyupper
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 onlyupper(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res = []
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for
\color inherit
 s 
\color green
in
\color inherit
 t
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 s == uppercase(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(res, s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une fonction comme 
\color blue
onlyupper
\color inherit
 agit tel un 
\emph on
filtre
\emph default
 puisqu'elle opère sélectivement sur certains éléments.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
filtre
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La plupart des opérations courantes sur les tableaux peuvent être exprimées
 comme une combinaison de 
\begin_inset Quotes cld
\end_inset

mise en correspondance
\begin_inset Quotes crd
\end_inset

 (
\emph on
mapping
\emph default
), de filtrage et de réduction.
 
\end_layout

\begin_layout Section
Syntaxe avec points
\end_layout

\begin_layout Standard
Pour chaque opérateur binaire tel que 
\color blue
^
\color inherit
, il y a un opérateur pointé correspondant 
\color blue
.^
\color inherit
 automatiquement défini pour effectuer 
\emph on
distributivement
\emph default
 
\color blue
^
\color inherit
 élément par élément sur les tableaux.
 Par exemple, 
\color blue
[1, 2, 3] ^ 3
\color inherit
 n'est pas défini, mais 
\color blue
[1, 2, 3] .^ 3
\color inherit
 est défini comme le calcul du résultat élément par élément
\color blue
 [1^3, 2^3, 3^3]
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
distributivité
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur, distributivité
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction, distributivité
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur point 
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dot, opérateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
print([1, 2, 3]
\begin_inset space ~
\end_inset

.^ 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[1, 8, 27]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans Julia, toute fonction 
\color blue
f 
\color inherit
peut être appliquée de manière distribuée à tout tableau.
 Par exemple, pour mettre en majuscule un tableau de chaînes de caractères,
 nous n'avons pas besoin d'une boucle explicite: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = uppercase.([
\color brown
"abc"
\color black
, 
\color brown
"def"
\color black
, 
\color brown
"ghi"
\color black
]);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 
\size small
print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
["ABC", "DEF", "GHI"]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
C'est une façon élégante de créer un 
\emph on
mapping
\emph default
.
 La fonction 
\color blue
capitalizeall
\color inherit
 peut être mise en œuvre en une seule ligne:
\begin_inset Index ind
status open

\begin_layout Plain Layout
capitalizeall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color black
capitalizeall(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

uppercase.(t)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Suppression et insertion d'éléments
\end_layout

\begin_layout Standard
Il existe plusieurs façons de supprimer des éléments appartenant à un tableau.
 Si l'indice de l'élément à supprimer est connu, la fonction 
\color blue
splice
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 est utilisable: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
suppression
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
insertion
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{splice
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 splice
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, 2)
\end_layout

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small
b
\size default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0062 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
splice
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 modifie le tableau et retourne l'élément supprimé.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{splice
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color blue
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 supprime le dernier élément d'un tableau et le retourne: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{pop
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t)
\end_layout

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small
c
\size default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0063 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color lightgray
 
\size default
print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
popfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 supprime le premier élément et le retourne: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{popfirst
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 popfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t)
\end_layout

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small
a
\size default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0061 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les fonctions 
\color blue
pushfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 et 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 insèrent un élément au début et à la fin d'un tableau, respectivement.
\end_layout

\begin_layout Standard
Si vous n'avez pas besoin de la valeur supprimée, vous pouvez tirer profit
 de la fonction 
\color blue
deleteat
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{pushfirst
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{deleteat
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(deleteat
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, 2))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
insert
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 insère un élément à un indice donné: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{insert
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(insert
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, 2, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Tableaux et chaînes
\end_layout

\begin_layout Standard
Une chaîne est une séquence de caractères alors qu'un tableau est une séquence
 de valeurs.
 Ceci dit, un tableau de caractères n'est pas une chaîne.
 Pour convertir une chaîne de caractères en un tableau de caractères, il
 convient d'employer la fonction 
\color blue
collect
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
collect()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = collect(
\color brown
"spam"
\color black
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 s
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 p
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 m
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
collect 
\color inherit
permet de décomposer une chaîne ou une autre séquence en éléments individuels.
\end_layout

\begin_layout Standard
Si vous souhaitez décomposer une chaîne de caractères en mots, vous pouvez
 utiliser la fonction 
\color blue
split
\color inherit
:
\begin_inset Foot
status open

\begin_layout Plain Layout
Le vers est extrait du poème 
\begin_inset Quotes cld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Clair de lune"
target "https://fr.wikipedia.org/wiki/Clair_de_lune_(po%C3%A8me_de_Verlaine)"
literal "false"

\end_inset


\begin_inset Quotes crd
\end_inset

 de Paul Verlaine
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
Verlaine, Paul
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = split(
\color brown
"Au calme clair de lune triste et beau"
\color black
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
SubString{String}["Au", "calme", "clair", "de", "lune", "triste", "et",
 "beau"]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un 
\emph on
délimiteur
\emph default
 (qui constitue un 
\emph on
argument optionnel
\emph default
) précise le(s) caractère(s) à utiliser pour détacher les mots les uns des
 autres.
 L'exemple suivant utilise un trait d'union comme délimiteur: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
delimiteur@délimiteur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = split(
\color brown
"spam-spam-spam"
\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 -
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
SubString{String}["spam", "spam", "spam"]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
join
\color inherit
 effectue l'opération inverse de 
\color blue
split
\color inherit
.
 Elle prend un ensemble de chaînes de caractères et concatène les éléments:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
join()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
split()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t = [
\color brown
"Au"
\color black
,
\color brown
 "calme"
\color black
,
\color brown
 "clair"
\color black
,
\color brown
 "de"
\color black
,
\color brown
 "lune"
\color black
,
\color brown
 "triste"
\color black
,
\color brown
 "et"
\color black
,
\color brown
 "beau"
\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 s = join(t,
\color black
 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Au calme clair de lune triste et beau"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, le délimiteur est un caractère d'espacement.
 Pour concaténer des chaînes de caractères sans espace(s), il convient de
 ne pas spécifier de délimiteur.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Objets-et-valeurs"

\end_inset

Objets et valeurs
\end_layout

\begin_layout Standard
Un objet est une structure de données à laquelle une variable peut se référer.
 Jusqu'à présent, vous pouviez utiliser indifféremment les termes 
\begin_inset Quotes cld
\end_inset

objet
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

valeur
\begin_inset Quotes crd
\end_inset

, qui constituent des séquences informatiques.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, structure de données
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si les déclarations d'affectation sont effectuées ainsi:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
a = 
\color brown
"banane"
\end_layout

\begin_layout Plain Layout

\size small
b = 
\color brown
"banane"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
il est clair que 
\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 font tous deux référence à une chaîne de caractères.
 Cependant, 
\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 font-elles référence à la même chaîne? Il existe deux états possibles illustrés
 dans la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-–notion-objet"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état-notion-objet-A-inkscape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:a-et-b-pointent-vers-2-objets"

\end_inset


\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 pointent vers deux objets différents.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état-notion-objet-B-inkscape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:a-et-b-pointent-vers-le-même-objet"

\end_inset


\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
 pointent vers le même objet.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-–notion-objet"

\end_inset

Diagramme d'état et notion d'objets
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour vérifier si deux variables désigne le même objet, il faut utiliser
 l'opérateur 
\begin_inset Formula $\equiv$
\end_inset

 (
\color blue

\backslash
equiv TAB
\color inherit
) ou 
\color blue
===
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, diagramme d'état
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
equiv$}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
===
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 a = 
\color brown
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 b = 
\color brown
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
a ≡ b
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple, Julia n'a créé qu'un seul objet 
\begin_inset Quotes cld
\end_inset

chaîne de caractères
\begin_inset Quotes crd
\end_inset

.
 Nous avons donc affaire au cas représenté à la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:a-et-b-pointent-vers-le-même-objet"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard

\emph on
A contrario
\emph default
, lorsque deux tableaux sont instanciés, nous sommes confrontés à deux objets:
\begin_inset Index idx
status open

\begin_layout Plain Layout
instanciation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 a = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 b =
\color black
 [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
a ≡ b
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, les deux tableaux sont équivalents parce qu'ils contiennent
 les mêmes éléments.
 Toutefois, ils ne sont pas identiques parce qu'ils ne représentent pas
 le même objet.
 Ce cas est illustré dans le diagramme d'état de la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-pour-deux-tab-équival-non-identiques"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
equivalence@équivalence
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
identité
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
equivalence@équivalence, non-identité
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état-pour-2-tableaux-non-identiques-inkscape.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-pour-deux-tab-équival-non-identiques"

\end_inset

Diagramme d'état pour 2 tableaux équivalents mais non-identiques.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si deux objets sont identiques, ils sont forcément équivalents, mais, s'ils
 sont équivalents, ils ne sont pas nécessairement identiques.
\end_layout

\begin_layout Standard
Pour être précis, un objet a une valeur.
 Si nous évaluons 
\color blue
[1, 2, 3]
\color inherit
, nous obtenons un tableau d'objets dont la valeur est une séquence d'entiers.
 Si un autre tableau a les mêmes éléments, on dit qu'il a la même valeur,
 mais il ne s'agit pas du même objet.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Aliasing"

\end_inset


\emph on
Aliasing
\begin_inset Foot
status open

\begin_layout Plain Layout
La traduction exacte devrait être pseudonymie.
 Cependant, alias (c'est-à-dire pseudo ou pseudonyme) et aliasing sont des
 termes consacrés.
 En informatique, s'agissant de personnes, il est également fréquent de
 trouver l'acronyme 
\emph on
aka
\emph default
 pour
\emph on
 also known as
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si 
\color blue
a
\color inherit
 se rapporte à un objet et que nous effectuons l'affectation 
\color blue
b = a
\color inherit
, alors les deux variables se rapportent au même objet:
\begin_inset Index idx
status open

\begin_layout Plain Layout
aliasing
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
aka
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudonymie
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
alias
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudo, pseudonyme
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 a = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 b =
\color black
 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
a ≡ b
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le diagramme d'état lié à cette situation est donné à la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-pour-2-alias"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état-pour-2-tableaux-inkscape.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-pour-2-alias"

\end_inset

Diagramme d'état pour deux alias.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'association d'une variable à un objet est un 
\emph on
référencement
\emph default
.
 Dans cet exemple, il y a deux 
\emph on
références
\emph default
 au même objet, symbolisées par les deux flèches.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
referencement@référencement
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reference@référence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un objet ayant plus d'une référence possède plus d'un nom, on dit donc que
 l'objet est 
\emph on
aliasé
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet aliasé
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si l'objet 
\emph on
aliasé
\emph default
 est non persistant, les modifications apportées à un alias affectent l'autre:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 b[1] = 42
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
42
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(a)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[42, 2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Bien que ce comportement puisse être utile, il est sujet à des erreurs.
 En général, il est plus sûr d'éviter les alias lorsque sont traités des
 objets non persistants.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En revanche, pour les objets persistants comme les chaînes de caractères,
 l'
\emph on
aliasing
\emph default
 ne constitue pas un véritable problème.
 Dans cet exemple (qui se réfère à la sous-figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:a-et-b-pointent-vers-2-objets"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\begin_inset Index idx
status open

\begin_layout Plain Layout
aliasing, persistance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
a = 
\color brown
"banane"
\end_layout

\begin_layout Plain Layout

\size small
\color black
b = 
\color brown
"banane"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
travailler sur 
\color blue
a
\color inherit
 n'affecte pas 
\color blue
b
\color inherit
.
 
\end_layout

\begin_layout Section
Tableaux en tant qu'argument
\end_layout

\begin_layout Standard
Lorsqu'un tableau est passé en argument à une fonction, la fonction acquiert
 une référence au tableau, puisqu'elle y accède.
 Si la fonction modifie le tableau, l'appelant perçoit le changement.
 Par exemple, 
\color blue
deletehead
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 supprime le premier élément d'un tableau: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{deletehead
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
deletehead
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 deletehead
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

popfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un exemple: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{popfirst
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 letters = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
deletehead
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(letters)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(letters)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le paramètre 
\color blue
t
\color inherit
 et la variable 
\color blue
letters
\color inherit
 sont des alias pour le même objet.
 Le diagramme de pile est donné à la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-de-pile-tableau-passé-à-fonction"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de pile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état-tableau-passé-fct-inskape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-de-pile-tableau-passé-à-fonction"

\end_inset

Diagramme de pile dans le cas d'un tableau passé en argument à une fonction.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lorsque 
\color blue
letters
\color inherit
 est passé à
\color blue
 t
\color inherit
, les deux variables (l'une globale,
\color blue
 letters
\color inherit
, et l'autre locale, 
\color blue
t
\color inherit
) se réfèrent au même tableau.
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable locale
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
variable globale
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
locale, variable
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
globale, variable
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est important de distinguer les opérations qui modifient les tableaux
 et celles qui en créent de nouveaux.
 Par exemple, 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 modifie un tableau alors que 
\color blue
vcat
\color inherit
 en crée un nouveau.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
vcat()
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici un exemple d'utilisation de 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t1 = [1, 2]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
t2 = push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t1,3)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color black
En l'espèce,
\color blue
 t2
\color inherit
 est un alias de 
\color blue
t1
\color inherit
.
\end_layout

\begin_layout Standard
À présent, voici un exemple d'utilisation de la fonction 
\color blue
vcat
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t3 = vcat(t1, [4])
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t3 = vcat(t1, [4])
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 4
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat de 
\color blue
vcat 
\color inherit
est un nouveau tableau.
 Le tableau original est inchangé.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
vcat()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cette différence est importante lorsque sont rédigées des fonctions censées
 modifier des tableaux.
\end_layout

\begin_layout Standard
Par exemple, cette fonction 
\size small
\color blue
baddeletehead
\size default
\color inherit
 
\emph on
ne supprime pas
\emph default
 le premier élément d'un tableau: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
baddeletehead
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 baddeletehead(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = t[2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color green
end
\color inherit
]
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# erroné
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur de segmentation
\begin_inset Index idx
status open

\begin_layout Plain Layout
segmentation
\end_layout

\end_inset

 crée un nouveau tableau et l'affectation y fait référence, mais cela n'altère
 pas l'argument de la fonction 
\color blue
baddeletehead
\color inherit
 en lui-même.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t4 = baddeletehead(t3)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 4
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t4)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 4
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au début de 
\color blue
baddeletehead
\color inherit
, 
\color blue
t
\color inherit
 et 
\color blue
t3
\color inherit
 font référence au même tableau.
 À la fin, 
\color blue
t
\color inherit
 fait référence à un nouveau tableau, mais 
\color blue
t3
\color inherit
 pointe toujours vers le tableau original, non modifié.
\end_layout

\begin_layout Standard
Une autre manière de procéder consiste à écrire une fonction qui crée et
 retourne un nouveau tableau.
 Par exemple, 
\color blue
tail
\color inherit
 retourne tout sauf le premier élément d'un tableau:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 tail(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t[2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color green
end
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fonction ne modifie pas le tableau original.
 Voici comment elle est utilisée:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 letters = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color lightgray
 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color lightgray
 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 rest = tail(letters)
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(rest)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Une utilisation imprudente des tableaux (et des autres objets non persistants)
 peut entraîner de longues heures de débogage.
 Voici quelques pièges courants et les moyens de les éviter:
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
La plupart des fonctions agissant sur les tableaux modifient ces derniers.
 Cette caractéristique les oppose aux fonctions traitant les chaînes de
 caractères, qui retournent une nouvelle chaîne de caractères et laissent
 l'original intact.
\begin_inset Newline newline
\end_inset

Si vous avez l'habitude d'écrire du code de type chaîne de caractères de
 cette façon:
\begin_inset Newline newline
\end_inset


\begin_inset VSpace bigskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
new_word = strip(word)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset

Il est tentant d'écrire un code de tableau comme celui-ci:
\begin_inset Newline newline
\end_inset


\begin_inset VSpace bigskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
t2 = sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset

Parce que 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 retourne le tableau original modifié 
\color blue
t1
\color inherit
, 
\color blue
t2
\color inherit
 est un alias de 
\color blue
t1
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{sort
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Avant d'utiliser les fonctions et les opérateurs agissant sur les tableaux,
 il est vivement recommandé de lire attentivement la documentation et de
 tester ces fonctions en mode interactif.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Il est recommandé de choisir une manière de faire et de s'y tenir.
\begin_inset Newline newline
\end_inset

Une partie du problème avec les tableaux provient du grand nombre de techniques
 utilisables.
 Par exemple, pour supprimer un élément d'un tableau, il est concevable
 utiliser 
\color blue
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, 
\color blue
popfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, 
\color blue
delete_at
\color inherit
 ou même l'affectation d'un segment extrait du tableau.
 Pour ajouter un élément, il est possible de tirer parti de 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, 
\color blue
pushfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, 
\color blue
insert
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 ou 
\color blue
vcat
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{pop
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{popfirst
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{pushfirst
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{insert
\begin_inset Quotes cld
\end_inset

!()}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
vcat()
\end_layout

\end_inset

 En supposant que
\color blue
 t
\color inherit
 soit un tableau et 
\color blue
x
\color inherit
 un élément de ce tableau, ces méthodes sont correctes:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
insert
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, 4, x)
\end_layout

\begin_layout Plain Layout

\size small
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, x)
\end_layout

\begin_layout Plain Layout

\size small
append
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, [x])
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Alors que celles-ci sont erronées:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
insert
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, 4, [x])
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# erroné
\end_layout

\begin_layout Plain Layout

\size small
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, [x])
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# erroné 
\end_layout

\begin_layout Plain Layout

\size small
vcat(t, [x])
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# erroné
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
Il est fortement préconisé d'effectuer des copies pour éviter les alias.
\begin_inset Newline newline
\end_inset

Lors de l'utilisation d'une fonction comme 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{string
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\color inherit
 qui modifie l'argument, alors qu'il s'avère nécessaire de conserver également
 le tableau original, une copie devrait être créée:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [3, 1, 2]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t2 = t[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# t2 = copy(t)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t2)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[3, 1, 2]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
print(t2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[1, 2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Dans cet exemple, il est judicieux de tirer avantage de la fonction intégrée
 
\color blue
sort
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
sort()
\end_layout

\end_inset

 qui retourne un nouveau tableau trié tout en laissant intact l'original:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="105mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t2)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[3, 1, 2]
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
println(t2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[1, 2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
tableau séquence de valeurs, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau
\end_layout

\end_inset


\end_layout

\begin_layout Description
élément
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset

item) une des valeurs d'un tableau (ou de toute autre séquence, comme une
 matrice).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
element@élément
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
item
\end_layout

\end_inset


\end_layout

\begin_layout Description
tableau
\begin_inset space ~
\end_inset

imbriqué tableau constituant un élément d'un autre tableau, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau imbriqué
\end_layout

\end_inset


\end_layout

\begin_layout Description
accumulateur variable utilisée dans une boucle pour additionner (c'est-à-dire
 accumuler) un résultat, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
accumulateur
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration
\begin_inset space ~
\end_inset

d'affectation
\begin_inset space ~
\end_inset

incrémentée déclaration qui met à jour la valeur d'une variable en utilisant
 un opérateur comme 
\color blue
=
\color inherit
 (par exemple, 
\color blue
+=
\color inherit
), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
incrémentation
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérateur
\begin_inset space ~
\end_inset

point
\begin_inset space ~
\end_inset

(
\emph on
dot
\emph default
) opérateur binaire qui est appliqué élément par élément à des tableaux,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur point
\end_layout

\end_inset


\end_layout

\begin_layout Description
syntaxe
\begin_inset space ~
\end_inset

avec
\begin_inset space ~
\end_inset


\emph on
dot
\emph default
 syntaxe utilisée pour appliquer une fonction par élément à un tableau quelconqu
e, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
point, syntaxe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dot, syntaxe
\end_layout

\end_inset


\end_layout

\begin_layout Description
opération
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

réduction modèle de traitement qui parcourt un tableau et accumule les éléments
 en un seul résultat, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reduction@réduction
\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
mapping
\emph default

\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset

mise
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

correspondance) modèle de traitement qui parcourt un tableau et effectue
 une opération sur chaque élément, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapping
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mise en correspondance
\end_layout

\end_inset


\end_layout

\begin_layout Description
filtre modèle de traitement qui parcourt un tableau et sélectionne les éléments
 qui satisfont à un critère donné, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
filtre
\end_layout

\end_inset


\end_layout

\begin_layout Description
objet composant auquel une variable peut se référer.
 Tout objet a un type et une valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet
\end_layout

\end_inset


\end_layout

\begin_layout Description
équivalence propriété qu'ont deux séquences (par exemple des tableaux) à
 posséder les mêmes éléments de deux objets différents, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
equivalence@équivalence
\end_layout

\end_inset


\end_layout

\begin_layout Description
identité propriété qu'ont deux séquences (par exemple des tableaux) à désigner
 le même objet (ce qui implique 
\emph on
a minima
\emph default
 une équivalence), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
identité
\end_layout

\end_inset


\end_layout

\begin_layout Description
référence association entre une variable et sa valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reference@référence
\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
aliasing
\emph default
 cas de pseudonymie où deux ou plusieurs variables se réfèrent au même objet,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
aliasing
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudonymie
\end_layout

\end_inset


\end_layout

\begin_layout Description
arguments
\begin_inset space ~
\end_inset

facultatifs arguments figurant dans une fonction mais dont l'usage n'est
 pas toujours nécessaire, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument facultatif
\end_layout

\end_inset


\end_layout

\begin_layout Description
délimiteur caractère ou chaîne de caractères utilisés pour indiquer l'endroit
 où une chaîne doit être démariée du reste de la chaîne.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
delimiteur@délimiteur
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 10-1
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
nestedsum
\color inherit
 qui prend un tableau contenant des tableaux d'entiers et additionne les
 éléments de tous les tableaux imbriqués.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
nestedsum
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [[1, 2], [3], [4, 5, 6]]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 nestedsum(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
21
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice11-15-2"

\end_inset

Exercice 10-2
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
cumulsum
\color inherit
 qui prend un tableau de nombres et retourne la somme cumulée; c'est-à-dire
 un nouveau tableau où le
\emph on
 i
\emph default

\begin_inset script superscript

\begin_layout Plain Layout
ième
\end_layout

\end_inset

 élément est la somme des
\color blue
 
\emph on
\color black
i
\emph default
\color inherit
 premiers éléments du tableau original.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
cumulsum
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(cumulsum(t))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2Any[1, 3, 6]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-3
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
interior
\color inherit
 qui prend un tableau et retourne un nouveau tableau qui contient tous les
 éléments sauf le premier et le dernier.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
interior
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [1, 2, 3, 4]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(interior(t))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-4
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
interior
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 qui prend un tableau, le modifie en supprimant le premier et le dernier
 élément, puis retourne 
\color blue
nothing
\color inherit
.
 Par exemple: 
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [1, 2, 3, 4]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 interior
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-5
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
issort
\color inherit
 qui prend un tableau comme paramètre et retourne 
\color blue
true
\color inherit
 si le tableau est trié par ordre croissant et
\color blue
 false
\color inherit
 dans le cas contraire.
 Par exemple: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
issort
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 issort([1, 2, 2])
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 issort([
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
])
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-6
\end_layout

\begin_layout Standard
Deux mots sont des anagrammes si vous pouvez réarranger les lettres de l'un
 pour écrire l'autre.
 Écrivez une fonction appelée 
\color blue
isanagram
\color inherit
 qui prend deux chaînes de caractères et qui retourne 
\color blue
true
\color inherit
 si ces mots sont des anagrammes.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
anagramme
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
isanagram
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-11-15-7-hasduplicates1"

\end_inset

Exercice 10-7
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
hasduplicates
\color inherit
 qui prend un tableau et retourne 
\color blue
true
\color inherit
 s'il y a un élément qui apparaît plus d'une fois.
 Elle ne doit pas modifier le tableau original.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
hasduplicates
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-8
\end_layout

\begin_layout Standard
Cet exercice se rapporte au 
\begin_inset Quotes cld
\end_inset

paradoxe des anniversaires
\begin_inset Quotes crd
\end_inset

 (voir 
\begin_inset CommandInset href
LatexCommand href
name "ce lien web"
target "https://fr.wikipedia.org/wiki/Paradoxe_des_anniversaires"
literal "false"

\end_inset

).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
anniversaire, paradoxe des
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans une classe de 23 élèves, quelles sont les chances que deux d'entre
 eux fêtent leur anniversaire le même jour? Vous pouvez estimer cette probabilit
é en générant des échantillons aléatoires de 23 anniversaires et en vérifiant
 s'il y a des correspondances.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Vous pouvez générer des dates aléatoires avec 
\backslash
textcolor{blue}{rand(1
\backslash
string:365)}.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-9
\end_layout

\begin_layout Standard
Écrivez une fonction qui lit le fichier 
\color blue
mots_FR.txt
\color inherit
 (voir la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lecture-de-listes-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

) et construit un tableau avec un élément par mot.
 Écrivez deux versions de cette fonction, l'une utilisant 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 et l'autre utilisant l'expression 
\color blue
t = [t..., x]
\color inherit
.
 Laquelle prend le plus de temps à exécuter? Pourquoi? 
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-11-15-10"

\end_inset

Exercice 10-10
\end_layout

\begin_layout Standard
Pour vérifier si un mot se trouve dans le tableau de mots, vous pourriez
 utiliser l'opérateur ∈, mais ce serait lent, car ce dernier recherche les
 mots dans l'ordre.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
in$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comme les mots sont dans l'ordre alphabétique, nous pouvons accélérer la
 recherche grâce à la bissection
\begin_inset Index idx
status open

\begin_layout Plain Layout
bissection
\end_layout

\end_inset

 (également appelée recherche binaire
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche binaire
\end_layout

\end_inset

, voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Débogage-8-8"
plural "false"
caps "false"
noprefix "false"

\end_inset

), qui est similaire à ce que vous faites lorsque vous cherchez un mot dans
 le dictionnaire.
 Vous commencez au milieu et vous vérifiez si le mot que vous recherchez
 vient avant le mot du milieu du tableau.
 Si c'est le cas, vous recherchez la première moitié du tableau de la même
 manière.
 Sinon, vous cherchez dans la deuxième moitié.
\end_layout

\begin_layout Standard
Dans les deux cas, vous réduisez de moitié l'espace de recherche restant.
 Si le tableau contient 336
\begin_inset space ~
\end_inset

531 mots, il faudra environ 19 étapes pour trouver le mot ou conclure qu'il
 n'y est pas.
\end_layout

\begin_layout Standard
Écrivez une fonction appelée
\color blue
 inbisect 
\color inherit
qui prend un tableau trié et une valeur cible et retourne
\color blue
 true
\color inherit
 si le mot est dans le tableau et 
\color blue
false
\color inherit
 s'il n'y est pas.
\begin_inset Index ind
status open

\begin_layout Plain Layout
inbisect
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection*
Exercice 10-11
\end_layout

\begin_layout Standard
Deux mots sont une 
\begin_inset Quotes cld
\end_inset

paire inversée
\begin_inset Quotes crd
\end_inset

 si chacun est l'inverse de l'autre.
 Écrivez un programme 
\color blue
reversepairs
\color inherit
 qui trouve toutes les paires inversées dans le tableau de mots.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
reversepairs
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 10-12
\end_layout

\begin_layout Standard
Deux mots 
\begin_inset Quotes cld
\end_inset

s'emboîtent
\begin_inset Quotes crd
\end_inset

 si on prend des lettres alternées de chacun d'eux pour former un nouveau
 mot.
 Par exemple, 
\begin_inset Quotes cld
\end_inset

cor
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

ria
\begin_inset Quotes crd
\end_inset

 s'emboîtent pour former 
\begin_inset Quotes cld
\end_inset

croira
\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
emboîtement de deux mots
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez un programme qui trouve toutes les paires de mots qui s'emboîtent.
\end_layout

\begin_deeper
\begin_layout Remark*
Cet exercice est inspiré d'un exemple décrit sur 
\begin_inset CommandInset href
LatexCommand href
name "ce lien"
target "http://puzzlers.org"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

N'énumérez pas toutes les paires.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Pouvez-vous trouver des mots qui s'emboîtent les uns dans les autres, c'est-à-di
re qu'une lettre sur trois forme un mot, en commençant par la première,
 la deuxième ou la troisième?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Dictionnaires"

\end_inset

Dictionnaires
\end_layout

\begin_layout Standard
Ce chapitre présente un autre type intégré, les dictionnaires.
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Un-dictionnaire-est-un-mapping"

\end_inset

Dictionnaire et 
\begin_inset Quotes cld
\end_inset

mise en correspondance
\begin_inset Quotes crd
\end_inset

 (
\emph on
mapping
\emph default
)
\end_layout

\begin_layout Standard
Un dictionnaire constitue la généralisation d'un tableau.
 Dans un tableau, les indices doivent être des nombres entiers.
 Dans un dictionnaire, ils peuvent être de (pres\SpecialChar softhyphen
que) n'importe quel type.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapping
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mise en correspondance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un dictionnaire contient une collection d'indices, appelés 
\emph on
clés
\emph default
, et une collection de valeurs.
 Chaque clé est associée à une valeur unique.
 L'association d'une clé et d'une valeur est appelée une paire clé-valeur
\begin_inset Index idx
status open

\begin_layout Plain Layout
clé-valeur
\end_layout

\end_inset

 ou parfois un élément
\begin_inset Index idx
status open

\begin_layout Plain Layout
element@élément
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
En langage informatique, un dictionnaire représente une 
\emph on
mise en correspondance
\emph default
 (ou 
\emph on
mapping
\emph default
) ou association entre des clés et des valeurs, de sorte qu'on peut également
 dire que chaque clé 
\begin_inset Quotes cld
\end_inset

correspond
\begin_inset Quotes crd
\end_inset

 à une valeur (voir la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Représentation-du-dictionnaire-eng2fr"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 À titre d'exemple, nous allons construire un dictionnaire qui établit une
 correspondance entre des mots anglais et français, de sorte que les clés
 et les valeurs sont toutes des chaînes de caractères.
\end_layout

\begin_layout Standard
La fonction 
\color blue
Dict
\color inherit
 crée un nouveau dictionnaire ne contenant aucun élément.
 Comme 
\color blue
Dict
\color inherit
 est le nom d'une fonction intégrée, il faut éviter de l'utiliser comme
 nom de variable.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr = 
\color brown
Dict
\color inherit
()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 0 entries
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le type de dictionnaire est entouré d'accolades: les clés sont de type 
\color blue
Any
\color inherit
 et les valeurs également.
\end_layout

\begin_layout Standard
Le dictionnaire est vide.
 Pour y ajouter des éléments, utilisons des crochets: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr[
\color brown
"one"
\color inherit
] = 
\color brown
"un"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette ligne crée un élément qui relie la clé 
\color blue
"one"
\color inherit
 à la valeur 
\color blue
"un"
\color inherit
.
 À nouveau affiché, le dictionnaire montre une paire clé-valeur.
 La clé est connectée à la valeur par une flèche 
\color blue
=>
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
=>, dictionnaire
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
=>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 1 entry
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray
"one" => "un"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce format de sortie est également un format d'entrée.
 Par exemple, nous pouvons créer un nouveau dictionnaire comportant trois
 éléments:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr = 
\color brown
Dict
\color inherit
(
\color brown
"one"
\color inherit
 
\color lightgray
=> 
\color brown
"un"
\color inherit
, 
\color brown
"two"
\color lightgray
 =>
\color inherit
 
\color brown
"deux"
\color inherit
, 
\color brown
"three"
\color inherit
 
\color lightgray
=>
\color inherit
 
\color brown
"trois"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{String,String} with 3 entries
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray
"one" => "un"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray
"two" => "deux"
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray
"three" => "trois"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Représentation-du-dictionnaire-eng2fr"
plural "false"
caps "false"
noprefix "false"

\end_inset

 résume les attributs du dictionnaire 
\color blue
eng2fr
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/dico_eng2fr_inkscape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Représentation-du-dictionnaire-eng2fr"

\end_inset

Représentation du dictionnaire eng2fr.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Toutes les clés et valeurs initiales sont des chaînes de caractères, de
 sorte qu'un 
\color blue
Dict{String,String}
\color inherit
 est créé.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

L'ordre des paires 
\backslash
guillemotleft~clé-valeur~
\backslash
guillemotright~n'est peut-être pas le même si vous essayez ces instructions
 sur votre ordinateur.
 En général, l'ordre des éléments (c'est-à-dire des couples 
\backslash
guillemotleft~clé-valeur~
\backslash
guillemotright) dans un dictionnaire est imprévisible.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Néanmoins, cela n'a guère d'importance du fait que les éléments d'un dictionnair
e ne sont jamais indicés avec des entiers.
 Ce sont les clés qui sont utilisées pour rechercher les valeurs correspondantes
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr[
\color brown
"two"
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"deux"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La clé 
\color blue
"two"
\color inherit
 correspond toujours à la valeur 
\color blue
"deux"
\color inherit
, l'ordre des éléments n'a donc pas d'importance.
\end_layout

\begin_layout Standard
Si la clé n'est pas dans le dictionnaire, Julia retourne une exception:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eng2fr[
\color brown
"four"
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 KeyError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 key "four" not found
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
length
\color inherit
 opère également sur les dictionnaires.
 Elle retourne le nombre de paires clé-valeur:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 length(eng2fr)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
keys
\color inherit
 retourne la collection de clés du dictionnaire: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keys()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 ks = keys(eng2fr)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 print(ks)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
["two", "one", "three"]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À présent, l'opérateur 
\color blue
∈
\color inherit
 est utilisable pour déterminer si un terme est une clé du dictionnaire:
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
in$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"one"
\color inherit
 
\size default
\color blue
∈
\size small
\color inherit
 ks 
\end_layout

\begin_layout Plain Layout

\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"un"
\size default
\color blue
 ∈
\size small
\color inherit
 ks 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour déterminer si une valeur appartient à un dictionnaire, la fonction
 
\color blue
values
\color inherit
 est exploitable.
 Elle retourne l'ensemble des valeurs, si bien qu'ensuite il est alors possible
 de tirer parti de l'opérateur
\color blue
 ∈
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
values()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 vs = values(eng2fr)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"un"
\size default
\color blue
 ∈
\size small
\color inherit
 ks
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
∈
\color inherit
 utilise des algorithmes différents selon que sont traités des tableaux
 ou des dictionnaires.
 Pour les tableaux, il recherche les éléments dans l'ordre, comme dans la
 section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-dans-les-chaines"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Le temps de recherche s'allonge proportionnellement à la taille des tableaux.
\end_layout

\begin_layout Standard
Pour les dictionnaires, Julia utilise un algorithme appelé 
\emph on
table de hachage
\emph default
 (ou 
\emph on
hash table
\emph default
) qui a une propriété remarquable: l'opérateur 
\color blue
∈
\color inherit
 prend à peu près le même temps quel que soit le nombre d'éléments du dictionnai
re.
\begin_inset Index idx
status open

\begin_layout Plain Layout
hash table
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
table de hachage
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Les-dictionnaires-collections-compteurs"

\end_inset

Dictionnaires en tant que collections de compteurs
\end_layout

\begin_layout Standard
Soit une chaîne dont il faut compter l'occurrence
\begin_inset Foot
status open

\begin_layout Plain Layout
C'est-à-dire la fréquence d'apparition.
 
\end_layout

\end_inset

 de chaque lettre.
 
\emph on
A priori
\emph default
, il y a trois possibilités:
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire, compteur
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
créer 26 variables, une pour chaque lettre de l'alphabet, parcourir la chaîne
 et pour chaque caractère, incrémenter le compteur correspondant, probablement
 en utilisant des conditions imbriquées.
\end_layout

\begin_layout Enumerate
créer un tableau de 26 éléments.
 Ensuite, convertir chaque caractère en un nombre (en utilisant la fonction
 interne 
\color blue
Int
\color inherit
), utiliser les nombres comme indices dans le tableau et incrémenter le
 compteur correspondant.
\end_layout

\begin_layout Enumerate
créer un dictionnaire où les clés sont des caractères et où les valeurs
 correspondantes sont des compteurs.
 La première fois qu'un caractère est rencontré, le programme ajoute un
 élément au dictionnaire.
 Ensuite, la valeur d'un élément existant est incrémentée.
 Par exemple, pour le terme 
\begin_inset Quotes cld
\end_inset

abracadabra
\begin_inset Quotes crd
\end_inset

, la valeur de la clé 
\begin_inset Quotes cld
\end_inset

a
\begin_inset Quotes crd
\end_inset

 est 5, la valeur de la clé 
\begin_inset Quotes cld
\end_inset

b
\begin_inset Quotes crd
\end_inset

 est 2, la valeur de la clé 
\begin_inset Quotes cld
\end_inset

r
\begin_inset Quotes crd
\end_inset

 est 2, la valeur de la clé 
\begin_inset Quotes cld
\end_inset

c
\begin_inset Quotes crd
\end_inset

 est 1 et la valeur de la clé 
\begin_inset Quotes cld
\end_inset

d
\begin_inset Quotes crd
\end_inset

 est 1.
 
\end_layout

\begin_layout Standard
Chacune de ces options effectue le même calcul, mais avec une mise en œuvre
 différente.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
implémentation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une 
\emph on
implémentation
\emph default
 est définie comme la mise en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvre d'un calcul.
 Certaines s'avèrent plus performantes que d'autres.
 Par exemple, un des avantages de l'implémentation par dictionnaire provient
 du fait qu'il n'est pas nécessaire de connaître préalablement les lettres
 constituant la chaîne.
 Nous n'avons qu'une obligation: faire de la place pour insérer dans le
 dictionnaire les lettres détectées.
\end_layout

\begin_layout Standard
Voici à quoi pourrait ressembler le code:
\begin_inset Index ind
status open

\begin_layout Plain Layout
histogram
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 histogram(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = Dict()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 c ∉ keys(d)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] = 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] += 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le nom de la fonction est 
\color blue
histogram
\color inherit
, un terme associé au domaine des statistiques pour désigner une série de
 fréquences (c'est-à-dire d'occurrences)
\begin_inset Index idx
status open

\begin_layout Plain Layout
fréquence
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
occurrence
\end_layout

\end_inset

.
 Comment fonctionne ce code? Pour être concret, effectuons un appel sous
 la forme 
\color blue
histogram("bron\SpecialChar softhyphen
tosaure")
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
histogramme
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 h = histogram(
\color brown
"brontosaure"
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On passe donc la chaîne 
\color blue
"brontosaure"
\color inherit
 à 
\color blue
s
\color inherit
.
 Ensuite, un dictionnaire vide 
\color blue
d 
\color inherit
est créé.
 
\end_layout

\begin_layout Standard
Dans un premier temps, supposons que la boucle 
\color blue
for
\color inherit
 ne contienne pas le code du test conditionnel 
\color blue
if
\color inherit
 et qu'à sa place il n'y ait qu'une instruction 
\color blue
println(c)
\color inherit
.
 Que retournerait le programme? Il afficherait chaque lettre du mot 
\begin_inset Quotes cld
\end_inset

brontosaure
\begin_inset Quotes crd
\end_inset

 avec, chaque fois, un retour à la ligne.
 En effet, au premier passage, la variable
\color blue
 c
\color inherit
 vaut 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, au deuxième passage,
\color blue
 
\color black
elle
\color inherit
 vaut 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 et ainsi de suite jusqu'à
\color blue
 
\color inherit
valoir 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
.
 La boucle 
\color blue
for 
\color inherit
parcourt donc entièrement la chaîne de caractères.
\end_layout

\begin_layout Standard
Dans un deuxième temps, on peut s'assurer de ce que contient 
\color blue
keys(d)
\color inherit
.
 Pour ce faire, il suffit de remplacer l'instruction
\color blue
 println(c)
\color inherit
 par 
\color blue
@show keys(d)
\color inherit
.
 Nous devons nous attendre à 11 retours 
\color blue
keys(d) = Any{}
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@show}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans un troisième temps, nous allons remplacer le test conditionnel 
\color blue
if
\color inherit
 par ce bloc:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
if
\color inherit
 c ∉ keys(d)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] = 1
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(d[c])
\end_layout

\begin_layout Plain Layout

\size small
\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(
\color brown
"ω"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De sorte que la fonction prenne transitoirement cette forme:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 histogram(s)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = Dict()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for c 
\color green
in
\color inherit
 s
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 c ∉ keys(d)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] = 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(d[c])
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"ω"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Que retourne la fonction 
\color blue
histogram("brontosaure")
\color black
? Au premier passage dans la boucle 
\color blue
for
\color black
, la variable 
\color blue
c
\color black
 contient 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
.
 Le code teste si
\color black
 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset space ~
\end_inset

se trouve parmi les clés du dictionnaire.
 Le dictionnaire étant vide, 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 ne s'y trouve pas.
 À la ligne suivante, 
\color blue
d[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\color black
 effectue l'entrée de 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 comme clé du dictionnaire et l'entier 1 est affecté à la valeur 
\color blue
d[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\color black
 correspondante.
 Le code remonte à la boucle 
\color blue
for
\color black
 avec 
\color blue
c
\color black
 qui, cette fois, vaut 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 et ainsi de suite jusqu'à la cinquième lettre, 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
.
 La première partie de l'affichage sera donc 11111.
 Au passage suivant, 
\color blue
c
\color black
 vaut 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
.
 Cependant, il existe déjà un 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 dans le dictionnaire et, par conséquent, le code passe au 
\color blue
else
\color inherit
 et l'affichage devient 11111ω.
 Il est maintenant clair qu'à la fin nous devons obtenir un affichage tel
 que 11111ω111ω1.
 
\end_layout

\begin_layout Standard
Revenons à la fonction 
\color blue
histogram
\color inherit
 initiale.
 Comme précédemment, 
\color black
au premier passage dans la boucle 
\color blue
for
\color black
, 
\color blue
c
\color black
 vaut 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
.
 Le code teste si
\color black
 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black

\begin_inset space ~
\end_inset

se trouve parmi les clés du dictionnaire.
 Puisque ce dernier est vide, 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 ne s'y trouve pas; 
\color blue
d[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\color black
 effectue l'entrée de 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
 comme clé du dictionnaire et l'entier 1 est affecté à la valeur 
\color blue
d[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\color black
.
 
\end_layout

\begin_layout Standard

\color black
En conséquence, l'état du dictionnaire est:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
keys(d) = Any[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color black
d = Dict{Any,Any}(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au deuxième tour, l'état du dictionnaire passe à:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
keys(d) = Any[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\begin_layout Plain Layout

\size small
\color black
d = Dict{Any,Any}(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au cinquième tour, le dictionnaire prend cette configuration (à l'ordre
 des clés près):
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
keys(d) = Any[
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 b
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color black
d = Dict{Any,Any}(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au passage suivant, le programme entre dans la partie 
\color blue
else
\color inherit
 puisque 
\size small
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size default
o
\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\size default
\color inherit
 se trouve déjà dans le dictionnaire.
 Sa valeur correspondante est incrémentée et devient 2.
 L'état du dictionnaire devient:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
keys(d) = Any[
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 b
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color black
d = Dict{Any,Any}(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 2,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\emph on
In fine
\emph default
, l'état du dictionnaire est tel que:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
keys(d) = Any[
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 u
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 s
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
,
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 b
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color black
d = Dict{Any,Any}(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 u
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 s
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 2,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 2,
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 => 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si vous appliquez l'appel 
\color blue
histogram("brontosaure")
\color inherit
, le programme retourne la valeur de 
\color blue
d
\color inherit
 sous cette forme:
\begin_inset Index ind
status open

\begin_layout Plain Layout
histogram
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 9 entries
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="3mm">
<column alignment="center" valignment="top" width="3mm">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 s
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 u
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'histogramme
\begin_inset Index idx
status open

\begin_layout Plain Layout
histogramme
\end_layout

\end_inset

 indique que les lettres 
\emph on
\color blue
a
\emph default
\color inherit
, 
\emph on
\color blue
b
\emph default
\color inherit
, 
\emph on
\color blue
e
\emph default
\color inherit
, 
\emph on
\color blue
n
\emph default
\color inherit
,
\color blue
 
\emph on
s
\emph default
\color inherit
, 
\emph on
\color blue
t
\emph default
\color inherit
 et
\color blue
 
\emph on
u
\emph default
\color inherit
 apparaissent une fois; 
\emph on
\color blue
o
\color inherit
 
\emph default
et 
\emph on
\color blue
r
\emph default
\color inherit
 apparaissent deux fois.
\end_layout

\begin_layout Standard
Les dictionnaires possèdent une fonction appelée 
\color blue
get
\color inherit
 qui prend une clé et une valeur par défaut.
 Si la clé apparaît dans le dictionnaire, 
\color blue
get
\color inherit
 retourne la valeur correspondante.
 Sinon, elle retourne la valeur par défaut.
 Par exemple:
\begin_inset Index idx
status open

\begin_layout Plain Layout
get()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 h = histogram(
\color brown
"brontosaure"
\color inherit
)
\color lightgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 get(h, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 get(h, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 get(h, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 z
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 11-1
\end_layout

\begin_layout Standard
Utilisez 
\color blue
get
\color inherit
 pour réécrire 
\color blue
histogram
\color inherit
 de manière plus concise.
 Vous devriez pouvoir éliminer la déclaration 
\color blue
if
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
histogram
\end_layout

\end_inset


\end_layout

\begin_layout Section
Boucles et dictionnaires
\end_layout

\begin_layout Standard
Les clés d'un dictionnaire peuvent être parcourues grâce à une boucle 
\color blue
for
\color inherit
.
 Par exemple, 
\color blue
printhist
\color inherit
 affiche chaque clé et la valeur correspondante:
\begin_inset Index ind
status open

\begin_layout Plain Layout
printhist
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printhist(h)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 c 
\color green
in
\color inherit
 keys(h)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(c, 
\color brown
" "
\color inherit
, h[c])
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici à quoi ressemble le résultat:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
histogram(
\color brown
"perroquet"
\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printhist(h)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
u
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
o
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Là encore, les clés ne sont pas dans un ordre particulier.
 Pour parcourir les clés dans l'ordre dans l'ordre alphabétique, la combinaison
 des fonctions 
\color blue
sort
\color inherit
 et 
\color blue
collect
\color inherit
 se révèle pratique:
\begin_inset Index idx
status open

\begin_layout Plain Layout
sort()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
collect()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
for
\color inherit
 c 
\color green
in
\color inherit
 sort(collect(keys(h)))
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\size small
println(c, 
\color brown
" "
\color inherit
, h[c])
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
o
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
u
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Recherche inverse
\end_layout

\begin_layout Standard
Avec un dictionnaire 
\color blue
d
\color inherit
 et une clé 
\color blue
k
\color inherit
, il est facile de trouver la valeur correspondante
\color blue
 v = d[k]
\color inherit
.
 Cette opération est appelée une 
\emph on
recherche directe
\emph default
 (ou
\emph on
 lookup
\emph default
).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche directe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
lookup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ceci dit, comment procéder si nous disposons d'une valeur 
\color blue
v
\color inherit
 et que nous souhaitons trouver sa clé
\color blue
 k
\color inherit
? Ici, nous sommes confrontés à deux problèmes: 
\end_layout

\begin_layout Enumerate
premièrement, il peut y avoir plus d'une clé qui correspond à la valeur
 
\color blue
v
\color inherit
 (par exemple, dans le cas du tableau 
\color blue
d
\color inherit
 associé à 
\begin_inset Quotes cld
\end_inset

brontosaure
\begin_inset Quotes crd
\end_inset

, à la valeur 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

 correspondaient les clés 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 et 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 
\color blue
r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
), 
\end_layout

\begin_layout Enumerate
deuxièmement, il n'y a pas d'astuce simple pour effectuer une 
\emph on
recherche inverse
\emph default
 (ou 
\emph on
\color black
reverse lookup
\emph default
\color inherit
).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche inverse
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reverse lookup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici une fonction qui prend une valeur et retourne la première clé qui
 correspond à cette valeur:
\begin_inset Index ind
status open

\begin_layout Plain Layout
reverselookup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 reverselookup(d, v)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 k 
\color green
in
\color inherit
 keys(d) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if 
\color inherit
d[k] == v
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 k
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

error(
\color brown
"LookupError"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fonction est un exemple de schéma de recherche inverse, mais elle
 utilise une fonction 
\color blue
error
\color inherit
 non encore abordée jusqu'ici.
 La fonction 
\color blue
error
\color inherit
 est exploitée pour produire une
\color blue
 ErrorException
\color inherit
 qui interrompt le flux de contrôle normal.
 Dans ce cas, elle affiche le message 
\color blue
"LookupError"
\color inherit
, indiquant qu'une clé n'existe pas.
\begin_inset Index idx
status open

\begin_layout Plain Layout
error
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ErrorException
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si le programme arrive à la fin de la boucle, cela signifie que 
\color blue
v
\color inherit
 n'est pas une valeur du dictionnaire.
 En conséquence, le programme émet une exception.
 
\end_layout

\begin_layout Standard
Voici un exemple de recherche inversée réussie:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 h = histogram(
\color brown
"magnifique"
\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 key = reverselookup(h, 2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 i
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 ASCII/Unicode U+0069 (category Ll
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Letter, lowercase)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
et voici un cas qui a échoué:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
key = reverselookup(h, 3) 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LookupError
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Quand une exception se produit, l'effet est le même que lorsque Julia en
 émet une: une trace de pile (ou 
\emph on
stacktrace
\emph default
) et un message d'erreur sont affichés.
\end_layout

\begin_layout Standard
Julia propose un moyen optimisé de faire une recherche inversée: 
\color blue
findall(isequal(3), h)
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
findall()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Une recherche inverse est beaucoup plus lente qu'une recherche classique.
 S'il est nécessaire d'y recourir souvent, ou si le dictionnaire est de
 grande taille, la performance du programme en souffrira.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Dictionnaires et tableaux
\end_layout

\begin_layout Standard
Les tableaux peuvent constituer des valeurs au sein d'un dictionnaire.
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire et tableau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau et dictionnaire
\end_layout

\end_inset

 Supposons un dictionnaire qui fait correspondre des lettres à des occurrences
\begin_inset Index idx
status open

\begin_layout Plain Layout
occurrence
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fréquence
\end_layout

\end_inset

 (voir section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Les-dictionnaires-collections-compteurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 On peut vouloir l'inverser, c'est-à-dire créer un dictionnaire qui fait
 correspondre des occurrences (en tant que clés) à des lettres (en tant
 que valeurs).
 Comme plusieurs lettres peuvent présenter la même occurrence, celles-ci
 peuvent être groupées, selon leur occurrence, sous forme de tableaux et
 ces tableaux peuvent devenir des valeurs dans le dictionnaire inversé.
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire, inversion
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire inversé
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Inversion-de-dictionnaire-avec-tableaux"
plural "false"
caps "false"
noprefix "false"

\end_inset

 permet de visualiser l'inversion d'un tableau (en l'espèce, l'histogramme
\begin_inset Index idx
status open

\begin_layout Plain Layout
histogramme
\end_layout

\end_inset

 du mot 
\begin_inset Quotes cld
\end_inset

perroquet
\begin_inset Quotes crd
\end_inset

).
 Les zones grisées de la figure correspondent à deux tableaux constituant
 les deux valeurs du dictionnaire inversé.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/inversion-dictionnaire-inkscape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Inversion-de-dictionnaire-avec-tableaux"

\end_inset

Inversion de dictionnaire où les valeurs du dictionnaire inversé sont des
 tableaux.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici une fonction permettant d'inverser un dictionnaire: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
invertdict
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 invertdict(d) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inverse = 
\color brown
Dict
\color inherit
()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 key
\color green
 in
\color inherit
 keys(d)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

val = d[key]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 val ∉ keys(inverse)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inverse[val] = [key] 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(inverse[val], key)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inverse
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À chaque fois, dans la boucle, 
\color blue
key
\color inherit
 récupère une clé à partir de 
\color blue
d
\color inherit
 pendant que 
\color blue
val
\color inherit
 récupère la valeur correspondante.
 Si 
\color blue
val
\color inherit
 n'est pas dans 
\color blue
inverse
\color inherit
, cela signifie qu'elle n'a pas été détectée auparavant.
 En conséquence, un nouvel élément est créé et initialisé avec un 
\emph on
singleton
\emph default
 (un tableau qui contient un seul élément).
 Si cette valeur a été repérée auparavant, la clé qui lui correspond est
 ajoutée au tableau à l'aide de la fonction 
\color blue
push
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Voici un exemple:
\begin_inset Index idx
status open

\begin_layout Plain Layout
singleton
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
notin$}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 hist = histogram(
\color brown
"perroquet"
\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 inverse = invertdict(hist) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 2 entries
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2 => [
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

] 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color lightgray

\begin_inset space ~
\end_inset

1 => [
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 u
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 p
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 o
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 q
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 t
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-pour-hist-et-inverse"
plural "false"
caps "false"
noprefix "false"

\end_inset

 reprend les diagrammes d'état associés à 
\color blue
hist
\color inherit
 et 
\color blue
inverse
\color inherit
.
 Un dictionnaire est représenté sous la forme d'un cadre contenant des paires
 clé-valeur (que ces valeurs soient des entiers, des flottants ou des chaînes
 de caractères).
 Pour conserver la simplicité de lecture des diagrammes, les tableaux sont
 disposés dans des cadres à l'extérieur de ceux associés au dictionnaire.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme d'état
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagrammmeétat-hist-inverse-inkscape.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-pour-hist-et-inverse"

\end_inset

Diagrammes d'état pour les fonctions 
\color blue
hist
\color inherit
 et 
\color blue
inverse
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip2}
\end_layout

\begin_layout Plain Layout

Dans la section~
\backslash
nameref{sec:Un-dictionnaire-est-un-mapping}, il a été mentionné qu'un dictionnai
re est implémenté à l'aide d'une table de hachage et cela signifie que les
 clés doivent être hachables.
\end_layout

\begin_layout Plain Layout

Le hachage 
\backslash
index{hachage} est une fonction qui prend une valeur (de n'importe quel
 type) et retourne un entier.
 Les dictionnaires utilisent ces entiers, appelés valeurs de hachage
\backslash
index{hachage, valeur de}, pour enregistrer et rechercher des paires clé-valeur.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip2}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Mémos"

\end_inset

Mémos
\end_layout

\begin_layout Standard
Si vous avez quelque peu manié la fonction 
\color blue
fibonacci
\color inherit
 de la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Un-exemple-supplémentaire"
plural "false"
caps "false"
noprefix "false"

\end_inset

, vous avez remarqué que plus le nombre passé en argument est grand, plus
 la fonction prend de temps à effectuer le calcul.
 De surcroît, la durée d'exécution augmente de plus en plus rapidement.
\begin_inset Index idx
status open

\begin_layout Plain Layout
memo@mémo
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
fibonacci
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour comprendre pourquoi, considérons la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Graphe-d'appel-associé-fibonacci"
plural "false"
caps "false"
noprefix "false"

\end_inset

 qui montre le 
\emph on
graphe d'appel 
\emph default
pour 
\color blue
fibonacci
\color inherit
 avec 
\color blue
n = 4
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphe d'appel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
appel, graphe d'
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Fibonacci, suite de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fibonacci()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/graphique-appel-fibonacci-inkscape.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Graphe-d'appel-associé-fibonacci"

\end_inset

Graphe d'appel associé à la fonction 
\color blue
fibonacci
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un graphe d'appel comporte un ensemble de cadres associés à une (ou des)
 fonction(s), avec des flèches reliant chaque cadre aux cadres des fonctions
 qu'il appelle.
 En haut du graphique, 
\color blue
fibonacci 
\color inherit
avec 
\color blue
n = 4
\color inherit
 appelle 
\color blue
fibonacci
\color inherit
 avec 
\color blue
n = 3
\color inherit
 et 
\color blue
n = 2
\color inherit
, et 
\color blue
fibonacci
\color inherit
 avec 
\color blue
n = 3
\color inherit
 appelle 
\color blue
fibonacci
\color inherit
 avec 
\color blue
n = 2 
\color inherit
et 
\color blue
n = 1
\color inherit
.
 Et ainsi de suite.
\end_layout

\begin_layout Standard
Il est facile de dénombrer les appels à 
\color blue
fibonacci(0)
\color inherit
 et 
\color blue
fibonacci(1)
\color inherit
 et de conclure à l'inefficacité de cette solution.
\end_layout

\begin_layout Standard
Un moyen de résoudre ce problème consiste à garder une trace des valeurs
 déjà calculées en les enregistrant dans un dictionnaire.
 Une valeur calculée précédemment et stockée pour une utilisation ultérieure
 s'appelle un 
\emph on
\color black
mémo
\emph default
\color inherit
.
 Voici une version 
\begin_inset Quotes cld
\end_inset

mémo
\begin_inset Quotes crd
\end_inset

 de 
\color blue
fibonacci
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
known = Dict(0=>0, 1=>1)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 fibonacci(n)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 n ∈ keys(known)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 known[n] 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res = fibonacci(n-1) + fibonacci(n-2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

known[n] = res
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
known
\color inherit
 est un dictionnaire qui garde la trace des nombres de la suite de Fibonacci
 déjà calculés.
 Il commence par deux éléments: la clé 0 est associée à la valeur 0 et la
 clé 1 à la valeur 1.
\end_layout

\begin_layout Standard
Chaque fois que la fonction 
\color blue
fibonacci
\color inherit
 est appelée, elle vérifie 
\color blue
known
\color inherit
.
 Si le résultat est déjà dans le dictionnaire, il est rappelé immédiatement.
 Sinon, 
\color blue
fibonacci
\color inherit
 calcule la nouvelle valeur, l'ajoute au dictionnaire et la retourne.
\end_layout

\begin_layout Standard
À l'exécution, cette version de
\color blue
 fibonacci
\color inherit
 s'avère beaucoup plus rapide que l'originale.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Variables-globales"

\end_inset

Variables globales
\end_layout

\begin_layout Standard
Dans l'exemple précédent, 
\color blue
known
\color inherit
 est créé en dehors de la fonction.
 Ce dictionnaire appartient donc à la fonction 
\color blue
Main
\color inherit
.
 Les variables dans 
\color blue
Main
\color inherit
 sont dites 
\emph on
\color black
globales
\emph default
,
\color inherit
 car elles sont accessibles depuis n'importe quelle fonction.
 Contrairement aux variables locales qui disparaissent lorsque leur fonction
 se termine, les variables globales persistent d'un appel de fonction à
 l'autre.
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable globale
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Main
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est courant d'utiliser des variables globales pour les drapeaux (
\emph on
flags
\emph default
),
\begin_inset Index idx
status open

\begin_layout Plain Layout
drapeau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
flag
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fanion
\end_layout

\end_inset

 c'est-à-dire des variables booléennes qui indiquent si une condition est
 vraie (ou fausse).
 Par exemple, certains programmes utilisent un drapeau 
\color blue
verbose 
\color inherit
pour contrôler le niveau de détail de la sortie: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
verbose, mode
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
example1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
verbose = 
\color green
true
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example1()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 verbose 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Running example1"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La réaffectation
\begin_inset Index idx
status open

\begin_layout Plain Layout
reaffectation@réaffectation
\end_layout

\end_inset

 d'une variable globale n'entraîne pas la modification de cette dernière.
 L'ex\SpecialChar softhyphen
emple suivant est censé déterminer si la fonction (
\color blue
example2
\color inherit
) a été appelée:
\begin_inset Index ind
status open

\begin_layout Plain Layout
example2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
been_called = 
\color green
false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example2() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

been_called = 
\color green
true
\color inherit

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\color cyan
# ERRONÉ 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À l'exécution, nous constatons que la valeur de 
\color blue
been_called
\color inherit
 ne change pas.
 Le problème vient de ce qu'
\color blue
example2
\color inherit
 crée une nouvelle variable locale appelée
\color blue
 been_called
\color inherit
.
 La variable locale disparaît lorsque la fonction se termine.
 Par conséquent, cela n'affecte pas la variable globale.
\end_layout

\begin_layout Standard
Pour conférer le caractère global à une variable se trouvant à l'intérieur
 d'une fonction, il est nécessaire de placer le terme 
\color blue
global
\color inherit
 immédiatement devant le nom de la variable: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
been_called =
\color green
 false
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example2()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
global
\color inherit
 been_called
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

been_called = 
\color green
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette 
\emph on
déclaration globale
\emph default
 transmet à l'interpréteur une information signifiant: 
\begin_inset Quotes cld
\end_inset

Dans cette fonction, quand nous disons 
\color blue
been_called
\color inherit
, nous désignons la variable globale; ne créez pas de variable locale
\begin_inset Quotes crd
\end_inset

.
 Ainsi, quand, à l'intérieur de la fonction, 
\color blue
true
\color inherit
 est affecté à 
\color blue
been_called
\color inherit
, cela affecte la variable globale.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration globale
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici un exemple qui tente erronément de mettre à jour une variable globale:
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
example3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
count = 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example3()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count = count + 1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# ERRONÉ 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À l'exécution, Julia retourne un message d'erreur:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
example3() 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 count not defined
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia suppose que 
\color blue
count 
\color inherit
est locale et que vous en prenez connaissance avant de modifier sa valeur.
 À nouveau, la solution est de déclarer 
\color blue
count
\color inherit
 comme variable globale.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
count = 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example3()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
global
\color inherit
 count
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count += 1
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si une variable globale fait référence à une séquence non persistante (comme
 un tableau ou un dictionnaire), il est possible de modifier les valeurs
 de cette séquence sans déclarer la variable comme étant globale:
\begin_inset Index ind
status open

\begin_layout Plain Layout
example4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
known = 
\color brown
Dict
\color inherit
(0=>0, 1=>1)
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
function
\color inherit
 example4() 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

known[2] = 1
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Par conséquent, il est admissible d'ajouter, supprimer et remplacer des
 éléments d'un tableau ou d'un dictionnaire global.
 Cependant, la réaffectation de la variable au sein d'une fonction requiert
 une déclaration en tant que variable globale:
\begin_inset Index ind
status open

\begin_layout Plain Layout
example5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
known = 
\color brown
Dict
\color inherit
(0=>0, 1=>1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 example5() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
global
\color inherit
 known 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

known = 
\color brown
Dict
\color inherit
()
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour des raisons de performance, il est judicieux d'attribuer le mot-clé
 
\color blue
const
\color inherit
 à une variable globale.
 De cette manière, il devient impossible de la réaffecter.
 Si une variable globale 
\color blue
const
\color inherit
 se réfère à une séquence non persistante, il reste néanmoins possible d'en
 modifier la valeur.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
const
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
const
\color inherit
 known = 
\color brown
Dict
\color inherit
(0=>0, 1=>1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
example4() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

known[2] = 1 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Les variables globales peuvent s'avérer très utiles.
 Néanmoins, si un programme en contient un grand nombre et qu'elles sont
 modifiées fréquemment, elles peuvent rendre le programme difficile à déboguer
 et le conduire à mal fonctionner.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Lorsqu'on travaille avec des jeux de données volumineux, il peut devenir
 difficile de déboguer en affichant et en vérifiant le résultat manuellement.
 Voici quelques suggestions pour le débogage de grands jeux de données:
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
réduire la taille de l'entrée: 
\begin_inset Newline newline
\end_inset

Si possible, réduire la taille du jeu de données.
 Par exemple, si un programme lit un fichier texte, on peut commencer par
 les 10 premières lignes, voire — si c'est possible — avec le plus petit
 échantillon sur lequel des erreurs sont identifiables.
 Il est fortement conseillé de ne pas éditer les fichiers eux-mêmes, mais
 plutôt de modifier le programme afin qu'il ne lise que les 
\emph on
n
\emph default
 premières lignes.
\begin_inset Newline newline
\end_inset

S'il y a une erreur, il convient de réduire 
\emph on
n
\emph default
 à la plus petite valeur qui révèle l'erreur.
 Par la suite, la valeur de
\emph on
 n
\emph default
 peut être augmentée progressivement à mesure que sont détectées et corrigées
 les erreurs,
\end_layout

\begin_layout Itemize
vérifiez les résumés et les types:
\begin_inset Newline newline
\end_inset

Au lieu d'afficher et de vérifier l'ensemble des données, il faut penser
 à afficher les résumés de données: par exemple, le nombre d'éléments dans
 un dictionnaire ou le total d'un tableau de nombres.
 
\begin_inset Newline newline
\end_inset

Une cause fréquente d'erreurs d'exécution tient en une valeur dont type
 est erroné.
 Pour déboguer ce type d'erreur, il suffit souvent d'afficher le type d'une
 valeur,
\end_layout

\begin_layout Itemize
rédigez des vérifications automatiques: 
\begin_inset Newline newline
\end_inset

Parfois, il est habile d'écrire un peu de code pour vérifier automatiquement
 la présence d'erreurs.
 Par exemple, si la moyenne d'un tableau de nombres est calculée, on peut
 aisément vérifier que le résultat n'est pas supérieur au plus grand élément
 du tableau ou inférieur au plus petit.
 Il s'agit là d'une 
\begin_inset Quotes cld
\end_inset

vérification de bon sens
\begin_inset Quotes crd
\end_inset

.
\begin_inset Newline newline
\end_inset

Un autre type de contrôle consiste à comparer les résultats de deux calculs
 différents pour vérifier qu'ils sont cohérents.
 Ici, il est question d'une 
\begin_inset Quotes cld
\end_inset

vérification de cohérence
\begin_inset Quotes crd
\end_inset

,
\end_layout

\begin_layout Itemize
formater les messages émis: 
\begin_inset Newline newline
\end_inset

Le formatage des messages de débogage peut aider à repérer une erreur.
 Nous en avons vu un exemple dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Débogage-Chap-7"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Là encore, le temps investi à construire un canevas peut considérablement
 réduire le temps de débogage.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description

\emph on
mapping
\emph default

\begin_inset space ~
\end_inset

(association
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

mise
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

correspondance) relation dans laquelle chaque élément d'un ensemble correspond
 à un élément d'un autre ensemble, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapping
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mise en correspondance
\end_layout

\end_inset


\end_layout

\begin_layout Description
dictionnaire séquence permettant une mise en correspondance de clés avec
 leur valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire
\end_layout

\end_inset


\end_layout

\begin_layout Description
paire
\begin_inset space ~
\end_inset

clé-valeur représentation de la mise en correspondance (
\emph on
mapping
\emph default
) d'une clé à une valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
clé-valeur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
paire clé-valeur
\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
item
\emph default
 dans un dictionnaire, synonyme d'une paire clé-valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
item
\end_layout

\end_inset


\end_layout

\begin_layout Description
clé objet qui apparaît dans un dictionnaire comme la première partie d'une
 paire clé-valeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
clé
\end_layout

\end_inset


\end_layout

\begin_layout Description
valeur objet qui apparaît dans un dictionnaire comme la deuxième partie
 d'une paire clé-valeur.
 Ce terme est plus spécifique que notre utilisation précédente du terme
 
\begin_inset Quotes cld
\end_inset

valeur
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur
\end_layout

\end_inset


\end_layout

\begin_layout Description
implémentation mise en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvre d'un calcul, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
implémentation
\end_layout

\end_inset


\end_layout

\begin_layout Description
table
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

hachage
\begin_inset space ~
\end_inset

(
\emph on
hash
\begin_inset space ~
\end_inset

table
\emph default
) algorithme utilisé pour mettre en œuvre les dictionnaires en Julia, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
table de hachage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
hachage, table
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
hash table
\end_layout

\end_inset


\end_layout

\begin_layout Description
fonction
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

hachage
\begin_inset space ~
\end_inset

(
\emph on
hash
\begin_inset space ~
\end_inset

function
\emph default
) fonction utilisée par une table de hachage pour calculer l'emplacement
 d'une clé, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction de hachage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
hachage, fonction
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
hash function
\end_layout

\end_inset


\end_layout

\begin_layout Description
recherche
\begin_inset space ~
\end_inset

directe
\begin_inset space ~
\end_inset

(
\emph on
lookup
\emph default
) opération du dictionnaire qui prend une clé et trouve la valeur correspondante
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche directe
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
lookup
\end_layout

\end_inset


\end_layout

\begin_layout Description
recherche
\begin_inset space ~
\end_inset

inversée
\begin_inset space ~
\end_inset

(
\emph on
reverse
\begin_inset space ~
\end_inset

lookup
\emph default
) opération sur un dictionnaire qui prend une valeur et trouve une ou plusieurs
 clés qui y correspondent, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
recherche inverse
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reverse lookup
\end_layout

\end_inset


\end_layout

\begin_layout Description
singleton tableau (ou tout autre séquence) avec un seul élément, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
singleton
\end_layout

\end_inset


\end_layout

\begin_layout Description
graphe
\begin_inset space ~
\end_inset

d'appel diagramme qui montre chaque cadre créé pendant l'exécution d'un
 programme, avec une flèche de chaque appelant à chaque appelé, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphe d'appel
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
appel, graphe
\end_layout

\end_inset


\end_layout

\begin_layout Description
mémo valeur calculée et enregistrée pour éviter tout calcul futur redondant,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
memo@mémo
\end_layout

\end_inset


\end_layout

\begin_layout Description
variable
\begin_inset space ~
\end_inset

globale variable définie dans 
\color blue
Main
\color inherit
, en dehors de toute autre fonction.
 Les variables globales sont accessibles à partir de n'importe quelle fonction,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable globale
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration
\begin_inset space ~
\end_inset

globale déclaration qui établit le nom d'un variable globale, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration globale
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
drapeau
\begin_inset space ~
\end_inset

(
\emph on
flag
\emph default

\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

fanion) variable booléenne utilisée pour indiquer si une condition est vraie,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
drapeau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
flag
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fanion
\end_layout

\end_inset


\end_layout

\begin_layout Description
déclaration énoncé tel que le mot 
\color blue
global
\color inherit
 qui renseigne l'interpréteur sur une variable, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset


\end_layout

\begin_layout Description
constante
\begin_inset space ~
\end_inset

globale constante définie dans 
\color blue
Main
\color inherit
 et ne pouvant être réaffectée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
constante globale
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-12-10-1"

\end_inset

Exercice 11-2
\end_layout

\begin_layout Standard
Écrivez une fonction qui lit les mots dans la liste 
\color blue
mots_FR.txt
\color inherit
 et les enregistre sous forme de clés dans un dictionnaire.
 Les valeurs n'ont pas d'importance.
 Vous pouvez alors utiliser l'opérateur 
\color blue
∈ 
\color inherit
comme moyen rapide de vérifier si une chaîne se trouve dans le dictionnaire.
\end_layout

\begin_layout Standard
Si vous avez résolu l'exercice 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-11-15-10"
plural "false"
caps "false"
noprefix "false"

\end_inset

, vous pouvez comparer la rapidité de cette implémentation avec l'opérateur
 
\color blue
∈
\color inherit
 par rapport à la recherche par bissection.
\end_layout

\begin_layout Subsection*
Exercice 11-3
\end_layout

\begin_layout Standard
Lisez la documentation de la fonction 
\color blue
get
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\color inherit
agissant sur les dictionnaires et utilisez-la pour rédiger une version plus
 concise d'
\color blue
invertdict
\color inherit
.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{get
\begin_inset Quotes crd
\end_inset

!(), documentation}
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
invertdict
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 11-4
\end_layout

\begin_layout Standard
Appliquez la technique 
\begin_inset Quotes cld
\end_inset

mémo
\begin_inset Quotes crd
\end_inset

 à la fonction d'Ackermann (exercice 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-7-11-2-Ackermann1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) et notez si cette technique permet d'évaluer la fonction avec des nombres
 en argument plus grands que dans sa forme initiale.
 
\end_layout

\begin_layout Subsection*
Exercice 11-5
\end_layout

\begin_layout Standard
Si vous avez résolu l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-11-15-7-hasduplicates1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, vous avez déjà une fonction appelée 
\color blue
hasduplicates
\color inherit
 qui prend un tableau comme paramètre et retourne
\color blue
 true
\color inherit
 si un objet apparaît plus d'une fois dans le tableau.
\begin_inset Index ind
status open

\begin_layout Plain Layout
hasduplicates
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Utilisez un dictionnaire pour écrire une version plus rapide et plus simple
 de 
\color blue
hasduplicates
\color inherit
.
 
\end_layout

\begin_layout Subsection*
Exercice 11-6
\end_layout

\begin_layout Standard
Deux mots sont des 
\begin_inset Quotes cld
\end_inset

paires de rotation
\begin_inset Quotes crd
\end_inset

 si vous pouvez faire tourner l'un d'eux et obtenir l'autre (voir l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-9-15-5-rotatewords1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Écrivez un programme qui lit un tableau de mots et trouve toutes les paires
 de rotation.
 
\end_layout

\begin_layout Subsection*
Exercice 11-7
\end_layout

\begin_layout Standard
Voici un autre casse-tête de 
\begin_inset CommandInset href
LatexCommand href
name "Car Talk"
target "https://www.cartalk.com/radio/puzzler"
literal "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Car Talk
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Quotes cld
\end_inset

Cette lettre a été envoyée par un certain Dan O'Leary.
 Il a récemment rencontré un mot commun d'une syllabe et de cinq lettres
 qui a la propriété unique suivante.
 Lorsque vous retirez la première lettre, les autres lettres forment un
 homophone
\begin_inset Foot
status open

\begin_layout Plain Layout

\emph on
Ce terme désigne des mots qui ont la même prononciation: « eau » et « haut
 » sont homophones.
\end_layout

\end_inset

.
 Remplacez la première lettre, c'est-à-dire remettez-la à sa place et supprimez
 la deuxième lettre et le résultat est encore un autre homophone du mot
 original.
 D'où la question: quel est le mot?
\end_layout

\begin_layout Standard

\emph on
Je vais maintenant vous donner un exemple qui ne fonctionne pas.
 Examinons le mot de cinq lettres 
\begin_inset Quotes cld
\end_inset

wrack
\begin_inset Quotes crd
\end_inset

.
 W-R-A-C-K, comme dans 
\begin_inset Quotes cld
\end_inset

to wrack with pain
\begin_inset Quotes crd
\end_inset

.
 Si j'enlève la première lettre, il me reste un mot de quatre lettres, "R-A-C-K".
 Comme dans 
\begin_inset Quotes cld
\end_inset

Holy cow, did you see the rack on that buck! It must have been a nine-pointer!
\begin_inset Quotes crd
\end_inset

 C'est un homophone parfait.
 Si vous remettez le 
\begin_inset Quotes cld
\end_inset

w
\begin_inset Quotes crd
\end_inset

 et que vous enlevez le 
\begin_inset Quotes cld
\end_inset

r
\begin_inset Quotes crd
\end_inset

, vous obtenez le mot 
\begin_inset Quotes cld
\end_inset

wack
\begin_inset Quotes crd
\end_inset

, qui est un vrai mot mais pas l'homophone des deux autres termes.
\end_layout

\begin_layout Standard

\emph on
Mais il y a au moins un mot que Dan et nous connaissons, qui donnera deux
 homophones si vous enlevez l'une des deux premières lettres pour faire
 deux nouveaux mots de quatre lettres.
 La question est de savoir quel est ce mot.
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Vous pouvez utiliser le dictionnaire de l'exercice 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-12-10-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour vérifier si une chaîne se trouve dans le tableau de mots.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Pour vérifier si deux mots sont homophones, vous pouvez utiliser le Dictionnaire
 de prononciation anglaise de la CMU.
 Vous pouvez le télécharger sur le site 
\backslash
href{http://www.speech.cs.cmu.edu/cgi-bin/cmudict}{The CMU Pronouncing Dictionary}.
 
\backslash
index{homophonie} 
\backslash
index{CMU Pronouncing Dictionary}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Écrivez un programme qui pourrait afficher tous les termes résolvant l'énigme.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Tuples"

\end_inset

Tuples
\end_layout

\begin_layout Standard
Ce chapitre présente un autre type intégré, les tuples
\begin_inset Foot
status open

\begin_layout Plain Layout
Ce néologisme est basé sur le terme mathématique N-uplet : 
\series bold
T
\series default
able 
\series bold
UPLE
\series default
t
\end_layout

\end_inset

.
 Par la suite, il montre comment les tableaux, les dictionnaires et les
 tuples peuvent être couplés.
 Nous présentons également une fonction utile pour les tableaux à arguments
 multiples ainsi que pour les opérateurs d'agrégation et de dispersion.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
T
\emph on
able
\emph default
 UPLE
\emph on
t
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip2}
\end_layout

\begin_layout Plain Layout

Il n'y a pas de consensus sur prononciation de 
\backslash
guillemotleft~tuple~
\backslash
guillemotright.
 Vous pouvez écouter comment prononcer ce mot en anglais sur 
\backslash
href{https://dictionary.cambridge.org/fr/prononciation/anglais/tuple}{ce site}.
 Il semble qu'il n'y ait pas de prononciation française recommandée.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip2}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Les tuples sont persistants
\end_layout

\begin_layout Standard
Un tuple est une séquence de valeurs.
 Celles-ci peuvent être de type quelconque et elles sont indexées par des
 entiers, de sorte que, à cet égard, les tuples ressemblent beaucoup aux
 tableaux.
 La différence notoire est que les tuples sont persistants (
\emph on
immutable
\emph default
, en anglais).
 Chaque élément peut avoir son propre type (nombres, chaînes de caractères,
 tableaux, dictionnaires, tuples).
\end_layout

\begin_layout Standard
Syntaxiquement, un tuple est une liste de valeurs séparées par des virgules:
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple, persistance
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance, tuple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t = 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Sans que cela soit nécessaire, il est courant de mettre les tuples entre
 parenthèses: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t = (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour créer un tuple avec un seul élément, il est nécessaire de ponctuer
 avec une virgule:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t = (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

,)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Tuple{Char}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Une valeur entre parenthèse sans virgule finale n'est pas un tuple:
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabularx}{0.95
\backslash
textwidth} { 
\end_layout

\begin_layout Plain Layout

    | >{
\backslash
raggedright
\backslash
arraybackslash}X   }  
\end_layout

\begin_layout Plain Layout

    
\backslash
small{
\backslash
textcolor{green}{julia>} t2 = (
\backslash
textcolor{brown}{
\backslash
textquotesingle a
\backslash
textquotesingle})} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

   
\backslash
small{
\backslash
textcolor{lightgray}{
\backslash
textquotesingle a
\backslash
textquotesingle
\backslash
string: ASCII/Unicode U+0061 (category Ll
\backslash
string: Letter, lowercase)}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

   
\backslash
small{
\backslash
textcolor{green}{julia>} typeof(t2)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

   
\backslash
small{
\backslash
textcolor{lightgray}{Char}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{tabularx}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une autre manière de créer un tuple consiste à employer la fonction interne
 
\color blue
tuple
\color inherit
.
 Sans aucun argument, elle crée un tuple vide:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 tuple()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si plusieurs arguments sont fournis, le résultat est un tuple incorporant
 tous les arguments donnés:
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t3 = tuple(1,
\color brown
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color green
pi
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(1, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset Formula $\pi$
\end_inset

 = 3.1415926535897...)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme 
\color blue
tuple
\color inherit
 est le nom d'une fonction interne, il faut éviter de l'utiliser comme nom
 de variable.
\end_layout

\begin_layout Standard
La plupart des opérateurs agissant sur les tableaux fonctionnent également
 sur des tuples.
 L'opérateur crochet 
\color blue
[
\begin_inset space ~
\end_inset

]
\color inherit
 indice tout élément d'un tuple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple, [ ]
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
[ ], tuple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t[2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, comme les tuples sont persistants, vouloir en modifier un élément
 conduit à une erreur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t[1] = (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 A
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError: no method matching setindex
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string::
\end_layout

\end_inset

NTuple{5,Char}, ::Char, ::Int64)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les opérateurs relationnels agissent sur les tuples comme avec d'autres
 séquences.
 Julia commence par comparer le premier élément de chaque séquence.
 S'ils sont égaux, Julia passe aux éléments suivants et ainsi de suite jusqu'à
 trouver des éléments qui diffèrent.
 Les éléments ultérieurs ne sont pas pris en compte (même s'il s'agit, par
 exemple, de grands nombres).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 (0, 1, 2) < (0, 3, 4)
\end_layout

\begin_layout Plain Layout

\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 (0, 1, 2000000) < (0, 3, 4)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Affectation des tuples
\end_layout

\begin_layout Standard
Il est souvent utile d'échanger les valeurs de deux variables.
 Dans le cas des affectations classiques, il est nécessaire utiliser une
 variable temporaire.
 Par exemple, pour permuter 
\color blue
a
\color inherit
 et 
\color blue
b
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
affectation de tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple, affectation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
temp = a
\end_layout

\begin_layout Plain Layout

\size small
a = b
\end_layout

\begin_layout Plain Layout

\size small
b = temp
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette solution est remplacée par l'affectation de tuples qui s'avère plus
 élégante:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
a, b = b, a
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le membre de gauche de l'affectation est un tuple de variables, alors que
 le membre de droite est un tuple d'expressions.
 Chaque valeur est attribuée à sa variable respective.
 Toutes les expressions du membre de droite sont évaluées avant toute affectatio
n.
\end_layout

\begin_layout Standard
Par ailleurs, le nombre de variables du membre de gauche doit être inférieur
 au nombre de valeurs du membre de droite:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 (a, b) = (1, 2, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(1, 2, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a, b, c = 1, 2
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 BoundsError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 attempt to access (1, 2) at index [3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Plus généralement, le membre de droite peut être tout type de séquence
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence
\end_layout

\end_inset

 (chaîne, tableau ou tuple).
 Par exemple, pour séparer une adresse électronique en un nom d'utilisateur
 et un domaine, vous pouvez écrire
\begin_inset Foot
status open

\begin_layout Plain Layout
Anecdotiquement, SPQR signifie 
\begin_inset CommandInset href
LatexCommand href
name "Senatus populusque romanus"
target "https://fr.wikipedia.org/wiki/Senatus_populusque_romanus"
literal "false"

\end_inset


\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 addr = 
\color brown
"jules.cesar@rome.spqr"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
jules.cesar@rome
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 uname, domain = split(addr, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 @
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2-element Array{SubString{String},1}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"jules.cesar"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"rome.spqr"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La valeur de retour de 
\color blue
split 
\color inherit
est un tableau à deux éléments: le premier élément est attribué à 
\color blue
uname
\color inherit
, le second à 
\color blue
domain
\color inherit
.
 Si le séparateur avait été 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 .
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, Julia aurait affiché trois chaînes.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{split()}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Les tuples en tant que valeurs retournées
\end_layout

\begin_layout Standard
À vrai dire, une fonction ne peut retourner qu'une seule valeur
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur retournée, tuple
\end_layout

\end_inset

.
 Toutefois, si la valeur est un tuple, l'effet est le même que si elle retournai
t plusieurs valeurs.
 Par exemple, soit deux entiers dont on veut obtenir par division le quotient
 et le reste.
 Comme il est inefficace de calculer 
\color blue
x ÷ y
\color inherit
 puis 
\color blue
x % y
\color inherit
, il est préférable de réaliser ces opérations simultanément.
\end_layout

\begin_layout Standard
La fonction interne 
\color blue
divrem
\color inherit
 qui prend deux arguments retourne un tuple de deux valeurs, le quotient
 et le reste.
 Le résultat est enregistrable sous forme de tuple: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
divrem()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = divrem(7, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(2, 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il est aussi possible d'utiliser l'affectation des tuples pour enregistrer
 les éléments séparément:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 q, r = divrem(7, 3)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@show
\color inherit
 q r
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
q = 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
r = 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un exemple de fonction retournant un tuple: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@show}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 minmax(t) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minimum(t), maximum(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
maximum
\color inherit
 et 
\color blue
minimum
\color inherit
 sont des fonctions internes qui identifient les éléments les plus petits
 et les plus grands d'une séquence.
 
\color blue
minmax
\color inherit
 calcule les deux et retourne un tuple de deux valeurs.
 La fonction interne 
\color blue
extrema
\color inherit
 est plus efficace.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
extrema()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
minmax()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
maximum()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
minimum()
\end_layout

\end_inset


\end_layout

\begin_layout Section
Tuples et arguments multiples
\end_layout

\begin_layout Standard
Les fonctions peuvent prendre un nombre variable d'arguments.
 Un nom de paramètre qui se termine par trois points consécutifs (
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

) 
\emph on
agrège
\emph default
 les arguments dans un tuple.
 Par exemple, 
\color blue
printall
\color inherit
 prend un nombre quelconque d'arguments et les affiche:
\begin_inset Index idx
status open

\begin_layout Plain Layout
arguments multiples, tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
args...
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
printall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printall(args...)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(args)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le nom du 
\emph on
paramètre d'agrégation
\emph default
 est libre, quoique le terme 
\color blue
args
\color inherit
 soit conventionnel.
 Voici comment procède la fonction:
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramètre d'agrégation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
agrégation, paramètre
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printall(1, 2.0, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(1, 2.0, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À l'agrégation s'oppose la 
\emph on
dispersion
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Dans le monde de Julia, l'agrégation est souvent appelée 
\begin_inset Quotes cld
\end_inset


\emph on
slurp
\emph default

\begin_inset Quotes crd
\end_inset

 et la dispersion 
\begin_inset Quotes cld
\end_inset


\emph on
splat
\emph default

\begin_inset Quotes crd
\end_inset

, en anglais du moins.
\end_layout

\end_inset

.
 Soit une séquence de valeurs qu'on souhaite passer à une fonction sous
 forme d'arguments multiples, il est alors possible d'utiliser l'opérateur
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
...
\color inherit

\begin_inset space ~
\end_inset

.
 Par exemple, 
\color blue
divrem
\color inherit
 prend exactement deux arguments, mais cette fonction ne peut pas manipuler
 directement de tuples: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dispersion
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
slurp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
splat
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = (7, 3);
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 divrem(t) 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching divrem(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Tuple{Int64,Int64})
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En revanche, il est envisageable de disperser le tuple:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 divrem(t...)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(2, 1)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De nombreuses fonctions internes utilisent des tuples à arguments en nombre
 variable.
 C'est le cas de 
\color blue
max
\color inherit
 et 
\color blue
min
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
max(), tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
min(), tuple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 max(1, 2, 3) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En revanche la fonction 
\color blue
sum
\color inherit
 ne traite pas les tuples: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sum(), tuple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sum(1, 2, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching sum(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 12-1
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
sumall
\color inherit
 qui prend un nombre quelconque d'arguments et retourne leur somme.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
sumall
\end_layout

\end_inset


\end_layout

\begin_layout Section
Tableaux et tuples
\end_layout

\begin_layout Standard

\color blue
zip
\color inherit
 est une fonction interne qui prend deux ou plusieurs séquences et retourne
 une collection de tuples où chacun contient un élément de chaque séquence.
 Le nom de la fonction fait référence à une fermeture éclair.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau et tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple et tableau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
zip()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cet exemple permet de 
\begin_inset Quotes cld
\end_inset

zipper
\begin_inset Quotes crd
\end_inset

 une chaîne et un tableau:
\begin_inset Index idx
status open

\begin_layout Plain Layout
zipper
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 s =
\color brown
 "abc"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\color green
julia>
\color inherit
 t = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 zip(s, t) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
zip("abc", [1, 2, 3])
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat est un 
\emph on
objet zip
\emph default
 capable d'itérer
\begin_inset Index idx
status open

\begin_layout Plain Layout
itérer
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
itérateur
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Itérer: avec la signification de parcourir les éléments d'un conteneur (au
 sens large).
 Itérateur: objet capable de parcourir tous les éléments contenus dans un
 autre objet.
\end_layout

\end_inset

 à travers les paires
\begin_inset Foot
status open

\begin_layout Plain Layout
La commande 
\color blue
typeof(zip(s,t))
\color inherit
 retourne 
\color lightgray
Base.Iterators.Zip{Tuple{String,Array{Int64,1}}}
\end_layout

\end_inset

.
 L'utilisation la plus courante de 
\color blue
zip
\color inherit
 se rencontre dans une boucle : 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> for 
\color black
pair
\color green
 in 
\color black
zip(s, t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(pair)
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 1) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 3)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un objet zip
\begin_inset Index idx
status open

\begin_layout Plain Layout
zip, objet
\end_layout

\end_inset

 est une espèce d'itérateur agissant sur une séquence.
 D'une certaine manière, les itérateurs sont similaires aux tableaux, mais,
 contrairement à ces derniers, il n'est pas possible d'utiliser les indices
 pour sélectionner un élément donné de l'itérateur.
\end_layout

\begin_layout Standard
Afin d'utiliser des opérateurs et des fonctions de tableau, il est astucieux
 d'utiliser un objet zip pour créer un tableau:
\begin_inset Index idx
status open

\begin_layout Plain Layout
collect(), zip()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
zip(), collect()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 collect(zip(s, t))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3-element Array{Tuple{Char,Int64},1}
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 3)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat obtenu est un tableau de tuples.
 Dans cet exemple, chaque tuple contient un caractère de la chaîne et l'indice
 correspondant du tableau.
\end_layout

\begin_layout Standard
Si les séquences ne sont pas de même longueur, la plus courte détermine
 la taille du résultat.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
collect(zip(
\color brown
"Yann"
\color inherit
,
\color brown
 "Le Cun"
\color inherit
))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4-element Array{Tuple{Char,Char},1}
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 Y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 L
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 e
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 C
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'affectation des tuples est exploitable dans une boucle 
\color blue
for
\color inherit
 pour parcourir un ensemble des tuples: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [(
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 1), (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 2), (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
,
\color inherit
 3)]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> for
\color inherit
 (letter, number) 
\color green
in
\color inherit
 t 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(number,
\color brown
 " "
\color inherit
, letter)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1 a
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2 b
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3 c
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À chaque fois, Julia sélectionne le tuple suivant dans le tableau et attribue
 les éléments à 
\color blue
letter
\color inherit
 et 
\color blue
number
\color inherit
.
 Les parenthèses autour de 
\color blue
(letter, number)
\color inherit
 sont obligatoires.
\end_layout

\begin_layout Standard
En combinant
\color blue
 zip
\color inherit
, 
\color blue
for
\color inherit
 et l'affectation de tuples, on obtient une expression utile pour parcourir
 deux (voire plusieurs) séquences simultanément.
 Par exemple, 
\color blue
hasmatch
\color inherit
 prend deux séquences, 
\color blue
t1
\color inherit
 et 
\color blue
t2
\color inherit
, et retourne 
\color blue
true
\color inherit
 s'il y a un indice 
\color blue
i
\color inherit
 tel que 
\color blue
t1[i] == t2[i]
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
hasmatch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 hasmatch(t1, t2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 (x, y) 
\color green
in
\color inherit
 zip(t1, t2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x == y 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green

\begin_inset space ~
\end_inset

return true
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

false 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
S'il faut parcourir les éléments d'une séquence et leurs indices, la fonction
 interne 
\color blue
enumerate
\color inherit
 s'avère utile: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
enumerate()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> for
\color inherit
 (index, element)
\color green
 in
\color inherit
 enumerate(
\color brown
"abc"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(index, 
\color brown
" "
\color inherit
, element)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color brown

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1 a
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2 b
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3 c
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat de la fonction 
\color blue
enumerate
\color inherit
 est un objet recensé qui parcourt une séquence de paires.
 Chaque paire contient un indice (à partir de 1) et un élément de la séquence
 traitée.
\end_layout

\begin_layout Section
Dictionnaires et tuples
\end_layout

\begin_layout Standard
Les dictionnaires peuvent être utilisés comme des itérateurs qui permettent
 de parcourir les paires clé-valeur.
 Nous pouvons y recourir dans une boucle 
\color blue
for
\color inherit
 de ce type: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionnaire et tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple et dictionnaire
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 d = Dict(
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
=>1, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
=>2, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
=>3)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> for
\color inherit
 (key, value) 
\color green
in
\color inherit
 d 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(key, 
\color brown
" "
\color inherit
, value) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
a 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
c 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
b 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme on peut s'y attendre, les paires clé-valeur ne sont pas classées de
 manière ordonnée.
\end_layout

\begin_layout Standard
Inversement, un tableau de tuples est utilisable pour initialiser un nouveau
 dictionnaire: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = [(
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 1), (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 3), (
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
, 2)]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 d = 
\color brown
Dict
\color inherit
(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Char,Int64} with 3 entries: 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 3 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En combinant 
\color blue
Dict
\color inherit
 et 
\color blue
zip
\color inherit
, on accède à un procédé concis de création d'un dictionnaire: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dict(), zip()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
zip(), Dict()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 d = 
\color brown
Dict
\color inherit
(zip(
\color brown
"abc"
\color inherit
, 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

3))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Char,Int64} with 3 entries:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset

=> 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il est courant d'utiliser les tuples comme clés dans les dictionnaires.
 Par exemple, un annuaire téléphonique peut établir une correspondance entre
 des paires 
\begin_inset Quotes cld
\end_inset

nom – prénom
\begin_inset Quotes crd
\end_inset

 d'une part et de l'autre des numéros de téléphone.
 En supposant que nous ayons défini 
\color blue
last 
\color inherit
(pour le nom de famille), 
\color blue
first
\color inherit
 (pour le prénom) et 
\color blue
number
\color inherit
, nous pourrions écrire:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
directory[last, first] = number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression entre crochets est un tuple.
 Parcourir ce dictionnaire peut se faire 
\emph on
via
\emph default
 l'affectation des tuples.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 ((last, first), number)
\color green
 in
\color inherit
 directory
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(first, 
\color brown
" "
\color inherit
, last, 
\color brown
" "
\color inherit
, number) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette boucle parcourt les paires clé-valeur dans 
\color blue
directory
\color inherit
, ces paires étant des tuples.
 Elle attribue les éléments de la clé dans chaque tuple à
\color blue
 last
\color black
 et
\color blue
 first
\color inherit
 ainsi que la valeur à 
\color blue
number
\color inherit
.
 Ensuite, elle affiche le nom et le numéro de téléphone correspondant.
\end_layout

\begin_layout Standard
Il existe deux façons de représenter les tuples dans un diagramme d'état.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple, diagramme d'état
\end_layout

\end_inset

 La version détaillée montre les indices et les éléments tels qu'ils apparaissen
t dans un tableau.
 Par exemple, le tuple 
\color blue
("Rabelais", "François")
\color inherit
 apparaîtra comme dans la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-associé-tuple-clees-john"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/Diagramme-état-François-Rabelais-inkscape.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-associé-tuple-clees-john"

\end_inset

Diagramme d'état associé au tuple 
\color blue
("Rabelais", "François")
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cependant, dans un diagramme plus étendu, il est pratique d'omettre les
 détails.
 Par exemple, un diagramme de l'annuaire téléphonique peut apparaître comme
 dans la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'état-associé-répertoire-téléphonique"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
Ici, les tuples sont représentés en utilisant la syntaxe de Julia comme
 raccourci graphique
\begin_inset Foot
status open

\begin_layout Plain Layout
Le numéro de téléphone indiqué dans le diagramme est le numéro du standard
 de Radio France (même si le numéro est public, ne l'appelez pas).
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-état_répertoire_tél_inkscape.svg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'état-associé-répertoire-téléphonique"

\end_inset

Diagramme d'état associé au répertoire téléphonique.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Séquences de séquences
\end_layout

\begin_layout Standard
Notre attention s'est portée sur les tableaux de tuples.
 Néanmoins, presque tous les exemples de ce chapitre fonctionnent également
 avec des tableaux de tableaux, des tuples de tuples et des tuples de tableaux.
 Pour éviter d'énumérer les combinaisons possibles, il est parfois plus
 facile de parler de 
\begin_inset Quotes cld
\end_inset

séquences de séquences
\begin_inset Quotes crd
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence@séquence de séquences
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans de nombreux contextes, les différents types de séquences (chaînes de
 caractères, tableaux et tuples) peuvent être utilisés de manière interchangeabl
e.
 Alors, comment choisir l'une d'entre elles plutôt que les autres?
\end_layout

\begin_layout Standard
Tout d'abord, les chaînes de caractères sont plus limitées que les autres
 séquences, car les éléments doivent absolument être des caractères.
 Elles sont également persistantes.
 S'il faut pouvoir modifier les caractères d'une chaîne (plutôt que d'en
 créer une nouvelle), un tableau de caractères est plus pratique.
\end_layout

\begin_layout Standard
Les tableaux sont plus courants que les tuples, principalement parce qu'ils
 sont non persistants.
 Malgré cela, il existe quelques cas où les tuples leur sont préférés:
\end_layout

\begin_layout Itemize
dans certains contextes, comme une instruction de retour, il est syntaxiquement
 plus simple de créer un tuple qu'un tableau,
\end_layout

\begin_layout Itemize
quand une séquence est passée en argument d'une fonction, l'utilisation
 de tuples réduit le risque de comportements inattendus dû à l'
\emph on
aliasing
\emph default
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
aliasing
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
pour des raisons de performance, le compilateur pouvant se focaliser sur
 le type.
\end_layout

\begin_layout Standard
Comme les tuples sont persistants, ils ne fournissent pas de fonctions telles
 que
\color blue
 sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 et 
\color blue
reverse
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 qui modifient les tableaux existants.
 Cependant, Julia fournit la fonction interne 
\color blue
sort
\color inherit
 qui prend un tableau et retourne un nouveau tableau avec les mêmes éléments
 triés et ordonnés.
 Julia met aussi à disposition la fonction 
\color blue
reverse
\color inherit
 qui prend une séquence quelconque et retourne une séquence du même type
 dans l'ordre inverse.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{sort
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{reverse
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Les tableaux, les dictionnaires et les tuples sont des exemples de structures
 de données.
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset

 Plus loin dans ce document, nous abordons les structures de données composites
 comme des tableaux de tuples ou des dictionnaires qui contiennent des tuples
 comme clés et des tableaux comme valeurs.
 Les structures de données composites sont utiles.
 Malheureusement, elles sont sujettes à des erreurs de forme, c'est-à-dire
 des erreurs causées lorsqu'une structure de données présente un mauvais
 type, une mauvaise taille ou une mauvaise structure.
 Par exemple, si vous attendez à un tableau avec un entier et que vous recevez
 un entier ordinaire (c'est-à-dire non incorporé à un tableau), la structure
 de données ne fonctionnera pas.
\end_layout

\begin_layout Standard
Julia permet d'attacher un type aux éléments d'une séquence.
 La manière de procéder est détaillée dans le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Déploiement-multiple"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Spécifier le type contribue à éliminer beaucoup d'erreurs de forme.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
tuple séquence persistante d'éléments où chacun de ceux-ci peut avoir son
 propre type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset


\end_layout

\begin_layout Description
affectation
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

tuples affection avec une séquence sur le membre de droite et un tuple de
 variables sur le membre de gauche.
 Le membre de droite est d'abord évalué et ses éléments sont ensuite affectés
 aux variables du membre de gauche, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
affectation de tuple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple, affectation de
\end_layout

\end_inset


\end_layout

\begin_layout Description
agrégation opération consistant à assembler un tuple d'argument de longueur
 variable, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
agrégation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
slurp
\end_layout

\end_inset


\end_layout

\begin_layout Description
dispersion opération consistant à traiter une séquence comme une liste d'argumen
ts, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dispersion
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
splat
\end_layout

\end_inset


\end_layout

\begin_layout Description
objet
\begin_inset space ~
\end_inset

zip résultat de l'appel de la fonction interne 
\color blue
zip
\color inherit
.
 Objet qui itère à travers une séquence de tuples, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
zip, objet
\end_layout

\end_inset


\end_layout

\begin_layout Description
itérateur objet qui peut itérer à travers une séquence, mais qui ne fournit
 pas d'opérateurs ni de fonctions de tableau, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
itérateur
\end_layout

\end_inset


\end_layout

\begin_layout Description
structure
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

données collection de valeurs connexes, souvent organisées en tableau, dictionna
ires, tuples, etc., 
\begin_inset Index idx
status open

\begin_layout Plain Layout
données, structure de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
structure de données
\end_layout

\end_inset


\end_layout

\begin_layout Description
erreur
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

forme erreur causée par une valeur ayant une forme incorrecte, c'est-à-dire
 un type ou une taille incorrecte, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
erreur de forme
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection
Exercice 12-2
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
mostfrequent
\color inherit
 qui prend une chaîne de caractères et affiche les lettres par ordre décroissant
 d'occurrence.
 Trouvez des échantillons de texte de plusieurs langues différentes et voyez
 comment la fréquence des lettres varie d'une langue à l'autre.
 Comparez vos résultats avec les tableaux répertoriés sur les sites 
\begin_inset CommandInset href
LatexCommand href
name "anglais"
target "https://en.wikipedia.org/wiki/Letter_frequencies"
literal "false"

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "français"
target "https://fr.wikipedia.org/wiki/Fr%C3%A9quence_d%27apparition_des_lettres_en_fran%C3%A7ais"
literal "false"

\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
mostfrequent
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-13-10-2"

\end_inset

Exercice 12-3
\end_layout

\begin_layout Standard
Encore quelques anagrammes...
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
anagramme
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez un programme qui lit une liste de mots à partir d'un fichier (voir
 la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lecture-de-listes-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

) et imprime les ensembles de mots qui sont des anagrammes.
 Voici un échantillon de ce à quoi la sortie pourrait ressembler avec le
 fichier 
\color blue
mots_FR.txt
\color inherit
:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="100mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[
\color brown
"mari"
\color inherit
,
\color brown
 "mira"
\color inherit
, 
\color brown
"rami"
\color inherit
, 
\color brown
"rima"
\color inherit
] 
\end_layout

\begin_layout Plain Layout
[
\color brown
"marche"
\color inherit
, 
\color brown
"charme"
\color inherit
] 
\end_layout

\begin_layout Plain Layout
[
\color brown
"mienne"
\color inherit
, 
\color brown
"ennemi"
\color inherit
]
\end_layout

\begin_layout Plain Layout
[
\color brown
"alimenter"
\color inherit
, 
\color brown
"terminale"
\color inherit
]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Si vous voulez construire un dictionnaire qui établit une correspondance
 entre une collection de lettres et une série de mots qui pouvent être orthograp
hiés avec ces lettres, comment pouvez-vous représenter la collection de
 lettres de manière à ce qu'elle puisse servir de clé?
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Modifiez le programme précédent de manière à ce qu'il affiche les anagrammes
 par ordre décroissant de taille.
\end_layout

\begin_layout Enumerate
Au jeu de Scrabble, un 
\begin_inset Quotes cld
\end_inset

scrabble
\begin_inset Foot
status open

\begin_layout Plain Layout
En anglais, il s'agit d'un 
\begin_inset Quotes cld
\end_inset

bonus
\begin_inset Quotes crd
\end_inset

 (Grande-Bretagne) ou d'un 
\begin_inset Quotes cld
\end_inset

bingo
\begin_inset Quotes crd
\end_inset

 (États-Unis).
 
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 est un coup où les sept lettres de votre grille sont posées en les combinant
 à une lettre du tableau, pour former un mot de huit lettres.
 Quelle collection de 8 lettres forme le plus de 
\begin_inset Quotes cld
\end_inset

scrabble
\begin_inset Quotes crd
\end_inset

 possible?
\end_layout

\begin_layout Subsection*
Exercice 12-4
\end_layout

\begin_layout Standard
Deux mots forment une paire de métathèse
\begin_inset Index idx
status open

\begin_layout Plain Layout
metathese@métathèse
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Linguistiquement, il s'agit de la permutation de deux phonèmes dans la chaîne
 parlée (par exemple, 
\emph on
aéroplane
\emph default
 devient en français populaire 
\emph on
aréoplane
\emph default
).
 
\end_layout

\end_inset

 si vous pouvez transformer l'un en l'autre en échangeant deux lettres.
 Par exemple, 
\begin_inset Quotes cld
\end_inset

converser
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

conserver
\begin_inset Quotes crd
\end_inset

.
 Écrivez un programme qui trouve toutes les paires de métathèse dans le
 dictionnaire.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Ne testez pas toutes les paires de mots et ne testez pas tous les échanges
 possibles.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Remark*
Cet exercice est inspiré d'un exemple se trouvant sur 
\begin_inset CommandInset href
LatexCommand href
name "le site « Puzzlers.org»"
target "http://puzzlers.org"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection*
Exercice 12-5
\end_layout

\begin_layout Standard
Voici un autre exemple tiré du site 
\begin_inset CommandInset href
LatexCommand href
name "Car Talk"
target "https://www.cartalk.com/radio/puzzler"
literal "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Car Talk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset


\emph on
Quel est le mot anglais le plus long, qui reste un mot anglais valide, car
 vous enlevez ses lettres une à une ?
\end_layout

\begin_layout Standard

\emph on
Maintenant, les lettres peuvent être enlevées à l'une ou l'autre extrémité,
 ou au milieu, mais vous ne pouvez pas réarranger les lettres.
 Chaque fois que vous laissez tomber une lettre, vous vous retrouvez avec
 un autre mot anglais.
 Si vous faites cela, vous finirez par avoir une lettre et ce sera aussi
 un mot anglais — un mot que l'on trouve dans le dictionnaire.
 Je veux savoir quel est le mot le plus long et combien de lettres il comporte.
\end_layout

\begin_layout Standard

\emph on
Je vais vous donner un petit exemple modeste : Sprite.
 D'accord? On commence par sprite, on enlève une lettre, une de l'intérieur
 du mot, on enlève le r, et on se retrouve avec le mot spite, puis on enlève
 le e à la fin, on se retrouve avec spit, on enlève le s, on se retrouve
 avec pit, it et I.
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Écrivez un programme pour trouver tous les mots qui peuvent être réduits
 de cette façon, puis trouvez le plus long.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Le commentaire est associé à la langue anglaise.
 Utilisez 
\backslash
textcolor{blue}{mots
\backslash
_FR.txt}  (voir la section~
\backslash
nameref{sec:Lecture-de-listes-de-mots}).
 Cet exercice est un peu plus difficile que la plupart des autres, aussi
 voici quelques suggestions:
\end_layout

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout


\backslash
item vous pourriez écrire une fonction qui prend un mot et calcule un tableau
 de tous les mots qui peuvent être formés en enlevant une lettre.
 Ce sont les 
\backslash
guillemotleft~mots-fils~
\backslash
guillemotright,
\end_layout

\begin_layout Plain Layout


\backslash
item récursivement, un mot est réductible si l'un de ses fils est réductible.
 Comme cas de base, vous pouvez considérer la chaîne vide comme réductible,
 
\end_layout

\begin_layout Plain Layout


\backslash
item la chaîne vide peut être additionnée au dictionnaire,
\end_layout

\begin_layout Plain Layout


\backslash
item pour améliorer la performance de votre programme, vous pouvez utiliser
 un 
\backslash
guillemotleft~mémo ~
\backslash
guillemotright~pour les mots connus pour être réductibles.
\end_layout

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Étude de cas
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 structures de données — choix
\end_layout

\begin_layout Standard
À ce stade, nous avons appris à connaître les structures de données de base
 en Julia et nous avons vu certains des algorithmes qui les exploitent.
\end_layout

\begin_layout Standard
Ce chapitre présente une étude de cas avec des exercices qui permettent
 de réfléchir à la sélection des structures de données en fonction du problème
 à résoudre.
\end_layout

\begin_layout Section
Analyse de la fréquence des mots
\end_layout

\begin_layout Standard
Comme d'habitude, il convient au moins d'essayer de résoudre les exercices
 avant d'en lire les solutions.
\begin_inset Index idx
status open

\begin_layout Plain Layout
mots, fréquence
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mots, occurrence
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-14-1-1"

\end_inset

Exercice 13-1
\end_layout

\begin_layout Standard
Écrivez un programme qui lit un fichier texte, découpe chaque ligne en mots
 et supprime les espaces ainsi que la ponctuation.
 Le programme doit ensuite convertir ces mots en minuscules.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

La fonction 
\backslash
textcolor{blue}{isletter} teste si un caractère est alphabétique.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-14-1-2"

\end_inset

Exercice 13-2
\end_layout

\begin_layout Standard
Rendez-vous sur le site du 
\begin_inset CommandInset href
LatexCommand href
name "Projet Gutenberg"
target "https://gutenberg.org"
literal "false"

\end_inset

 et téléchargez votre livre préféré en format texte brut (pour les livres
 en français, suivez 
\begin_inset CommandInset href
LatexCommand href
name "ce lien"
target "http://www.gutenberg.org/browse/languages/fr"
literal "false"

\end_inset

).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
projet GUTenberg
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modifiez votre programme par rapport à l'exercice précédent pour parcourir
 le livre que vous avez téléchargé.
 Passez sur les informations d'en-tête au début du fichier et traitez le
 reste des mots comme dans l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-14-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Modifiez ensuite le programme pour compter le nombre total de mots dans
 le livre et la fréquence d'utilisation de chaque mot.
\end_layout

\begin_layout Standard
Affichez le nombre de mots différents utilisés dans le livre.
 Comparez différents livres écrits à des époques différentes par des auteurs
 différents.
 Quel auteur emploie-t-il le vocabulaire le plus étendu?
\end_layout

\begin_layout Subsection*
Exercice 13-3
\end_layout

\begin_layout Standard
Modifiez le programme de l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-14-1-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour imprimer les 20 mots les plus fréquemment utilisés dans le livre que
 vous avez choisi.
\end_layout

\begin_layout Subsection*
Exercice 13-4
\end_layout

\begin_layout Standard
Modifiez le programme précédent pour lire une liste de mots, puis affichez
 tous les mots du livre qui ne figurent pas dans la liste de mots.
 Combien d'entre eux résultent de fautes de frappe? Combien d'entre eux
 sont des mots courants qui devraient se trouver dans la liste de mots?
 Combien d'entre eux sont rares?
\end_layout

\begin_layout Section
Nombres aléatoires
\end_layout

\begin_layout Standard
Avec les mêmes données en entrée, la plupart des programmes informatiques
 produisent les mêmes données en sortie à chaque exécution.
 Ces programmes sont dits déterministes.
 Le 
\emph on
déterminisme
\emph default
 est généralement souhaité, puisque nous souhaitons que le même calcul donne
 le même résultat.
 Cependant, dans certaines applications (comme la sécurité informatique,
 l'analyse mathématique, les jeux, etc.), nous tenons à ce que l'ordinateur
 produise des données aléatoires.
\begin_inset Index idx
status open

\begin_layout Plain Layout
determinisme@déterminisme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
aléatoire
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
nombre aléatoire
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rendre un programme véritablement non déterministe (c'est-à-dire stochastique)
 est une tâche difficile.
\begin_inset Index idx
status open

\begin_layout Plain Layout
stochasticité
\end_layout

\end_inset

 Néanmoins, il existe des moyens de le rendre au moins quasi non déterministe.
 Un de ces moyens consiste à utiliser des algorithmes qui fournissent des
 nombres pseudo-aléatoires.
\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudo-aléatoire
\end_layout

\end_inset

 Ces nombres ne sont pas vraiment aléatoires, parce qu'ils sont produits
 par un calcul déterministe, mais, en première analyse, il est pratiquement
 impossible de les distinguer de nombres réellement sortis au hasard.
\end_layout

\begin_layout Standard
La fonction
\color blue
 rand
\color inherit
 retourne un flottant aléatoire entre 0.0 et 1.0 (y compris 0.0, mais pas 1.0).
 Chaque fois que 
\color blue
rand
\color inherit
 est appelée, un nombre extrait d'une longue série est produit.
 Par exemple, nous pouvons faire tourner cette boucle:
\begin_inset Index idx
status open

\begin_layout Plain Layout
rand()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x = rand()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(x)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction
\color blue
 rand
\color inherit
 est susceptible de prendre un itérateur
\begin_inset Index idx
status open

\begin_layout Plain Layout
itérateur
\end_layout

\end_inset

 ou un tableau comme argument et elle retourne un élément aléatoire:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x = rand(1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

6) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(x, 
\color brown
" "
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 13-5
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
choosefromhist
\color inherit
 qui prend un histogramme tel que défini dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Les-dictionnaires-collections-compteurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et qui retourne une valeur aléatoire de l'histogramme choisi avec une probabili
té proportionnelle à la fréquence.
 Par exemple, pour cet histogramme
\begin_inset Index idx
status open

\begin_layout Plain Layout
histogramme
\end_layout

\end_inset

: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
choosefromhist
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t = [
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color black
]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 histogram(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 2 entries
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

=> 2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 
\begin_inset space ~
\end_inset

=> 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Votre fonction devrait retourner 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 avec une probabilité de 
\begin_inset Formula $\nicefrac{2}{3}$
\end_inset

 et 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

 b
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
 avec une probabilité de 
\begin_inset Formula $\nicefrac{1}{3}$
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Histogramme-des-mots"

\end_inset

Histogramme des mots
\end_layout

\begin_layout Standard
Dans un premier temps, essayez les exercices précédents avant de poursuivre.
 Dans un second temps, rendez-vous sur 
\begin_inset CommandInset href
LatexCommand href
name "cette page"
target "http://www.gutenberg.org/cache/epub/19657/pg19657.txt"
literal "false"

\end_inset

 où vous pouvez télécharger le texte brut UTF-8 de l'
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvre de Victor Hugo
\begin_inset Index idx
status open

\begin_layout Plain Layout
Hugo, Victor
\end_layout

\end_inset

 intitulée « 
\emph on
Notre-Dame de Paris
\emph default
 ».
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Notre-Dame de Paris
\end_layout

\end_inset

 Une fois le fichier enregistré sous 
\color blue
notre_dame_de_paris.txt
\color inherit
, supprimez l'en-tête jusqu'au titre 
\begin_inset Quotes cld
\end_inset

LIVRE PREMIER
\begin_inset Quotes crd
\end_inset

 non inclus.
 
\end_layout

\begin_layout Standard
À présent, voici un programme qui lit un fichier et construit un histogramme
 des mots inclus dans ce fichier: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
processfile
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
processline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 processfile(filename) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

hist = Dict()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 line
\color green
 in
\color inherit
 eachline(filename)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

processline(line, hist)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

hist
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 processline(line, hist)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

line = replace(line, 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset

-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\color inherit
=>
\begin_inset space ~
\end_inset

 
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textquotesingle
\end_layout

\end_inset


\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 word 
\color green
in
\color inherit
 split(line)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

word = string(filter(isletter, [word...])...)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

word = lowercase(word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

hist[word] = get
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(hist, word, 0) + 1 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\color inherit
;
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
hist = processfile(
\color brown
"/home/chemin_vers_fichier/notre_dame_de_paris.txt"
\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ce programme lit le fichier 
\color blue
notre_dame_de_paris.txt
\color inherit
.
\end_layout

\begin_layout Standard

\color blue
processfile
\color inherit
 parcourt en boucle les lignes du fichier, les passant une à une à 
\color blue
processline
\color inherit
.
 L'histogramme 
\color blue
hist
\color inherit
 est utilisé comme un accumulateur.
\end_layout

\begin_layout Standard

\color blue
processline
\color inherit
 utilise la fonction 
\color blue
replace
\color inherit
 pour remplacer les traits d'union par des espaces avant d'utiliser 
\color blue
split
\color inherit
 pour diviser la ligne traitée en un tableau de chaînes de caractères.
 La boucle 
\color blue
for
\color inherit
 de 
\color blue
processline
\color inherit
 traverse le tableau de mots et utilise 
\color blue
filter
\color inherit
, 
\color blue
islettre
\color inherit
 et 
\color blue
lowercase
\color inherit
 pour supprimer la ponctuation et convertir les caractères en minuscules.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:C'est-un-raccourci"

\end_inset

C'est un raccourci que de déclarer: 
\begin_inset Quotes cld
\end_inset

les chaînes de caractères sont converties
\begin_inset Quotes crd
\end_inset

.
 En effet, les chaînes sont persistantes.
 En réalité, une fonction comme 
\color blue
lowercase
\color inherit
 retourne de nouvelles chaînes.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
lowercase()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enfin, 
\color blue
processline
\color inherit
 met à jour l'histogramme soit en créant un nouvel élément en cas de première
 détection, soit en incrémentant un élément existant.
\begin_inset Index ind
status open

\begin_layout Plain Layout
processline
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
processfile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour compter le nombre total de mots dans le fichier, il faut additionner
 les fréquences dans l'histogramme:
\begin_inset Index idx
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
totalwords
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 totalwords(hist)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sum(values(hist)) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le nombre de mots différents n'est que le nombre d'éléments dans le dictionnaire
 : 
\begin_inset Index ind
status open

\begin_layout Plain Layout
differentwords
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 differentwords(hist) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

length(hist)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici le code permettant d'afficher les résultats:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(
\color brown
"Nombre total de mots
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 "
\color inherit
, totalwords(hist)) 
\end_layout

\begin_layout Plain Layout

\size small
Nombre total de mots
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 172053
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(
\color brown
"Nombre de mots différents
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 "
\color inherit
, differentwords(hist)) 
\end_layout

\begin_layout Plain Layout

\size small
Nombre de mots différents
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 17510
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Mots les plus communs
\end_layout

\begin_layout Standard
Pour trouver les mots les plus courants, nous pouvons (i) créer un tableau
 de tuples où chacun d'eux contient un mot et sa fréquence d'apparition
 et (ii) le trier.
 La fonction suivante prend un histogramme et retourne un tableau de tuples
 d'occurrence des mots: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
mostcommon
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 mostcommon(hist)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = []
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 (key, value)
\color green
 in
\color inherit
 hist
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, (value, key)) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

reverse(sort(t))
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans chaque tuple, la fréquence apparaît en premier, de sorte que le tableau
 résultant est trié par fréquences.
 Voici une boucle qui affiche les 10 mots les plus courants:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{push
\begin_inset Quotes crd
\end_inset

!()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
t = mostcommon(hist) 
\end_layout

\begin_layout Plain Layout

\size small
println
\color brown
("Les mots les plus courants sont
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 (freq, word)
\color green
 in
\color inherit
 t[1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(word, 
\color brown
"
\backslash
t"
\color inherit
, freq)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Plutôt qu'un espace, un caractère de tabulation (
\color blue

\backslash
t
\color inherit
) est employé comme séparateur.
 De cette manière, la deuxième colonne est alignée.
 Voici les résultats pour 
\emph on
Notre-Dame de Paris
\emph default
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tabulation, 
\backslash
t
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Les mots les plus courants sont
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10mm">
<column alignment="left" valignment="top" width="20mm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
de
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8263
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
la
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5427
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
et
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4585
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
le
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4124
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
à
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3363
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
les
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2456
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10mm">
<column alignment="left" valignment="top" width="20mm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
il
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2446
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
un
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2042
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
que
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2033
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
qui
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1978
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Ce code peut être simplifié en utilisant le mot-clé 
\backslash
textcolor{blue}{rev} associé à la fonction 
\backslash
textcolor{blue}{sort}.
 À ce sujet, il est judicieux de consulter la page de  
\backslash
href{https://docs.julialang.org/en/v1/base/sort/#Base.sort}{documentation de
 sort}.
 
\backslash
index{sort, documentation} 
\backslash
index{rev(), sort()}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Paramètres optionnels
\end_layout

\begin_layout Standard
Nous avons vu des fonctions internes à Julia qui prennent des arguments
 optionnels (voir l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-9-15-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Il est également possible d'écrire des fonctions définies par le programmeur
 avec des arguments optionnels.
 Par exemple, voici une fonction qui affiche les mots les plus courants
 dans un histogramme: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printmostcommon
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printmostcommon(hist, num=10)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = mostcommon(hist)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Les mots les plus courants sont
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 "
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 (freq, word) 
\color green
in
\color inherit
 t[1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

num] 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(word, 
\color brown
"
\backslash
t"
\color inherit
, freq) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le premier paramètre est obligatoire, le second facultatif.
 La valeur par défaut de 
\color blue
num
\color inherit
 est 10.
\end_layout

\begin_layout Standard
Si un seul argument est fourni:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
printmostcommon(hist)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
num
\color inherit
 prend la valeur par défaut.
 Si vous fournissez deux arguments:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
printmostcommon(hist, 20)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
num
\color inherit
 prend la valeur de l'argument indiqué.
 En d'autres termes, l'argument optionnel remplace la valeur par défaut.
\end_layout

\begin_layout Standard
Si une fonction possède à la fois des paramètres obligatoires et facultatifs,
 tous les paramètres obligatoires apparaîtront les premiers.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Soustraction-de-dictionnaires"

\end_inset

Soustraction de dictionnaires
\end_layout

\begin_layout Standard
Trouver les mots d'un livre qui ne sont pas dans la liste de mots de 
\color blue
mots_FR.txt
\color inherit
 revient à un problème de soustraction
\begin_inset Index idx
status open

\begin_layout Plain Layout
soustraction d'ensembles
\end_layout

\end_inset

 d'ensembles, c'est-à-dire trouver 
\begin_inset Quotes cld
\end_inset

les mots du livre moins les mots de la liste
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard

\color blue
subtract
\color inherit
 prend les dictionnaires 
\color blue
d1
\color inherit
 et 
\color blue
d2
\color inherit
 et, ensuite, retourne un nouveau dictionnaire qui contient toutes les clés
 de 
\color blue
d1
\color inherit
 qui ne se trouvent pas dans 
\color blue
d2
\color inherit
.
 Comme nous ne nous soucions pas vraiment des valeurs, nous pouvons toutes
 les fixer à 
\color blue
nothing
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
substract
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
subtract(d1, d2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res =
\color brown
 Dict
\color inherit
() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 key 
\color green
in
\color inherit
 keys(d1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 key ∉ keys(d2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res[key] = nothing
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En vue de trouver les mots de 
\emph on
Notre Dame de Paris
\emph default
 n'appartenant pas au fichier 
\color blue
mots_FR.txt
\color inherit
, nous pouvons utiliser 
\color blue
processfile
\color inherit
 pour construire un histogramme associé à 
\color blue
mots_FR.txt
\color inherit
, et ensuite 
\color blue
substract
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
processfile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
words = processfile(
\color brown
"mots_FR.txt"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
diff = subtract(hist, words)
\end_layout

\begin_layout Plain Layout

\size small
println(
\color brown
"Mots du roman n'appartenant pas à la liste mots_FR.txt
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 word 
\color green
in
\color inherit
 keys(diff)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(word, 
\color brown
" "
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un bref extrait des résultats obtenus dans le cas de
\emph on
 Notre-Dame de Paris
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color brown
Mots du roman n'appartenant pas à la liste mots_FR.txt
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
lambrissé pâtisserie polyèdre magnétisme apostrophé damoiselles caballero
 gisante bretonne ...
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Certains de ces mots sont des noms, des adverbes, etc.
 D'autres, comme 
\begin_inset Quotes cld
\end_inset

damoiselles
\begin_inset Quotes crd
\end_inset

, ne sont plus d'usage courant en français.
 Toutefois, certains sont des mots courants qui devraient absolument figurer
 dans la liste.
\end_layout

\begin_layout Subsection*
Exercice 13-6
\end_layout

\begin_layout Standard
Julia fournit une structure de données appelée 
\color blue
Set
\color inherit
 qui permet de nombreuses opérations usuelles.
 Vous pouvez les consulter à la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Collections-et-structures-de-donnees"
plural "false"
caps "false"
noprefix "false"

\end_inset

 du 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Bonus:-bibliothèque-de-base-et-standard"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et lire la documentation 
\begin_inset CommandInset href
LatexCommand href
name "Set-Like Collections"
target "https://docs.julialang.org/en/v1/base/collections/#Set-Like-Collections-1"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Set, structure de données
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Écrivez un programme exploitant la soustraction associée à 
\color blue
Set
\color inherit
 pour détecter des mots du roman 
\emph on
Notre-Dame de Paris
\emph default
 qui ne sont pas dans la liste 
\color blue
mots_FR.txt
\color inherit
.
 
\end_layout

\begin_layout Section
Mots aléatoires
\end_layout

\begin_layout Standard
Pour choisir un mot aléatoire dans l'histogramme, l'algorithme le plus simple
 con\SpecialChar softhyphen
siste à construire un tableau contenant plusieurs copies de chaque mot
 selon la fréquence observée.
 Ensuite, il faut les extraire du tableau:
\begin_inset Index ind
status open

\begin_layout Plain Layout
randomword
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 randomword(h)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = []
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 (word, freq) 
\color green
in
\color inherit
 h
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

freq
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(t, word)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rand(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une autre possibilité consiste à:
\end_layout

\begin_layout Enumerate
utiliser des clés pour obtenir un tableau des mots du livre,
\end_layout

\begin_layout Enumerate
construire un tableau qui contient la somme des occurrences d'un mot (voir
 l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice11-15-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Le dernier élément de ce tableau est le nombre total (
\emph on
n
\emph default
) de mots dans le livre, 
\end_layout

\begin_layout Enumerate
choisir un nombre aléatoire compris entre 1 et 
\emph on
n
\emph default
.
 Utiliser une recherche par bissection (voir exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-11-15-10"
plural "false"
caps "false"
noprefix "false"

\end_inset

) pour trouver l'indice où le nombre aléatoire pourrait être inséré dans
 la somme,
\end_layout

\begin_layout Enumerate
utiliser l'indice pour trouver le mot correspondant dans le tableau de mots.
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-14-7-1"

\end_inset

Exercice 13-7
\end_layout

\begin_layout Standard
Écrivez un programme qui applique cet algorithme pour choisir un mot aléatoire
 dans le livre.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Analyse-de-Markov"

\end_inset

Analyse de Markov
\end_layout

\begin_layout Standard
Si quelqu'un choisissait au hasard des mots du roman 
\emph on
Notre-Dame de Paris
\emph default
, il pourrait se faire une idée du vocabulaire, mais il n'obtiendrait très
 probablement pas une phrase cohérente.
 Voici le résultat d'une extraction aléatoire:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Markov, analyse de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
supplie des jours société de elle me vie en je
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une série de mots pris au hasard présente rarement du sens, car il n'existe
 pas de relation entre les mots successifs.
 Par exemple, dans une phrase sémantiquement correcte, on attend qu'un article
 comme 
\begin_inset Quotes cld
\end_inset

le
\begin_inset Quotes crd
\end_inset

 soit très probablement suivi d'un adjectif ou d'un nom, mais pas d'un verbe
 et encore moins d'un adverbe.
\end_layout

\begin_layout Standard
L'
\emph on
analyse de Markov
\emph default
 est une manière d'établir ce genre de relations.
 Pour une séquence de mots donnée, cette analyse caractérise la probabilité
 qu'un mot en suive un autre.
 Par exemple, voici un extrait du poème 
\begin_inset CommandInset href
LatexCommand href
name "Liberté"
target "https://www.poetica.fr/poeme-279/liberte-paul-eluard/"
literal "false"

\end_inset

 de 
\begin_inset CommandInset href
LatexCommand href
name "Paul Éluard"
target "https://fr.wikipedia.org/wiki/Paul_%C3%89luard"
literal "false"

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Liberté
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Eluard@Éluard, Paul
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="60mm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Sur mes cahiers d’écolier 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur mon pupitre et les arbres 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur le sable sur la neige 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
J’écris ton nom
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
[...]
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur la lampe qui s’allume 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur la lampe qui s’éteint 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur mes maisons réunies 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
J’écris ton nom
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
[...]
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur mes refuges détruits
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur mes phares écroulés
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Sur les murs de mon ennui
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
J’écris ton nom
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
[...]
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Et par le pouvoir d’un mot
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Je recommence ma vie
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Je suis né pour te connaître
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Pour te nommer
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
Liberté
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En l'occurrence, l'expression 
\begin_inset Quotes cld
\end_inset

la lampe
\begin_inset Quotes crd
\end_inset

 est toujours suivie du pronom relatif 
\begin_inset Quotes cld
\end_inset

qui
\begin_inset Quotes crd
\end_inset

, alors que l'expression 
\begin_inset Quotes cld
\end_inset

lampe qui
\begin_inset Quotes crd
\end_inset

 peut être suivie des verbes pronominaux conjugués au présent de l'indicatif
 
\begin_inset Quotes cld
\end_inset

s'allume
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

s'éteint
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
L'analyse de Markov consiste en une mise en correspondance de chaque préfixe
 (comme 
\begin_inset Quotes cld
\end_inset

la lampe
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

lampe qui
\begin_inset Quotes crd
\end_inset

) avec tous les suffixes possibles (comme 
\begin_inset Quotes cld
\end_inset

s'allume
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

s'éteint
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Standard
Grâce à cette correspondance, il devient possible de concevoir un texte
 aléatoire en commençant par n'importe quel préfixe et en choisissant aléatoirem
ent parmi les suffixes possibles.
 Ensuite, la particule finale du préfixe peut être combinée avec le nouveau
 suffixe pour former le préfixe suivant.
 Le procédé est alors répété.
\end_layout

\begin_layout Standard
Par exemple, si nous commençons par le préfixe 
\begin_inset Quotes cld
\end_inset

le sable
\begin_inset Quotes crd
\end_inset

, le mot suivant doit être 
\begin_inset Quotes cld
\end_inset

sur
\begin_inset Quotes crd
\end_inset

 (c'est la seule combinaison entre ces deux termes observable dans l'extrait).
 Le préfixe suivant est 
\begin_inset Quotes cld
\end_inset

sable sur
\begin_inset Quotes crd
\end_inset

, donc le suffixe suivant doit être 
\begin_inset Quotes cld
\end_inset

la
\begin_inset Quotes crd
\end_inset

.
 Ensuite, le préfixe suivant est 
\begin_inset Quotes cld
\end_inset

sur la
\begin_inset Quotes crd
\end_inset

 qui a pour suffixes soit 
\begin_inset Quotes cld
\end_inset

neige
\begin_inset Quotes crd
\end_inset

, soit 
\begin_inset Quotes cld
\end_inset

lampe
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Dans cet exemple, le nombre de mots formant un préfixe vaut toujours deux,
 mais il est tout-à-fait envisageable d'entreprendre une analyse de Markov
 avec des préfixes dont les mots apparaissent en nombre quelconque, voire
 variable.
\end_layout

\begin_layout Subsection*
Exercice 13-8
\end_layout

\begin_layout Standard
Analyse de Markov:
\end_layout

\begin_layout Enumerate
Écrivez un programme destiné à lire un texte depuis un fichier et à effectuer
 une analyse de Markov.
 Le résultat doit être un dictionnaire qui établit une correspondance entre
 les préfixes et une collection de suffixes possibles.
 La collection peut être un tableau, un tuple ou un dictionnaire.
 Il est de votre ressort de faire un choix approprié.
 Vous pouvez tester votre programme avec un nombre de préfixes égal à deux,
 mais votre programme devrait permettre de tester facilement des nombres
 supérieurs à deux.
\end_layout

\begin_layout Enumerate
Ajoutez une fonction au programme précédent pour produire un texte aléatoire
 basé sur l'analyse de Markov.
 Dans un premier temps, utilisez un préfixe constitué de deux mots sur le
 texte de 
\emph on
Notre-Dame de Paris
\emph default
.
\begin_inset Newline newline
\end_inset

Que se passe-t-il si vous augmentez la longueur du préfixe? Le texte aléatoire
 a-t-il plus de sens?
\end_layout

\begin_layout Enumerate
Une fois votre programme opérationnel, vous pouvez essayer une combinaison:
 si vous mélangez des textes provenant de deux ou plusieurs livres, le texte
 aléatoire résultant assemblera le vocabulaire et les phrases des diverses
 sources de manière intéressante.
\end_layout

\begin_layout Remark*
Ce problème est basé sur un exemple de 
\begin_inset CommandInset href
LatexCommand href
name "Brian K. Kernighan"
target "https://fr.wikipedia.org/wiki/Brian_Kernighan"
literal "false"

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "Rob Pike"
target "https://fr.wikipedia.org/wiki/Rob_Pike"
literal "false"

\end_inset

 (voir la référence
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-9"
literal "false"

\end_inset

).
\begin_inset Index idx
status open

\begin_layout Plain Layout
Kernighan, Brian K.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Pike, Rob
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Vous devriez essayer cet exercice avant de poursuivre.
 
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Structure de données
\end_layout

\begin_layout Standard
Utiliser l'analyse de Markov pour générer du texte aléatoire est amusant,
 cependant, cet exercice a aussi un intérêt: la sélection de la structure
 des données.
 Dans les exercices précédents, vous deviez exercer des choix pour:
\end_layout

\begin_layout Itemize
la représentation des préfixes,
\end_layout

\begin_layout Itemize
la représentation de la collection de suffixes possibles,
\end_layout

\begin_layout Itemize
la représentation de la correspondance entre chaque préfixe et la collection
 de suffixes possibles.
\end_layout

\begin_layout Standard
La solution pour ce dernier choix à poser est simple.
 Un dictionnaire constitue le choix évident pour établir une correspondance
 entre les clés et les valeurs correspondantes.
\end_layout

\begin_layout Standard
Pour les préfixes, les options les plus évidentes sont les chaînes de caractères
, les tableaux de chaînes de caractères ou les tuples de chaînes de caractères.
 Pour les suffixes, un tableau est une option; un histogramme de dictionnaire
 en est une autre.
\end_layout

\begin_layout Standard
Comment choisir? La première étape consiste à réfléchir aux opérations qu'il
 est nécessaire d'implémenter pour chaque structure de données.
 Pour les préfixes, nous devons pouvoir supprimer des mots du début et en
 ajouter à la fin.
 Par exemple, si le préfixe est 
\begin_inset Quotes cld
\end_inset

le sable
\begin_inset Quotes crd
\end_inset

 et que le mot suivant est 
\begin_inset Quotes cld
\end_inset

sur
\begin_inset Quotes crd
\end_inset

, il faut pouvoir former le préfixe suivant, 
\begin_inset Quotes cld
\end_inset

sable sur
\begin_inset Quotes crd
\end_inset

.
 Un tableau pourrait constituer un premier choix, car il est facile d'y
 ajouter et d'y supprimer des éléments.
 Pour la collection de suffixes, les opérations à effectuer comprennent
 l'ajout d'un nouveau suffixe (ou l'augmentation de la fréquence d'un suffixe
 existant) ainsi que le choix d'un suffixe aléatoire.
\end_layout

\begin_layout Standard
L'ajout d'un nouveau suffixe est tout aussi facile dans le cas d'un tableau
 que dans celui d'un histogramme.
 Choisir un élément aléatoire dans un tableau est commode; en choisir un
 dans un histogramme s'avère plus difficile à réaliser efficacement (voir
 l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-14-7-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Jusqu'à présent, la facilité de mise en œuvre a été privilégiée.
 Cependant, d'autres facteurs interviennent dans le choix de la structure
 de données.
 L'un d'eux est le temps d'exécution.
 Parfois, une raison théorique permet d'espérer qu'une structure de données
 se montre plus rapide qu'une autre.
 Par exemple, nous avons vu que l'opérateur 
\color blue
∈
\color inherit
 est plus rapide pour les dictionnaires que pour les tableaux, du moins
 lorsque le nombre d'éléments est important.
\end_layout

\begin_layout Standard
Cependant, très souvent, nul ne sait 
\emph on
a priori
\emph default
 quelle implémentation sera la plus rapide.
 Une option consiste à développer deux implémentations et à observer la
 meilleure.
 Cette approche est appelée 
\emph on
analyse comparative
\emph default
 (ou 
\emph on
benchmarking
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
analyse comparative
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
benchmarking
\end_layout

\end_inset

 Une autre option pratique consiste à choisir la structure de données la
 plus facile à mettre en œuvre, puis à analyser si elle est suffisamment
 rapide pour l'application prévue.
 Si c'est le cas, il n'est pas nécessaire de chercher plus loin.
 Sinon, des outils comme le module 
\color blue
Profile
\color inherit
 (voir la 
\begin_inset CommandInset href
LatexCommand href
name "documentation Julia"
target "https://docs.julialang.org/en/v1/manual/profile/"
literal "false"

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "Profileview"
target "https://github.com/timholy/ProfileView.jl"
literal "false"

\end_inset

)
\begin_inset Index idx
status open

\begin_layout Plain Layout
profile
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
profile, documentation
\end_layout

\end_inset

 permettent d'identifier les blocs les plus lents d'un programme.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Benchmark Tools
\end_layout

\end_inset

 Citons également 
\color blue
BenchmarkTools
\color inherit
 (voir 
\begin_inset CommandInset href
LatexCommand href
name "BenchmarkTools.jl"
target "https://github.com/JuliaCI/BenchmarkTools.jl"
literal "false"

\end_inset

) qui fournit diverses macros permettant d'automatiser les mesures de temps
 d'exécution sur plusieurs jeux de paramètres (aléatoires, par exemple)
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Profile.jl
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ProfileView.jl
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
BenchmarkTools.jl
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Les paquets 
\color blue
Profile.jl
\color inherit
,
\color blue
 ProfileView.jl
\color inherit
 et 
\color blue
BenmarkTools.jl
\color inherit
 sont installables selon les méthodes indiquées dans l'appendice
\begin_inset space ~
\end_inset

B, 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
L'espace de stockage
\begin_inset Index idx
status open

\begin_layout Plain Layout
espace de stockage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stockage, espace de
\end_layout

\end_inset

 constitue un autre facteur à prendre en compte.
 Par exemple, l'utilisation d'un histogramme pour la collecte des suffixes
 peut prendre moins d'espace, car il suffit d'enregistrer chaque mot une
 seule fois, quelle que soit sa fréquence dans le texte.
 Dans certains cas, l'économie d'espace peut également accélérer le fonctionneme
nt d'un programme et, à l'extrême, ce dernier peut ne pas fonctionner du
 tout en cas de mémoire saturée.
 Néanmoins, pour de nombreuses applications, l'espace mémoire reste une
 considération secondaire par rapport au temps d'exécution.
\end_layout

\begin_layout Standard
Une dernière réflexion: dans cette discussion, nous avons laissé entendre
 qu'une seule structure de données était à exploiter à la fois pour l'analyse
 et le développement.
 Parce que ces deux phases sont distinctes, il est envisageable d'utiliser
 une structure pour l'analyse et de la convertir ensuite en une autre pour
 le développement.
 Le gain sera net si le temps épargné pendant le développement dépasse celui
 consacré à la conversion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Le paquet Julia 
\backslash
textcolor{blue}{DataStructures}  implémente 24 structures de données (voir
 
\backslash
href{https://github.com/JuliaCollections/DataStructures.jl}{la documentation
 sur les structures de données} et 
\backslash
href{https://juliacollections.github.io/DataStructures.jl/latest/}{DataStructures.jl
}).
 
\backslash
index{DataStructures.jl} 
\backslash
index{JuliaCollections}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Lors du débogage d'un programme, cinq attitudes sont à adopter en particulier
 lorsque le bogue est très difficile à débusquer:
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Description
la
\begin_inset space ~
\end_inset

lecture examinez votre code, relisez-le avec détachement, comme si c'était
 le programme de quelqu'un d'autre et vérifiez ce qu'il exécute réellement.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
relecture
\end_layout

\end_inset


\end_layout

\begin_layout Description
le
\begin_inset space ~
\end_inset

fonctionnement expérimentez, en introduisant de petites modifications et
 en exécutant différentes versions.
 Souvent, si vous affichez le bon élément au bon endroit dans le programme,
 le problème saute aux yeux.
 Parfois, il faut construire un canevas.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonctionnement
\end_layout

\end_inset


\end_layout

\begin_layout Description
la
\begin_inset space ~
\end_inset

réflexion prenez le temps de réfléchir.
 De quel type d'erreur s'agit-il: syntaxique, d'exécution ou sémantique?
 Quelles informations pouvez-vous tirer des messages d'erreur ou du rendu
 du programme? Quel type d'erreur pourrait causer le problème que vous constatez
? Qu'avez-vous modifié en dernier lieu, avant que le problème n'apparaisse?
\begin_inset Foot
status open

\begin_layout Plain Layout
À cet égard, le contrôle de version dans les environnements de développement
 intégré s'avère particulièrement utile.
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
reflexion@réflexion
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
EDI
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
IDE
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
environnement de développement
\end_layout

\end_inset


\end_layout

\begin_layout Description
la
\begin_inset space ~
\end_inset

méthode
\begin_inset space ~
\end_inset

du
\begin_inset space ~
\end_inset

canard
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

plastique
\begin_inset space ~
\end_inset

(
\emph on
rubber
\begin_inset space ~
\end_inset

ducking
\emph default
) si vous expliquez le problème à quelqu'un d'autre, vous trouvez parfois
 la réponse avant même d'avoir fini de poser la question.
 Souvent, vous n'avez même pas besoin d'une autre personne.
 Vous pourriez simplement parler à un canard en plastique.
 Là, se trouve l'origine de la stratégie bien connue appelée 
\begin_inset Quotes cld
\end_inset

débogage par la méthode du canard en plastique
\begin_inset Quotes crd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
canard en plastique, méthode du
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
rubber ducking
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
La 
\begin_inset CommandInset href
LatexCommand href
name "méthode du canard en plastique"
target "https://fr.wikipedia.org/wiki/M%C3%A9thode_du_canard_en_plastique"
literal "false"

\end_inset

 consiste à expliquer méticuleusement le code source qu'on a écrit à un
 collègue, à un simple passant ou même à un objet inanimé comme un canard
 en plastique (voir 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia EN"
target "https://en.wikipedia.org/wiki/The_Pragmatic_Programmer"
literal "false"

\end_inset

).
 
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Description
le
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset

lâcher
\begin_inset space ~
\end_inset

prise
\begin_inset Quotes crd
\end_inset

 à un moment donné, la meilleure chose à faire est de reculer et d'annuler
 les changements récents jusqu'à revenir à un programme qui fonctionne et
 que vous comprenez.
 Ensuite, une nouvelle période de reconstruction pourra commencer.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
lâcher prise, débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les programmeurs débutants se trouvent parfois bloqués sur une de ces activités
 et oublient les autres.
 Chaque activité a ses propres limites.
 Par exemple, la lecture du code peut aider si le problème est d'ordre typograph
ique, mais pas si le problème résulte d'un malentendu conceptuel.
 Si vous ne comprenez pas l'exécution de votre programme, vous pouvez le
 lire 100 fois et ne jamais repérer l'erreur, car celle-ci est mentale.
\end_layout

\begin_layout Standard
Faire des expériences peut aider, surtout en procédant par de petits tests
 simples.
 En revanche, si vous faites des essais sans stratégie ou sans lire votre
 code, vous risquez de basculer dans de la 
\begin_inset Quotes cld
\end_inset

programmation en mode aléatoire
\begin_inset Quotes crd
\end_inset

, qui
\begin_inset Index idx
status open

\begin_layout Plain Layout
programmation aléatoire
\end_layout

\end_inset

 consiste à faire des changements aléatoires jusqu'à ce que le programme
 fasse ce à quoi il est destiné.
 Il va sans dire que la programmation en mode aléatoire est très chronophage
 et sans réelle garantie de résultat.
\end_layout

\begin_layout Standard
Vous devez prendre le temps de réfléchir.
 Le débogage est de même essence qu'une science expérimentale.
 Vous devez avoir au moins une hypothèse sur la nature du problème.
 S'il y a deux possibilités ou plus, essayez de penser à un test discriminant.
\end_layout

\begin_layout Standard
Pour tout dire, même les meilleures techniques de débogage échouent lorsqu'il
 y a trop d'erreurs ou si le code que vous essayez de corriger est trop
 volumineux et trop complexe.
 Parfois, la meilleure option est de battre en retraite, en simplifiant
 le programme jusqu'à arriver à un code qui fonctionne et qui est parfaitement
 compris.
\end_layout

\begin_layout Standard
Les programmeurs débutants sont souvent réticents à rebrousser chemin parce
 qu'ils ne supportent pas d'effacer une ligne de code (même lorsqu'elle
 est erronée).
 Si cela vous rassure, sauvegardez votre programme dans un autre fichier
 avant de commencer à le décortiquer.
 Vous pourrez ensuite recopier un à un les blocs analysés et corrects.
\end_layout

\begin_layout Standard
Pour trouver un bogue difficile, il est nécessaire de lire, d'expérimenter,
 de réfléchir et parfois… de reculer.
 Si vous êtes bloqué sur l'une de ces activités, n'hésitez pas à essayer
 les autres.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
déterministe terme qui se rapporte à un programme qui produit le même résultat
 à chaque exécution, avec les mêmes apports (voir la 
\begin_inset CommandInset href
LatexCommand href
name "notion de fonction déterministe"
target "https://fr.wikipedia.org/wiki/Fonction_d%C3%A9terministe"
literal "false"

\end_inset

 en informatique), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
deterministe@déterministe
\end_layout

\end_inset


\end_layout

\begin_layout Description
pseudo-aléatoire terme se rapportant à une séquence de nombres qui semble
 être aléatoire, mais qui est conçue par un programme déterministe, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudo-aléatoire
\end_layout

\end_inset


\end_layout

\begin_layout Description
valeur
\begin_inset space ~
\end_inset

par
\begin_inset space ~
\end_inset

défaut valeur donnée à un paramètre optionnel si aucun argument n'est fourni,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeur par défaut
\end_layout

\end_inset


\end_layout

\begin_layout Description
outrepassement
\begin_inset space ~
\end_inset

(
\emph on
override
\emph default
) remplacement d'une valeur par défaut par un argument fourni par l'utilisateur,
\begin_inset Index idx
status open

\begin_layout Plain Layout
outrepassement
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
override
\end_layout

\end_inset


\end_layout

\begin_layout Description
analyse
\begin_inset space ~
\end_inset

comparative
\begin_inset space ~
\end_inset

(
\emph on
benchmarking
\emph default
) processus consistant à choisir entre les structures de données en implémentant
 des alternatives et en les testant sur un échantillon d'entrées possibles,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
analyse comparative
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
benchmarking
\end_layout

\end_inset


\end_layout

\begin_layout Description
méthode
\begin_inset space ~
\end_inset

du
\begin_inset space ~
\end_inset

canard
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

plastique
\begin_inset space ~
\end_inset

(
\emph on
rubber
\begin_inset space ~
\end_inset

ducking
\emph default
) méthode de débogage où le programmeur explique à un objet inanimé (tel
 qu'un canard en plastique) son problème en le décomposant pour se rendre
 compte de la ou des faille(s).
\begin_inset Index idx
status open

\begin_layout Plain Layout
rubber ducking
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
canard en plastique, méthode du
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-13-12-1"

\end_inset

Exercice 13-9
\end_layout

\begin_layout Standard
Le 
\begin_inset Quotes cld
\end_inset

rang
\begin_inset Quotes crd
\end_inset

 d'un mot est sa position dans un tableau de mots triés par fréquence: le
 mot le plus courant a le rang 1, le deuxième le plus courant, le rang 2,
 etc.
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset href
LatexCommand href
name "loi de Zipf"
target "https://fr.wikipedia.org/wiki/Loi_de_Zipf"
literal "false"

\end_inset

 décrit une relation entre le rang et la fréquence des mots dans les langues
 naturelles.
 Plus précisément, elle prédit que la fréquence 
\color blue

\begin_inset Formula $f$
\end_inset

 
\color inherit
du mot de rang 
\color blue

\begin_inset Formula $r$
\end_inset


\color inherit
 s'exprime comme: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Zipf, loi de
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f=cr^{-s}
\]

\end_inset


\end_layout

\begin_layout Standard
où 
\color blue

\begin_inset Formula $s$
\end_inset


\color inherit
 et
\color blue
 
\begin_inset Formula $c$
\end_inset


\color inherit
 sont des paramètres qui dépendent de la langue et du texte.
 Si vous prenez le logarithme des deux membres de cette équation, vous obtenez:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\log f=\log c-s\log r
\]

\end_inset


\end_layout

\begin_layout Standard
Si vous tracez 
\begin_inset Formula $\log f$
\end_inset

 en fonction de 
\begin_inset Formula $\log r$
\end_inset

, vous devriez obtenir une droite de pente 
\begin_inset Formula $-s$
\end_inset

 interceptant l'ordonnée à l'origine à 
\begin_inset Formula $\log c$
\end_inset

.
\end_layout

\begin_layout Standard
Rédigez un programme qui lit un texte à partir d'un fichier, comptabilise
 la fréquence des mots et affiche une ligne pour chaque mot par ordre décroissan
t de fréquence, avec 
\begin_inset Formula $\log f$
\end_inset

 et 
\begin_inset Formula $\log r$
\end_inset

.
\end_layout

\begin_layout Standard
Installez la bibliothèque graphique 
\color blue
Plots
\color inherit
 comme indiqué dans l'annexe
\begin_inset space ~
\end_inset

B, 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "chap:Annexe-B:-Installation de Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
Son utilisation est très facile:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Plots()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
savefig()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
using
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> using 
\color inherit
Plots
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = 0
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = x .^2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 plot(x, y)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 savefig("/home/chemin_vers_repertoire/quadratic.pdf")
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Graphique-Plots-de-y-x2"
plural "false"
caps "false"
noprefix "false"

\end_inset

 présente le graphique 
\color blue
quadratic.pdf
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/PDF/quadratic_1.pdf
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Graphique-Plots-de-y-x2"

\end_inset

Graphique 
\begin_inset Quotes cld
\end_inset

Plots
\begin_inset Quotes crd
\end_inset

 de la fonction 
\begin_inset Formula $y=x^{2}$
\end_inset

 pour 
\begin_inset Formula $0\leq x\leq10$
\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Utilisez la bibliothèque
\color blue
 Plots
\color inherit
 pour mettre en graphique les résultats et vérifier qu'ils forment bien
 une droite.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
Fichiers
\end_layout

\begin_layout Standard
Ce chapitre introduit la notion de programmes persistants,
\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance, programme
\end_layout

\end_inset

 capables de conserver les données en stockage permanent.
\begin_inset Index idx
status open

\begin_layout Plain Layout
stockage permanent
\end_layout

\end_inset

 Il montre comment utiliser différents types de stockage permanent tels
 que les fichiers et les bases de données.
\begin_inset Index idx
status open

\begin_layout Plain Layout
fichier
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
base de données
\end_layout

\end_inset


\end_layout

\begin_layout Section
Persistance
\end_layout

\begin_layout Standard
La plupart des programmes que nous avons étudiés jusqu'à présent sont transitoir
es: ils fonctionnent pendant une courte période et produisent un résultat.
 Cependant, lorsqu'ils se terminent, leurs données disparaissent.
 Lors d'une nouvelle exécution, le programme repart 
\emph on
ut nulla
\emph default
.
\end_layout

\begin_layout Standard
D'autres programmes sont persistants: ils s'exécutent sur de longues périodes
 (voire continuellement) et conservent au moins une partie de leurs données
 sur un support de stockage permanent (un disque dur, par exemple).
 S'ils s'arrêtent puis redémarrent, ils reprennent au point d'arrêt.
\end_layout

\begin_layout Standard
Les systèmes d'exploitation qui fonctionnent pratiquement à chaque fois
 qu'un ordinateur est allumé sont des exemples de programmes persistants.
 C'est encore plus vrai pour les serveurs web, qui fonctionnent en permanence,
 attendant des requêtes en provenance du réseau.
 
\end_layout

\begin_layout Standard
Un des moyens les plus simples pour que les programmes conservent leurs
 données consiste à lire et à écrire des fichiers 
\begin_inset Quotes cld
\end_inset

texte
\begin_inset Quotes crd
\end_inset

.
 Jusqu'ici, nous avons vu des programmes qui lisent des fichiers texte.
 Dans ce chapitre, nous en étudions dont le comportement consiste à écrire
 dans des fichiers.
\end_layout

\begin_layout Standard
Une autre possibilité consiste à stocker l'état d'un programme dans une
 base de données.
 Nous étudions donc également la manière de tirer avantage d'une base de
 données simple.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Lire-et-écrire"

\end_inset

Lire et écrire
\end_layout

\begin_layout Standard
Un fichier texte est une séquence de caractères enregistrée sur un support
 permanent comme un disque dur ou une mémoire flash.
 Nous avons vu comment ouvrir et lire un fichier dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lecture-de-listes-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Pour créer un fichier et y écrire, il faut l'ouvrir avec le mode 
\color blue
"w" 
\color inherit
(
\series bold
\emph on
w
\series default
riting
\emph default
) en deuxième paramètre:
\begin_inset Index idx
status open

\begin_layout Plain Layout
open()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
"w", mode écriture
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{mode écriture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fout = open(
\color brown
"output.txt"
\color inherit
, 
\color brown
"w"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
IOStream(<file output.txt>)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si le fichier existe déjà, l'ouverture en mode écriture efface irréversiblement
 les anciennes données.
 Prudence, donc! Si le fichier n'existe pas, il est nouvellement créé.
 La fonction 
\color blue
open
\color inherit
 retourne un objet fichier et la fonction d'écriture
\size small
\color brown
 
\color blue
"w"
\size default
\color inherit
 permet d'écrire diverses données dans le fichier.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 line1 = 
\color brown
"Voici quatre lions, deux rouges, deux noirs,
\backslash
n"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 write(fout, line1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
45
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La valeur numérique retournée représente le nombre de caractères écrits
 dans le fichier.
 L'objet fichier conserve une trace de l'endroit où il se trouve dans l'arboresc
ence de l'ordinateur.
 Par conséquent, si elle est à nouveau appelée, la fonction 
\color blue
write
\color inherit
 ajoute les nouvelles données à la suite des précédentes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 line2 = 
\color brown
"Tels qu'ils figurent sur les armoiries d'Élouges.
\backslash
n"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 write(fout, line2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
51
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une fois la saisie terminée, il est pertinent de fermer le fichier.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 close(fout)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si la fermeture du fichier n'a pas eu lieu, la terminaison du programme
 s'en chargera.
 L'état du fichier peut être contrôlé en l'ouvrant avec un éditeur de texte.
\end_layout

\begin_layout Section
Formatage
\end_layout

\begin_layout Standard
L'argument en écriture doit impérativement être une chaîne de caractères.
 Ainsi, pour écrire d'autres valeurs, il est nécessaire de les convertir
 en chaînes de caractères.
 Le moyen le plus simple est de procéder via l'interpolation de chaînes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fout = open(
\color brown
"output.txt"
\color inherit
, 
\color brown
"w"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
IOStream(<file output.txt>)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 write(fout, string(7370))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une autre possibilité consiste à utiliser la famille de fonctions 
\color blue
print(ln)
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
$, interpolation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
printf()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
printf(), documentation
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@printf()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 chapelles = 2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(fout, 
\color brown
"À Élouges, il y a
\color inherit
 
\color magenta
$chapelles
\color inherit
 
\color brown
chapelles."
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

La macro 
\backslash
textcolor{magenta}{@printf} est très puissante du fait qu'elle utilise des
 commandes de formatage de style C.
 Voir la documentation de 
\backslash
href{https://docs.julialang.org/en/v1/stdlib/Printf/}{printf}.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Noms de fichiers et chemins
\end_layout

\begin_layout Standard
Les fichiers sont organisés en répertoires (également appelés 
\begin_inset Quotes cld
\end_inset

dossiers
\begin_inset Quotes crd
\end_inset

).
 Chaque programme en cours d'exécution possède un répertoire courant, c'est-à-di
re celui par défaut pour la plupart des opérations.
 Par exemple, lorsqu'un fichier est ouvert aux fins de lecture, Julia le
 cherche dans le répertoire courant.
\begin_inset Index idx
status open

\begin_layout Plain Layout
pwd()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
cwd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
pwd
\color inherit
 retourne le nom du répertoire courant:
\begin_inset Foot
status open

\begin_layout Plain Layout
pwd 
\emph on
— print working directory
\emph default
 — est une commande des systèmes 
\noun on
Unix
\noun default
, GNU/
\noun on
Linux
\noun default
 et BSD.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 cwd = pwd()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"/home/aquarelle/Julia/Penser_en_Julia"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
cwd
\color inherit
 signifie 
\emph on
current working directory
\emph default
 (répertoire de travail courant).
\begin_inset Index idx
status open

\begin_layout Plain Layout
current working directory
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
repertoire@répertoire courant
\end_layout

\end_inset

 Dans cet exemple, le résultat est 
\color blue
/home/aquarelle/Julia/Penser_en_Julia
\color inherit
, où 
\color blue
/home/aquarelle/
\color inherit
 est le répertoire d'origine d'un utilisateur
\begin_inset Foot
status open

\begin_layout Plain Layout
Ce répertoire est souvent noté 
\color blue
$HOME
\color inherit
.
\end_layout

\end_inset

 nommé 
\color blue
aquarelle
\color inherit
.
\end_layout

\begin_layout Standard
Une chaîne comme 
\color blue
/home/aquarelle/Julia/
\color inherit
 identifie un répertoire et constitue un 
\emph on
chemin d'accès absolu
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
chemin absolu
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un simple nom de fichier, comme 
\color blue
output.txt
\color black
,
\color inherit
 est considéré comme un 
\emph on
chemin relatif
\emph default
, car il se rapporte au répertoire courant.
 Si le répertoire courant est 
\color blue
/home/aquarelle/Julia\SpecialChar softhyphen
/Penser_en_Julia/
\color inherit
, le nom de fichier
\color blue
 output.txt
\color inherit
 fera référence à 
\color blue
/home/aquarelle/Julia\SpecialChar softhyphen
/Penser_en_Julia/output.txt
\color inherit
.
\end_layout

\begin_layout Standard
Un chemin qui commence par 
\color blue
/
\color inherit
 ne dépend pas du répertoire courant.
 Il s'agit d'un chemin absolu.
 Pour trouver le chemin absolu d'un fichier, il convient d'utiliser 
\color blue
abspath
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
chemin relatif
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
abspath()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 abspath(
\color brown
"output.txt"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"/home/aquarelle/Julia/Penser_en_Julia/output.txt"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia propose d'autres fonctions pour travailler avec les noms de fichiers
 et les chemins d'accès.
 Par exemple, 
\color blue
ispath
\color inherit
 vérifie si un fichier ou un répertoire existe: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 ispath(
\color brown
"/home/aquarelle/Julia/Penser_en_Julia"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 ispath(
\color brown
"/home/aquarelle/Julia/Penser_en_Julia/mots_FR.txt"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
isdir
\color inherit
 vérifie l'existence d'un sous-répertoire appartenant au répertoire courant
 (les répertoires situés au-dessus du répertoire courant, y compris ce dernier,
 ne sont pas testés): 
\begin_inset Index idx
status open

\begin_layout Plain Layout
isdir()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isdir(
\color brown
"Chimie_Julia"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isdir(
\color brown
"Figures"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De même, 
\color blue
isfile
\color inherit
 vérifie l'existence d'un fichier.
\end_layout

\begin_layout Standard

\color blue
readdir
\color inherit
 retourne un tableau des fichiers (et autres répertoires) dans le répertoire
 courant:
\begin_inset Index idx
status open

\begin_layout Plain Layout
readdir()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isfile(
\color brown
"Figures/quadratic_1.pdf"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 readdir(
\color black
cwd
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
7-element Array{String,1}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"#Penser_en_Julia_v-0-24.lyx#"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Solutions_Exercices"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Figures"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Penser_en_Julia_v-0-24.lyx"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Penser_en_Julia_v-0-24.lyx~"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Penser_en_Julia_v-0-24.pdf"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"Tests"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"mots_FR.txt"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"notre_dame_de_paris.txt"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour illustrer l'action de ces fonctions, la fonction 
\color blue
walk
\color inherit
 explore un répertoire, affiche le nom de tous les fichiers et s'appelle
 récursivement au niveau des sous-répertoires.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
walk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 walk(dirname)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 name 
\color green
in
\color inherit
 readdir(dirname)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

path = joinpath(dirname, name)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 isfile(path) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(path) 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

walk(path)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color black
La fonction interne
\color blue
 joinpath
\color inherit
 prend un répertoire et un nom de fichier pour les réunir en un chemin complet.
\begin_inset Index idx
status open

\begin_layout Plain Layout
joinpath()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Julia propose une fonction appelée 
\backslash
textcolor{blue}{walkdir} (voir la page de 
\backslash
href{https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.walkdir}{documentat
ion de walkdir}) qui est similaire à 
\backslash
textcolor{blue}{walk} tout en s'avérant  polyvalente.
 À titre d'exercice, lisez la documentation de 
\backslash
textcolor{blue}{walkdir}  et utilisez cette fonction pour afficher les noms
 des fichiers dans un répertoire donné et ses sous-répertoires.
 
\backslash
index{walkdir()}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Levée-des-exceptions"

\end_inset

Levée des exceptions
\end_layout

\begin_layout Standard
Lorsque des fichiers sont manipulés en lecture et en écriture, des erreurs
 peuvent survenir.
 Tenter d'ouvrir un fichier qui n'existe pas conduit à une 
\color blue
SystemError
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
levée d'exception
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
SystemError
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
open()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
exception, levée
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fin = open(
\color brown
"fichier_inexistant.txt"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 SystemError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 opening file "bad_file"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Aucun fichier ou dossier de ce type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si vous ne disposez pas des droits d'accès à un fichier (en l'occurrence
 en écriture), sous GNU/
\noun on
Linux
\noun default
 par exemple, une erreur se produit: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fout = open(
\color brown
"/etc/passwd"
\color inherit
, 
\color brown
"w"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 SystemError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 opening file "/etc/passwd"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Permission non accordée
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Afin d'éviter ces erreurs, il serait envisageable d'utiliser des fonctions
 comme 
\color blue
ispath
\color inherit
 et 
\color blue
isfile
\color inherit
.
 Hélas, cela nécessiterait beaucoup de temps et de code pour vérifier toutes
 les possibilités.
\end_layout

\begin_layout Standard
La fonction 
\color blue
try
\color inherit
 offre une solution élégante.
 La syntaxe est similaire à celle d'une instruction
\color blue
 if
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
ispath()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
isfile()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
catch
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
try 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fin = open(
\color brown
"fichier_inexistant.txt"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
catch 
\color inherit
exc
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Une erreur s'est produite:
\color inherit
 
\color magenta
$exc
\color brown
"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia commence par exécuter la clause 
\color blue
try
\color inherit
.
 Si tout se passe normalement, le système sort de la clause 
\color blue
try
\color inherit
 et poursuit l'exécution du programme.
 Si une exception se produit, Julia passe à l'exécution de la clause 
\color blue
catch
\color inherit
.
\end_layout

\begin_layout Standard
Le traitement d'une exception avec une clause 
\color blue
try
\color inherit
 s'appelle la 
\emph on
levée d'une exception
\emph default
.
 Dans cet exemple, la clause d'exception affiche un message d'erreur (peu
 utile).
 Cependant, en général, capter une exception apporte une chance réelle de
 résoudre le problème, d'essayer à nouveau ou, au moins, de terminer le
 programme sobrement.
\end_layout

\begin_layout Standard
Dans un code qui effectue des changements d'état ou qui utilise des ressources
 telles que des fichiers, un travail de nettoyage (fermeture de fichiers)
 doit généralement être réalisé lorsque le code est terminé.
 Les exceptions compliquent potentiellement cette tâche, car elles peuvent
 provoquer la sortie d'un bloc de code avant d'atteindre sa fin normale.
 Le mot-clé 
\color blue
finally
\color inherit
 permet d'exécuter un code lorsqu'un bloc se termine, quelle que soit la
 manière dont il prend fin:
\begin_inset Index idx
status open

\begin_layout Plain Layout
finally
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
f = open(
\color brown
"output.txt"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
try
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

line = readline(f)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(line) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
finally
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

close(f)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De cette sorte, la fonction 
\color blue
close
\color inherit
 est toujours exécutée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
close()
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Bases-de-données"

\end_inset

Bases de données
\end_layout

\begin_layout Standard
Une base de données est un fichier spécialement organisé pour conserver
 des données.
 De nombreuses bases de données sont structurées comme un dictionnaire:
 elles établissent une correspondance entre des clés et leurs valeurs.
 La plus grande différence entre une base de données et un dictionnaire
 vient de ce que la première réside sur un support permanent.
 Par conséquent, elle persiste après la fin du programme.
\begin_inset Index idx
status open

\begin_layout Plain Layout
base de données
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ThinkJulia (et ThinkJuliaFR) fournit une interface au gestionnaire de base
 de données 
\color blue
GDBM
\color inherit
 (GNU dbm
\begin_inset Foot
status open

\begin_layout Plain Layout

\series bold
d
\series default
ata
\series bold
b
\series default
ase 
\series bold
m
\series default
anager 
\end_layout

\end_inset

) pour la création et la mise à jour des fichiers de base de données.
 À titre d'exemple, créons une base de données qui contient des légendes
 associées à des fichiers contenant des images.
\begin_inset Index idx
status open

\begin_layout Plain Layout
GDBM
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Database Manager
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'ouverture d'une base de données est similaire à l'ouverture de fichiers
 classiques:
\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJulia
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJuliaFR
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
DBM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> using 
\color black
ThinkJulia
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color cyan
➥
\size default
 pour la version française:
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> using 
\color black
ThinkJuliaFR
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
db = DBM(
\color brown
"légendes"
\color black
, 
\color brown
"c"
\color black
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
DBM(<légendes>)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le mode 
\color blue
"c"
\color inherit
 signifie que la base de données doit être créée si elle n'existe pas déjà.
 Le résultat est un objet 
\begin_inset Quotes cld
\end_inset

base de données
\begin_inset Quotes crd
\end_inset

 qui peut être utilisé (pour la plupart des opérations) à l'instar d'un
 dictionnaire.
\end_layout

\begin_layout Standard
Lorsqu'un nouvel élément est créé, le gestionnaire GDBM met à jour le fichier
 de la base de données: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
db[
\color brown
"rabelais.png"
\color black
] = 
\color brown
"Portrait de François Rabelais."
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Portrait de François Rabelais."
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque vous accédez à un des éléments, le gestionnaire GDBM lit le fichier:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia> 
\color black
db[
\color brown
"rabelais.png"
\color black
]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Portrait de François Rabelais."
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si vous effectuez une nouvelle affectation à une clé existante, le gestionnaire
 GDBM remplace l'ancienne valeur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 db[
\color brown
"rabelais.png"
\color inherit
] = 
\color brown
"Portrait de François Rabelais promenant le chat 
\begin_inset Quotes cld
\end_inset

Raminagrobis
\begin_inset Quotes crd
\end_inset

."
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Portrait de François Rabelais promenant le chat « Raminagrobis »."
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 db[
\color brown
"rabelais.png"
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Portrait de François Rabelais promenant le chat « Raminagrobis
\begin_inset Quotes crd
\end_inset

.
 "
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Certaines fonctions ayant un dictionnaire comme argument, comme 
\color blue
key
\color inherit
 et 
\color blue
value
\color inherit
, sont inopérantes avec les objets de la base de données.
 Toutefois, l'itération avec une boucle
\color blue
 for
\color inherit
 fonctionne: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 (key, value)
\color green
 in
\color inherit
 db
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(key, 
\color brown
"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 "
\color inherit
, value)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme pour les autres fichiers, 
\emph on
in fine
\emph default
, il est nécessaire de fermer la base de données:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 close(db)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Sérialisation
\end_layout

\begin_layout Standard
Une des limites du gestionnaire 
\color blue
GDBM
\color inherit
 provient du fait que les clés et les valeurs doivent être des chaînes de
 caractères ou des tableaux d'octets.
 Si un autre type est utilisé, Julia retourne une erreur.
\end_layout

\begin_layout Standard
Cependant, les fonctions 
\color blue
serialize
\color inherit
 et 
\color blue
deserialize
\color inherit
 contribuent à contourner cette limitation.
 Elles traduisent presque tout type d'objet en un tableau d'octets (
\color blue
IOBuffer
\color inherit

\begin_inset Foot
status open

\begin_layout Plain Layout
mémoire tampon d'entrées/sorties
\end_layout

\end_inset

) adapté au stockage dans une base de données.
 Ensuite, elles retranscrivent les tableaux d'octets en objets:
\begin_inset Index idx
status open

\begin_layout Plain Layout
serialize()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
deserialize()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
using
\color black
 Serialization
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 io = 
\color brown
IOBuffer
\color black
()
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color black
serialize(io, t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
24 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 print(take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(io))
\color lightgray
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
UInt8[0x37, 0x4a, 0x4c, 0x07, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x08,
 0xe2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le format n'est pas évident pour nous; il est essentiellement censé être
 facile à interpréter pour Julia.
 
\end_layout

\begin_layout Standard

\color blue
deserialize
\color inherit
 reconstitue l'objet: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
io = 
\color brown
IOBuffer
\color black
()
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t1 = [1, 2, 3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 serialize(io, t1) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
24
\color black
 
\end_layout

\begin_layout Plain Layout

\size small
\color black
julia> s = take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(io);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t2 = deserialize(
\color brown
IOBuffer
\color black
(s))
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
print(t2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[1, 2, 3]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
serialize
\color inherit
 et 
\color blue
deserialize
\color inherit
 écrivent et lisent un objet
\color blue
 IOBuffer
\color inherit
 qui représente un flux d'entrées/sorties en mémoire.
 La fonction
\color blue
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\color inherit
récupère le contenu d
\color black
u tampon d'entrées/sorties
\color inherit
 sous la forme d'un tableau d'octets et remet le tampon dans son état initial.
\begin_inset Index idx
status open

\begin_layout Plain Layout
iobuffer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bien que le nouvel objet ait la même valeur que l'ancien, il ne s'agit pas
 du même objet (du moins en général): 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color green
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color black
t1 == t2
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 t1 ≡ t2 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En d'autres termes, la sérialisation puis la désérialisation ont le même
 effet que la copie de l'objet.
\end_layout

\begin_layout Standard
Vous pouvez l'utiliser pour enregistrer des structures de données autres
 que des chaînes de caractères dans une base de données.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

En fait, le stockage de structures de données autres que des chaînes de
 caractères dans une base de données est si courant qu'il a été encapsulé
 dans un paquet appelé JLD2 (voir la 
\backslash
href{https://github.com/JuliaIO/JLD2.jl}{documentation de JLD2}).
 
\backslash
index{JLD2} 
\backslash
index{JLD2, documentation}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Objets de commande
\end_layout

\begin_layout Standard
La plupart des systèmes d'exploitation fournissent une interface en ligne
 de commande, également appelée 
\begin_inset Quotes cld
\end_inset

shell
\begin_inset Index idx
status open

\begin_layout Plain Layout
shell
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Un shell est l'interface entre un utilisateur et le noyau.
\end_layout

\end_inset

.
 Les shells fournissent entre autres des commandes pour naviguer dans le
 système de fichiers et aussi, pour lancer des applications.
 Par exemple, les systèmes 
\noun on
Unix
\noun default
 permettent de changer de répertoire avec 
\color blue
cd
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
cd
\end_layout

\end_inset

 d'afficher le contenu d'un répertoire avec 
\color blue
ls
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
ls
\end_layout

\end_inset

 et de lancer un navigateur web en saisissant une commande comme 
\color blue
firefox
\color inherit
 (par exemple) dans une console.
\begin_inset Index idx
status open

\begin_layout Plain Layout
firefox
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tout programme pouvant être lancé depuis le shell l'est également depuis
 Julia à l'aide d'un objet de commande:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 cmd = 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset


\color brown
echo Julia est un langage très puissant.
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
`echo Julia est un langage très puissant.`
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les guillemets inversés
\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemets inversés
\end_layout

\end_inset

 sont utilisés pour délimiter la commande.
 La fonction 
\color blue
run
\color inherit
 exécute cette dernière: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
run()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 run(cmd)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Julia est un langage très puissant.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La partie 
\begin_inset Quotes cld
\end_inset

Julia est un langage très puissant.
\begin_inset Quotes crd
\end_inset

 représente la sortie de la commande 
\color blue
echo
\color inherit
, envoyée à STDOUT
\begin_inset Foot
status open

\begin_layout Plain Layout

\series bold
ST
\series default
andard 
\series bold
OUT
\series default
put
\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
STDOUT
\end_layout

\end_inset

 La fonction 
\color blue
run
\color inherit
 elle-même retourne un objet processus et émet une 
\color blue
ErrorException
\color inherit
 si la commande externe ne s'exécute pas correctement.
\begin_inset Index idx
status open

\begin_layout Plain Layout
ErrorException
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si vous souhaitez lire la sortie de la commande externe, il convient d'utiliser
 
\color blue
read
\color inherit
 au lieu de 
\color blue
run
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
read()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a = read(cmd, String)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Julia est un langage très puissant.
\backslash
n"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La plupart des systèmes 
\noun on
Unix
\noun default
 fournissent une commande appelée 
\color blue
md5sum
\color inherit
 ou 
\color blue
md5
\color inherit
 qui lit le contenu d'un fichier et calcule une 
\begin_inset Quotes cld
\end_inset

somme de contrôle
\begin_inset Quotes crd
\end_inset

.
 Vous pouvez en apprendre davantage sur 
\begin_inset CommandInset href
LatexCommand href
name "la page MD5"
target "https://fr.wikipedia.org/wiki/MD5"
literal "false"

\end_inset

 de Wikipédia.
 Cette commande fournit un moyen efficace de vérifier si deux fichiers présenten
t le même contenu.
 La probabilité que des contenus différents donnent la même somme de contrôle
 est extrêmement faible.
\begin_inset Index idx
status open

\begin_layout Plain Layout
md5sum
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
md5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vous pouvez utiliser une commande pour lancer 
\color blue
md5
\color inherit
 à partir de Julia et obtenir le résultat:
\begin_inset Index idx
status open

\begin_layout Plain Layout
$, interpolation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 filename = 
\color brown
"output.txt" 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"output.txt"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 cmd = 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset

md5 
\color magenta
$filename
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset

 md5 output.txt
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`{}
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 res = read(cmd, String)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"MD5 (output.txt) = d41d8cd98f00b204e9800998ecf8427e
\backslash
n"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Modules
\end_layout

\begin_layout Standard
Supposons que vous ayez un fichier nommé 
\color blue
wc.jl
\color inherit
 contenant les 9 lignes de code suivant:
\begin_inset Index ind
status open

\begin_layout Plain Layout
linecount
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 linecount(filename) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count = 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 line
\color green
 in
\color inherit
 eachline(filename) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count += 1 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
print(linecount(
\color brown
"wc.jl"
\color inherit
))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À l'exécution, ce programme se lit lui-même et affiche le nombre de lignes
 du fichier, soit 9.
 Il est permis de l'inclure dans le REPL comme ceci: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
include()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 include(
\color brown
"wc.jl"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\color lightgray
9
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia introduit des modules permettant de créer des espaces de travail variables
 distincts, c'est-à-dire avec de nouvelles portées générales.
\end_layout

\begin_layout Standard
Un module
\begin_inset Index idx
status open

\begin_layout Plain Layout
module
\end_layout

\end_inset

 commence par le mot-clé 
\color blue
module
\color inherit
 et se termine par 
\color blue
end
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset

 Les conflits de noms sont évités entre vos propres définitions de haut
 niveau et celles trouvées dans le code de quelqu'un d'autre.
 
\color blue
import
\color inherit
 permet de contrôler quels noms d'autres modules sont visibles et 
\color blue
export
\color inherit
 spécifie les noms de fichiers qui sont publics parmi les vôtres, c'est-à-dire
 ceux qui peuvent être utilisés en dehors du module sans être préfixés par
 le nom du module.
\begin_inset Index idx
status open

\begin_layout Plain Layout
export
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
LineCount, module
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
module
\color inherit
 LineCount
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
export
\color inherit
 linecount
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
function
\color inherit
 linecount(filename)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count = 0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 line 
\color green
in
\color inherit
 eachline(filename)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count += 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

count
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green

\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'objet 
\color blue
LineCount
\color inherit
 fournit la commande 
\color blue
linecount
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
using Object
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> using
\color inherit
 LineCount
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
linecount(
\color brown
"wc.jl"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
11
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 14-1
\end_layout

\begin_layout Standard
Saisissez cet exemple dans un fichier nommé 
\color blue
wc.jl,
\color inherit
 incluez-le dans le REPL et entrez 
\color blue
using LineCount
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Si vous réimportez un module, Julia ne réagira pas et ne relira pas le fichier,
 même en cas de modification.
 Si vous voulez recharger un module, vous devez redémarrer le REPL.
 Il existe un paquet 
\backslash
textcolor{blue}{Revise} qui permet de prolonger la durée des sessions (voir
 
\backslash
href{https://github.com/timholy/Revise.jl}{Revise.jl}).
 
\backslash
index{Revise.jl}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Lorsque des fichiers sont utilisés en lecture et en écriture, des problèmes
 d'espacement sont susceptibles d'apparaître.
 Ces erreurs sont souvent difficiles à déboguer, car les espaces, les tabulation
s et les nouvelles lignes sont normalement invisibles: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
repr()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dump()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 s = 
\color brown
"1 2
\backslash
t 3
\backslash
n 4"
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 println(s)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les fonctions internes
\color blue
 repr
\color inherit
 ou 
\color blue
dump
\color inherit
 sont des auxiliaires pratiques.
 Elles prennent tout objet en argument et retournent une représentation
 de l'objet sous forme de chaîne.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
repr(s)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"
\backslash
"1 2
\backslash

\backslash
t 3
\backslash

\backslash
n 4
\backslash
""
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 dump(s) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
String "1 2
\backslash
t 3
\backslash
n 4"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela peut être utile pour le débogage.
\end_layout

\begin_layout Standard
Un autre problème susceptible d'être rencontré tient au fait que divers
 systèmes utilisent différents caractères pour indiquer la fin d'une ligne.
 Certains utilisent une nouvelle ligne, représentée par 
\color blue

\backslash
n
\color inherit
, d'autres un caractère de retour, représenté 
\color blue

\backslash
r
\color inherit
, d'autres encore les deux.
\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
nouvelle ligne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
caractère de retour
\end_layout

\end_inset

 Si des fichiers sont échangés entre différents systèmes, des incohérences
 de ce type peuvent survenir.
\end_layout

\begin_layout Standard
Pour la plupart des systèmes, il existe des applications permettant la conversio
n d'un format à un autre.
 Vous pouvez les trouver (et en apprendre plus sur cette question) en consultant
 la page Wikipédia traitant la 
\begin_inset CommandInset href
LatexCommand href
name "fin de ligne"
target "https://fr.wikipedia.org/wiki/Fin_de_ligne"
literal "false"

\end_inset

.
 Bien entendu, vous pouvez en écrire une vous-même.
\begin_inset Index idx
status open

\begin_layout Plain Layout
fin de ligne
\end_layout

\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
persistant terme qui se rapporte à un programme qui fonctionne 
\begin_inset Quotes cld
\end_inset

indéfiniment
\begin_inset Quotes crd
\end_inset

 et qui conserve au moins une partie de ses données sur un support permanent,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance
\end_layout

\end_inset


\end_layout

\begin_layout Description
fichier
\begin_inset space ~
\end_inset

texte séquence de caractères enregistrée en permanence sur un disque dur
 (par exemple),
\begin_inset Index idx
status open

\begin_layout Plain Layout
fichier texte
\end_layout

\end_inset


\end_layout

\begin_layout Description
répertoire collection de fichiers nommés (parfois appelée 
\begin_inset Quotes cld
\end_inset

dossier
\begin_inset Quotes crd
\end_inset

), 
\begin_inset Index idx
status open

\begin_layout Plain Layout
repertoire@répertoire
\end_layout

\end_inset


\end_layout

\begin_layout Description
chemin
\begin_inset space ~
\end_inset

d'accès chaîne de caractères qui identifie un fichier, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chemin absolu
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
chemin d'accès
\end_layout

\end_inset


\end_layout

\begin_layout Description
chemin
\begin_inset space ~
\end_inset

relatif chemin d'accès qui part du répertoire courant, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chemin relatif
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
chemin
\begin_inset space ~
\end_inset

absolu chemin d'accès qui part du répertoire racine (ou 
\emph on
root
\emph default
, symbolisé par 
\color blue
/ 
\color inherit
sur les systèmes 
\noun on
Unix
\noun default
, GNU/
\noun on
Linux
\noun default
 et BSD),
\end_layout

\begin_layout Description

\color blue
catch
\color inherit
 commande pour éviter qu'une exception ne mette fin à un programme en utilisant
 les déclarations 
\color blue
try ...
 catch ...
 finally
\color inherit
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
catch
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
finally
\end_layout

\end_inset


\end_layout

\begin_layout Description
base
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

données fichier dont le contenu est organisé comme un dictionnaire avec
 des clés correspondant à des valeurs,
\begin_inset Index idx
status open

\begin_layout Plain Layout
base de données
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
shell programme qui permet aux utilisateurs de saisir des commandes et de
 les exécuter en lançant d'autres programmes (comme bash, csh, sh),
\begin_inset Index idx
status open

\begin_layout Plain Layout
shell
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
objet
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

commande objet qui représente une commande shell, permettant à un programme
 Julia d'exécuter des commandes et d'en lire le résultat.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet de commande
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 14-2
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
sed
\color inherit
 qui prend comme arguments une chaîne de caractères modèle, une chaîne de
 remplacement et deux noms de fichiers.
 Cette fonction doit lire le premier fichier et écrire le contenu dans le
 second, en le créant si nécessaire.
 Si la chaîne modèle apparaît quelque part dans le fichier, elle doit être
 substituée par la chaîne de remplacement.
\begin_inset Index ind
status open

\begin_layout Plain Layout
sed
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si une erreur se produit lors de l'ouverture, de la lecture, de l'écriture
 ou de la fermeture d'un fichier, votre programme doit capter l'exception,
 afficher un message d'erreur, puis quitter le flux de programmation.
\end_layout

\begin_layout Subsection*
Exercice 14-3
\end_layout

\begin_layout Standard
Si vous avez résolu l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-13-10-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

, vous savez comment créer un dictionnaire qui établit une correspondance
 entre une chaîne de lettres triée et la série de mots pouvant être orthographié
s avec ces lettres.
 Par exemple, 
\color blue
"spot"
\color inherit
 correspond au tableau 
\color blue
["post", "pots", "stop", "tops"]
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
anagramsets
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Écrivez un module qui importe 
\color blue
anagramsets
\color inherit
 et qui fournit deux nouvelles fonctions: (i) 
\color blue
storeanagrams
\color inherit
 qui doit enregistrer le dictionnaire des anagrammes en utilisant JLD2,
 (ii) 
\color blue
readanagrams
\color inherit
 qui doit rechercher un mot et retourner un tableau de ses anagrammes.
\begin_inset Index idx
status open

\begin_layout Plain Layout
anagramme
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
storeanagrams
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
readanagrams
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 14-4
\end_layout

\begin_layout Standard
Dans une grande collection de fichiers MP3, il peut y avoir plusieurs copies
 d'une même chanson stockées dans différents répertoires ou avec des noms
 de fichiers différents.
 L'objectif de cet exercice est de rechercher les doubles.
\end_layout

\begin_layout Enumerate
Écrivez un programme qui effectue une recherche dans un répertoire ainsi
 que tous ses sous-réper\SpecialChar softhyphen
toires (donc, de manière récursive) et qui retourne
 un tableau de chemins complets pour tous les fichiers ayant un suffixe
 donné (comme 
\emph on
.mp3
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
mp3
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pour reconnaître les doubles, vous pouvez utiliser 
\color blue
md5sum
\color inherit
 ou
\color blue
 md5
\color inherit
 pour calculer une 
\begin_inset Quotes cld
\end_inset

somme de contrôle
\begin_inset Quotes crd
\end_inset

 associée à chaque fichier.
 Si deux fichiers ont la même somme de contrôle, ils ont plus que probablement
 le même contenu.
\begin_inset Index idx
status open

\begin_layout Plain Layout
md5sum
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
md5
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pour effectuer une double vérification, vous pouvez utiliser la commande
 
\noun on
Unix
\noun default
 
\color blue
diff
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Structures-et-objets"

\end_inset

Structures et objets
\end_layout

\begin_layout Standard
À ce stade, nous savons comment utiliser d'une part les fonctions pour organiser
 le code et d'autre part les types intégrés (ou internes) afin d'organiser
 les données.
 L'étape suivante consiste à apprendre à construire nos propres types pour
 organiser à la fois code et données.
 C'est un sujet important: quelques chapitres seront nécessaires pour y
 parvenir.
\begin_inset Index idx
status open

\begin_layout Plain Layout
structures et objets
\end_layout

\end_inset


\end_layout

\begin_layout Section
Types composites
\end_layout

\begin_layout Standard
Jusqu'ici, nous avons utilisé de nombreux types internes à Julia.
 Nous allons maintenant définir un type personnel.
 À titre d'exemple, nous allons créer un type appelé 
\color blue
Point
\color inherit
 qui représente un point dans un espace bidimensionnel.
 En notation mathématique, les points sont souvent écrits entre parenthèses
 avec une virgule séparant les coordonnées.
 Par exemple, dans un repère cartésien 
\begin_inset Formula $\mathbb{R}{}^{2}$
\end_inset

, 
\begin_inset Formula $(0,0)$
\end_inset

 représente l'origine et 
\begin_inset Formula $(x,y)$
\end_inset

 un point dont l'abscisse vaut 
\begin_inset Formula $x$
\end_inset

 et l'ordonnée 
\begin_inset Formula $y$
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
type composite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il y a plusieurs façons de traiter cette information en Julia:
\end_layout

\begin_layout Enumerate
les coordonnées pourraient être enregistrées séparément dans deux variables,
 
\color blue

\begin_inset Formula $x$
\end_inset


\color inherit
 et 
\color blue

\begin_inset Formula $y$
\end_inset


\color inherit
,
\end_layout

\begin_layout Enumerate
elles pourraient se retrouver sous forme d'éléments au sein d'un tableau
 ou d'un tuple,
\end_layout

\begin_layout Enumerate
enfin, nous pourrions créer un type personnalisé pour représenter les points
 sous forme d'objets.
\end_layout

\begin_layout Standard
La création d'un nouveau type est plus compliquée que les autres options,
 mais elle présente des avantages qui apparaîtront bientôt.
\end_layout

\begin_layout Standard
Un 
\emph on
type composite
\emph default
 défini par le programmeur est également appelé une 
\emph on
structure
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Struct
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
structure
\end_layout

\end_inset

 La définition 
\color blue
struct 
\color inherit
pour représenter un point ressemble à ceci:
\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Point
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'en-tête indique que la nouvelle structure s'appelle 
\color blue
Point
\color inherit
.
 Le corps définit les 
\emph on
attributs
\emph default
 ou les 
\emph on
champs
\emph default
 de la structure.
 La structure 
\color blue
Point
\color inherit
 possède deux champs: 
\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
structure, attribut
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
structure, champ
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une structure fonctionne comme une usine créant des objets.
 Pour créer un point, on peut appeler 
\color blue
Point
\color inherit
 comme s'il s'agissait d'une fonction ayant pour arguments les valeurs des
 champs.
 Lorsque 
\color blue
Point
\color inherit
 est utilisé comme une fonction, on l'appelle un 
\emph on
constructeur
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p = Point(3.0, 4.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point(3.0, 4.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La valeur retournée est une référence à un objet 
\color blue
Point
\color inherit
, que nous affectons à 
\color blue
p
\color inherit
.
 La création d'un nouvel objet est une 
\emph on
instanciation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph off
instanciation
\end_layout

\end_inset


\emph default
 et l'objet est une
\emph on
 instance
\emph default
 du type.
\begin_inset Index idx
status open

\begin_layout Plain Layout
instance
\end_layout

\end_inset

 Lorsqu'une instance est affichée, Julia indique à quel type elle appartient
 et quelles sont les valeurs des attributs.
 Chaque objet est une instance d'un certain type, les termes 
\begin_inset Quotes cld
\end_inset

objet
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

instance
\begin_inset Quotes crd
\end_inset

 sont donc interchangeables.
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet et instance
\end_layout

\end_inset

 Cependant, dans ce chapitre, le terme 
\begin_inset Quotes cld
\end_inset

instance
\begin_inset Quotes crd
\end_inset

 sera utilisé pour désigner un type défini par le programmeur.
\end_layout

\begin_layout Standard
Un diagramme d'état qui rend compte d'un objet et de ses champs est appelé
 un diagramme d'objet (voir la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'objet-pour-Point-et-ses-attributs"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, diagramme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme d'objet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme_objet_Point-xy_inkscape.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'objet-pour-Point-et-ses-attributs"

\end_inset

Diagramme d'objet pour le type 
\color blue
Point
\color inherit
 avec la valeur de ses attributs.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Les structures sont persistantes
\end_layout

\begin_layout Standard
La valeur des champs (ou attributs) peut être extraite en utilisant la notation
\begin_inset space ~
\end_inset


\color blue
.

\color inherit
 de cette manière: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
structure, persistance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = p.x
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3.0
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = p.y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression 
\color blue
p.x
\color inherit
 signifie: 
\begin_inset Quotes cld
\end_inset

Allez à l'objet auquel 
\color blue
p
\color inherit
 se réfère et extrayez la valeur de 
\color blue
x
\color inherit

\begin_inset Quotes crd
\end_inset

.
 Dans l'exemple, nous attribuons cette valeur à une variable nommée 
\color blue
x
\color inherit
.
 Il n'y a pas de conflit entre la variable 
\color blue
x
\color inherit
 et le champ 
\color blue
x
\color inherit
.
 
\end_layout

\begin_layout Standard
La notation par points peut être exploitée dans le cadre de n'importe quelle
 expression.
 Par exemple, en considérant 
\color blue
p.x
\color inherit
 et 
\color blue
p.y
\color inherit
 comme des longueurs, le théorème de Pythagore
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pythagore, théorème de
\end_layout

\end_inset

 est applicable:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 distance = sqrt(p.x^2 + p.y^2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
5.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ceci dit, par défaut, les structures sont persistantes.
 Après construction, les champs ne peuvent pas changer de valeur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p.y = 1.0
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 setfield
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 immutable struct of type Point cannot be changed
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le caractère persistant des structures présente plusieurs avantages:
\end_layout

\begin_layout Itemize
l'efficacité,
\end_layout

\begin_layout Itemize
l'impossibilité de violer les invariants
\begin_inset Index idx
status open

\begin_layout Plain Layout
invariant
\end_layout

\end_inset

 fournis par les constructeurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur
\end_layout

\end_inset

 du type (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Constructeurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

),
\end_layout

\begin_layout Itemize
la facilité à raisonner sur du code utilisant des objets persistants.
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet persistant
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Structures non persistantes
\end_layout

\begin_layout Standard
S'il y échet, des types composites non persistants peuvent être déclarés
 avec le mot-clé 
\color blue
mutable struct
\color inherit
.
 Voici la définition d'un point modifiable (
\color blue
MPoint
\color inherit
 pour 
\begin_inset Quotes cld
\end_inset

Mutable
\begin_inset Quotes crd
\end_inset

): 
\begin_inset Index idx
status open

\begin_layout Plain Layout
non-persistance, structure
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mutabilité
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
mutable struct
\color inherit
 MPoint
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ainsi, il devient possible d'attribuer des valeurs à une instance d'une
 structure mutable en utilisant la notation par points:
\begin_inset Index idx
status open

\begin_layout Plain Layout
notation par .
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 blank = MPoint(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 blank.x = 3.0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3.0
\end_layout

\begin_layout Plain Layout
julia> blank.y = 4.0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Rectangles"

\end_inset

Rectangles
\end_layout

\begin_layout Standard
Régulièrement, les champs d'un objet sont évidents.
 Néanmoins, dans certaines circonstances, il faut opérer des choix.
 Imaginons qu'il faille concevoir un type pour représenter des rectangles.
 Quels champs utiliser afin de spécifier l'emplacement et la taille d'un
 rectangle? Pour simplifier les choses, supposons que le rectangle est disposé
 soit verticalement, soit horizontalement (pour éviter de traiter le problème
 de son inclinaison).
\end_layout

\begin_layout Standard
Il existe au moins deux possibilités:
\end_layout

\begin_layout Itemize
nous pouvons définir un coin du rectangle (ou son centre), la largeur et
 la hauteur,
\end_layout

\begin_layout Itemize
nous pouvons définir deux coins opposés.
\end_layout

\begin_layout Standard
À ce stade, il est difficile de dire quel est le meilleur choix.
 À titre d'exemple, mettons en œuvre le premier cas de figure.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

" 
\end_layout

\begin_layout Plain Layout

\size small
\color brown
Représentation d'un rectangle.
\end_layout

\begin_layout Plain Layout

\size small
\color brown
champs: largeur, hauteur, coin.
 
\end_layout

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Rectangle 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

largeur
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

hauteur
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

coin
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La mini-documentation précise les champs: la 
\color blue
largeur
\color inherit
 et la 
\color blue
hauteur
\color inherit
 sont des nombres, tandis que 
\color blue
coin
\color inherit
 (qui requiert deux coordonnées) est un objet 
\color blue
Point
\color inherit
 qui définit le coin inférieur gauche.
\begin_inset Index idx
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour représenter un rectangle, il faut instancier un objet 
\color blue
Rectangle
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
instanciation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 origine = MPoint(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 box = Rectangle(100.0, 200.0, origine)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Rectangle(100.0, 200.0, MPoint(0.0, 0.0))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le diagramme d'objet
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme d'objet
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, diagramme
\end_layout

\end_inset

 (voir la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'objet-pour-objet-Rectangle"
plural "false"
caps "false"
noprefix "false"

\end_inset

) montre l'état de l'objet 
\color blue
box
\color inherit
.
 Un objet tel que 
\color blue
coin
\color inherit
, champ d'un autre objet, est dit 
\emph on
intégré
\emph default
 (
\emph on
embedded
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet intégré
\end_layout

\end_inset

 Étant donné que l'attribut 
\color blue
coin
\color inherit
 fait référence à un objet non persistant (
\color blue
MPoint
\color inherit
), ce dernier est dessiné en dehors de l'objet 
\color blue
Rectangle
\color inherit
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme_objet-objet-rectangle-inkscape.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'objet-pour-objet-Rectangle"

\end_inset

Diagramme d'objet pour l'objet 
\color blue
Rectangle
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Instances en argument
\end_layout

\begin_layout Standard
Il est possible de faire passer une instance
\begin_inset Index idx
status open

\begin_layout Plain Layout
instance en argument
\end_layout

\end_inset

 comme un argument selon la méthode habituelle.
 Par exemple:
\begin_inset Index ind
status open

\begin_layout Plain Layout
printpoint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
printpoint(p) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"(
\color magenta
$
\color inherit
(p.x)
\color brown
,
\color inherit
 
\color magenta
$
\color inherit
(p.y)
\color brown
)"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
printpoint
\color inherit
 prend une instance 
\color blue
Point
\color inherit
 comme argument et l'affiche en notation mathématique.
 Pour l'invoquer, vous pouvez passer 
\color blue
p
\color inherit
 comme argument:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printpoint(blank)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(3.0, 4.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si un objet 
\color blue
struct
\color inherit
 non persistant est passé à une fonction en tant qu'argument, cette fonction
 peut modifier les champs de l'objet.
 Par exemple, 
\color blue
movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\color inherit
prend un objet 
\color blue
Point
\color inherit
 non persistant et deux nombres, 
\color blue
dx
\color inherit
 et 
\color blue
dy
\color inherit
, et ajoute — respectivement — ces nombres aux attributs 
\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
 de 
\color blue
Point
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
movepoint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(p, dx, dy)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p.x += dx
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p.y += dy 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
nothing
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un exemple qui en démontre l'effet:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 origine = MPoint(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(0.0, 0.0)
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(origine, 1.0, 2.0)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 origine 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(1.0, 2.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À l'intérieur de la fonction, 
\color blue
p
\color inherit
 est un alias
\begin_inset Index idx
status open

\begin_layout Plain Layout
alias
\end_layout

\end_inset

 d'
\color blue
origine
\color inherit
.
 Par conséquent, lorsque la fonction modifie 
\color blue
p
\color inherit
, l'objet 
\color blue
origine
\color inherit
 est aussi affecté.
\end_layout

\begin_layout Standard
Passer un objet 
\color blue
Point
\color inherit
 persistant à 
\color blue
movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 provoque une erreur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(p, 1.0, 2.0)
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 setfield
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 immutable struct of type Point cannot be changed
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cependant, il est permis de modifier la valeur d'un attribut non persistant
 au sein d'un objet persistant.
 Par exemple, 
\color blue
moverectangle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 a comme arguments un objet 
\color blue
Rectangle
\color inherit
 et deux nombres (
\color blue
dx
\color inherit
 et 
\color blue
dy
\color inherit
).
 Cette fonction utilise 
\color blue
movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 pour déplacer le coin du rectangle:
\begin_inset Index ind
status open

\begin_layout Plain Layout
movepoint
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
moverectangle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
function
\color blue
 
\color black
moverectangle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(rect, dx, dy)
\end_layout

\begin_layout Plain Layout

\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(rect.coin, dx, dy)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De ce fait, 
\color blue
p
\color inherit
 dans 
\color blue
movepoint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\color inherit
est un alias de 
\color blue
rect.coin
\color inherit
.
 Aussi, quand
\color blue
 p
\color inherit
 est modifié, 
\color blue
rect.coin
\color inherit
 l'est-il également:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 box 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Rectangle(100.0, 200.0, MPoint(0.0, 0.0)) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 moverectangle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(box, 1.0, 2.0)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 box 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Rectangle(100.0, 200.0, MPoint(1.0, 2.0))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Vous ne pouvez pas réaffecter un attribut non persistant associé à un objet
 persistant: 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\backslash
begin{tabularx}{0.95
\backslash
textwidth} { 
\end_layout

\begin_layout Plain Layout

    | >{
\backslash
raggedright
\backslash
arraybackslash}X  }  
\end_layout

\begin_layout Plain Layout

  
\backslash
small{
\backslash
textcolor{green}{
\backslash
small{julia>}} box.coin = MPoint(1.0, 2.0)} 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

  
\backslash
small{
\backslash
textcolor{red}{ERROR
\backslash
string: setfield
\backslash
string: immutable struct of type Rectangle cannot be changed}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{tabularx}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 15-1
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
distancebetweenpoints
\color inherit
 qui prend deux points comme arguments et retourne la distance entre eux.
\begin_inset Index ind
status open

\begin_layout Plain Layout
distancebetweenpoints
\end_layout

\end_inset


\end_layout

\begin_layout Section
Instances en tant que valeurs retournées
\end_layout

\begin_layout Standard
Les fonctions peuvent renvoyer des instances
\begin_inset Index idx
status open

\begin_layout Plain Layout
instance
\end_layout

\end_inset

.
 Par exemple, 
\color blue
findcenter
\color inherit
 prend 
\color blue
Rectangle
\color inherit
 comme argument et retourne un 
\color blue
Point
\color inherit
 qui contient les coordonnées du centre du rectangle: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
findcenter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
function
\color blue
 
\color black
findcenter(rect) 
\end_layout

\begin_layout Plain Layout

\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Point(rect.coin.x + rect.largeur / 2, rect.coin.y + rect.hauteur / 2)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression 
\color blue
rect.coin.x
\color inherit
 signifie: 
\begin_inset Quotes cld
\end_inset

Allez à l'objet
\color blue
 rect 
\color inherit
et sélectionnez le champ nommé 
\color blue
coin
\color inherit
, puis rendez-vous à cet objet et sélectionnez le champ nommé 
\color blue
x
\color inherit

\begin_inset Quotes crd
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
rect.coin.x
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici un exemple qui passe 
\color blue
box
\color inherit
 en argument et affecte le 
\color blue
Point 
\color inherit
résultant à 
\color blue
centre
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
box
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 centre = findcenter(box)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point(51.0, 102.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Section
Copies
\end_layout

\begin_layout Standard
L'
\emph on
aliasing
\emph default
 peut rendre un programme difficile à lire, parce que les modifications
 apportées à un endroit peuvent avoir des effets inattendus ailleurs dans
 le code.
 Il est difficile de garder une trace de toutes les variables qui pourraient
 se référer à un objet donné.
\begin_inset Index idx
status open

\begin_layout Plain Layout
aliasing
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
copie
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La copie d'un objet est souvent une alternative judicieuse à l'
\emph on
aliasing
\emph default
.
 Julia propose une fonction appelée 
\color blue
deepcopy
\color inherit
 qui peut dupliquer tout objet:
\begin_inset Index idx
status open

\begin_layout Plain Layout
deepcopy()
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 p1 = MPoint(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 p2 = deepcopy(p1) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MPoint(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 p1 ≡ p2 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\color black
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color black
 p1 == p2 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
≡ 
\color inherit
indique que 
\color blue
p1
\color inherit
 et 
\color blue
p2
\color inherit
 ne constituent pas le même objet, ce qui est attendu.
 En revanche, on aurait pu attendre que 
\color blue
==
\color inherit
 donne 
\color blue
true
\color inherit
, car ces points contiennent les mêmes données.
 Dans ce cas, il faut être attentif au fait que, pour les objets non persistants
, le comportement par défaut de l'opérateur 
\color blue
==
\color inherit
 est le même que celui de l'opérateur 
\color blue
===
\color inherit
.
 L'opérateur 
\color blue
==
\color inherit
 vérifie l'identité de l'objet et non son équivalence.
 C'est parce que, pour les types composites non persistants, Julia ne sait
 pas ce qui doit être considéré comme équivalent (du moins, pas encore).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
equiv$}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 15-2
\end_layout

\begin_layout Standard
Créez une instance de 
\color blue
Point
\color inherit
, faites-en une copie et vérifiez l'équivalence ainsi que l'égalité de la
 copie et de son original.
 Le résultat peut vous surprendre, mais il montre pourquoi l'
\emph on
aliasing
\emph default
 ne constitue pas un problème pour un objet persistant.
\begin_inset Index idx
status open

\begin_layout Plain Layout
persistance, aliasing
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Lorsqu'on commence à travailler avec des objets, de nouvelles exceptions
 sont susceptibles d'apparaître.
 Par exemple, une tentative d'accès à un champ qui n'existe pas se solde
 par une erreur: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p = Point(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point(3.0, 4.0)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p.z = 1.0 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 type Point has no field z Stacktrace
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 [1] setproperty
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Point, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Symbol, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64) at ./sysimg.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

19 [2] top-level scope at none:0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au cas où vous ne seriez pas sûr du type d'objet, il convient de le demander
 à Julia: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(p)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
isa
\color inherit
 est également utilisable
\color blue
 
\color inherit
pour vérifier qu'un objet est bel et bien une instance d'un type:
\begin_inset Index idx
status open

\begin_layout Plain Layout
isa()
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
p 
\color green
isa
\color inherit
 Point
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
S'il n'est pas sûr qu'un objet possède un attribut particulier, la fonction
 interne 
\color blue
fieldnames
\color inherit
 s'avère utile: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fieldnames()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
fieldnames(Point)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

x, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

y)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Alternativement, la fonction 
\color blue
isdefined
\color inherit
 est utilisable:
\begin_inset Index idx
status open

\begin_layout Plain Layout
isdefined()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isdefined(p, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

x)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isdefined(p, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

z)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le premier argument désigne tout objet.
 Le deuxième argument est composé du symbole 
\color blue
:
\color inherit
 suivi du nom du champ.
 
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description

\color blue
struct
\color inherit
 type composite, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset


\end_layout

\begin_layout Description
constructeur fonction portant le même nom qu'un type qui crée des instances
 de ce type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur
\end_layout

\end_inset


\end_layout

\begin_layout Description
instance objet qui appartient à un type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
instance
\end_layout

\end_inset


\end_layout

\begin_layout Description
instancier créer un nouvel objet, 
\end_layout

\begin_layout Description
attribut
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

champ une des valeurs nommées associées à un objet,
\begin_inset Index idx
status open

\begin_layout Plain Layout
attribut
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
champ
\end_layout

\end_inset


\end_layout

\begin_layout Description
objet
\begin_inset space ~
\end_inset

intégré objet 
\begin_inset Quotes cld
\end_inset

enchassé
\begin_inset Quotes crd
\end_inset

 dans le champ d'un autre objet, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet enchassé
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
objet intégré
\end_layout

\end_inset


\end_layout

\begin_layout Description
duplication
\begin_inset space ~
\end_inset

(
\emph on
deep
\begin_inset space ~
\end_inset

copy
\emph default
) action de copier le contenu d'un objet, ainsi que tous les objets qui
 y sont intégrés, et ainsi de suite.
 La duplication est mise en œuvre par la fonction 
\color blue
deepcopy
\color inherit
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
duplication
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
deepcopy()
\end_layout

\end_inset


\end_layout

\begin_layout Description
diagramme
\begin_inset space ~
\end_inset

d'objet diagramme qui montre les objets, leurs champs et les valeurs des
 champs.
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme d'objet
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, diagramme
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 15-3
\end_layout

\begin_layout Enumerate
Rédigez une définition pour un type nommé 
\color blue
Circle
\color inherit
 avec des champs 
\color blue
center
\color inherit
 et 
\color blue
radius
\color inherit
, où
\color blue
 center
\color inherit
 est un objet 
\color blue
Point
\color inherit
 et 
\color blue
radius
\color inherit
 est un nombre.
 
\end_layout

\begin_layout Enumerate
Instancier un objet 
\color blue
circle
\color inherit
 qui représente un cercle dont le centre est à (150, 100) et le rayon vaut
 75.
\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
pointincercle
\color inherit
 qui prend un objet
\color blue
 Circle
\color inherit
 et un objet 
\color blue
Point
\color inherit
 et qui retourne 
\color blue
true
\color inherit
 si le point se trouve dans ou sur la circonférence du cercle.
\begin_inset Index ind
status open

\begin_layout Plain Layout
pointincircle
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
rectincircle
\color inherit
 qui prend un objet 
\color blue
Cercle
\color inherit
 et un objet 
\color blue
Rectangle
\color inherit
 et qui retourne 
\color blue
true
\color inherit
 si le rectangle se trouve entièrement dans le cercle ou touche la circonférence.
\begin_inset Index ind
status open

\begin_layout Plain Layout
rectincircle
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
rectcircleoverlap
\color inherit
 qui prend un objet
\color blue
 Cercle
\color inherit
 et un objet 
\color blue
Rectangle
\color inherit
 et retourne 
\color blue
true
\color inherit
 si l'un des coins du rectangle se trouve à l'intérieur du cercle.
 Ou, dans une version plus complexe, elle retourne 
\color blue
true
\color inherit
 si une partie quelconque du rectangle intersecte le cercle.
\begin_inset Index ind
status open

\begin_layout Plain Layout
rectcircleoverlap
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection*
Exercice 15-4
\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée
\color blue
 drawrect
\color inherit
 qui prend un objet 
\begin_inset Quotes cld
\end_inset

turtle
\begin_inset Quotes crd
\end_inset

 et un objet 
\color blue
Rectangle
\color inherit
 et utilise la tortue pour dessiner le rectangle.
\begin_inset Index ind
status open

\begin_layout Plain Layout
drawrect
\end_layout

\end_inset

 Voir le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour des exemples d'utilisation d'objets 
\color blue
Turtle
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Turtle
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Écrivez une fonction appelée 
\color blue
drawcircle
\color inherit
 qui prend un objet 
\color blue
Turtle
\color inherit
 et un objet 
\color blue
Cercle
\color inherit
 et qui dessine le cercle.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
drawcircle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Structures-et-fonctions"

\end_inset

Structures et fonctions
\end_layout

\begin_layout Standard
Dès lors que nous savons créer de nouveaux types composites, l'étape suivante
 consiste à écrire des fonctions qui prennent des objets définis par le
 programmeur comme paramètres et les retournent en tant que résultats.
 Dans ce chapitre, nous présentons également le 
\begin_inset Quotes cld
\end_inset

style de programmation fonctionnelle
\begin_inset Quotes crd
\end_inset

 et deux nouveaux plans de développement de programmes.
\begin_inset Index idx
status open

\begin_layout Plain Layout
structures et fonctions
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Heures,-minutes-et-secondes"

\end_inset

Heures, minutes et secondes
\end_layout

\begin_layout Standard
Comme autre exemple de type composite, nous allons définir une 
\color blue
struct
\color inherit
 appelée 
\color blue
MyTime
\color inherit
 qui enregistre l'heure associée à un moment de la journée.
 Voici la définition de la structure: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
MyTime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

" 
\end_layout

\begin_layout Plain Layout

\size small
\color brown
Représentation d'un moment de la journée.
\end_layout

\begin_layout Plain Layout

\size small
\color brown
Champs: heure, minute, seconde 
\end_layout

\begin_layout Plain Layout

\size small
\color brown
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset

"
\end_layout

\begin_layout Plain Layout

\size small
\color green
mutable
\color inherit
 struct MyTime
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le mot 
\color blue
Time
\color inherit
 étant déjà utilisé dans Julia, choisissons 
\color blue
MyTime
\color inherit
 pour éviter tout conflit et créons un nouvel objet 
\color blue
MyTime
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
time
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 time = MyTime(11, 59, 30)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MyTime(11, 59, 30)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le diagramme d'objet
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme d'objet
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
objet, diagramme
\end_layout

\end_inset

 pour MyTime est représenté à la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-d'objet-associé-MyTime"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme_objet_MyTime_inkscape.svg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-d'objet-associé-MyTime"

\end_inset

Diagramme d'objet associé à 
\color blue
MyTime
\color inherit
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 16-1
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
printtime
\color inherit
 qui prend un objet 
\color blue
MyTime
\color inherit
 et l'affiche sous la forme heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

seconde.
\begin_inset Index ind
status open

\begin_layout Plain Layout
printtime
\end_layout

\end_inset

 La macro 
\color blue
@printf
\color inherit
 du module StdLib 
\color blue
Printf
\color inherit
 affiche un entier avec le format 
\color blue
"%02d"
\color inherit
 en utilisant au moins deux chiffres, y compris un zéro de tête si nécessaire.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
StdLib
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@printf()}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 16-2
\end_layout

\begin_layout Standard
Écrivez une fonction booléenne appelée
\color blue
 isafter
\color inherit
 qui prend deux objets
\color blue
 MyTime
\color inherit
, 
\color blue
t1
\color inherit
 et 
\color blue
t2
\color inherit
, et qui retourne 
\color blue
true
\color inherit
 si 
\color blue
t1
\color inherit
 suit chronologiquement
\color blue
 t2
\color inherit
 et 
\color blue
false
\color inherit
 dans le cas contraire.
\begin_inset Index ind
status open

\begin_layout Plain Layout
isafter
\end_layout

\end_inset

 Défi: n'utilisez pas de test
\color blue
 if
\color inherit
.
 
\end_layout

\begin_layout Section
Fonctions pures
\end_layout

\begin_layout Standard
Dans les prochaines sections, nous allons écrire deux fonctions
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction pure
\end_layout

\end_inset

 qui additionnent des valeurs de temps.
 Le but est d'appréhender deux types de fonctions: les fonctions pures et
 les modificateurs.
 Nous verrons également un plan de développement appelé 
\emph on
prototype et correctifs
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
prototype et correctif
\end_layout

\end_inset

 Un plan de développement est un procédé permettant de s'attaquer à un problème
 complexe en commençant par un prototype simple et en y incorporant graduellemen
t des éléments qui le complexifient.
\end_layout

\begin_layout Standard
Voici un prototype simple 
\color blue
addtime
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
addtime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 addtime(t1, t2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

MyTime(t1.heure + t2.heure, t1.minute + t2.minute, t1.seconde + t2.seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction crée un nouvel objet 
\color blue
MyTime
\color inherit
, initialise ses champs et retourne une référence au nouvel objet.
 On parle de 
\emph on
fonction pure
\emph default
, car elle ne modifie aucun des objets qui lui sont transmis en tant qu'argument
s.
 En outre, elle n'a aucun autre effet (tel l'affichage d'une valeur ou l'obtenti
on d'une entrée utilisateur) que le renvoi d'une valeur.
\end_layout

\begin_layout Standard
Pour tester cette fonction, créons deux objets 
\color blue
MyTime
\color inherit
:
\end_layout

\begin_layout Itemize

\color blue
start
\color inherit
 contient l'heure de début d'un film, comme
\emph on
 
\emph default

\begin_inset CommandInset href
LatexCommand href
name "\\textit{Le nom de la rose}"
target "https://fr.wikipedia.org/wiki/Le_Nom_de_la_rose_(film)"
literal "true"

\end_inset


\emph on
 
\emph default
de Jean-Jacques Annaud
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
Annaud, Jean-Jacques
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Le nom de la rose
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize

\color blue
duration
\color inherit
 contient la durée du film (2 heures 11 minutes).
\end_layout

\begin_layout Standard

\color blue
addtime
\color inherit
 indique quand le film sera terminé.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start = MyTime(9, 55, 0)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 duration = MyTime(2, 11, 0)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
done = addtime(start, duration)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printtime(done)
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# voir exercice 16.1.1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
11
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

66
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat 11
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

66
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00 est à peine inattendu.
 Le problème vient de ce que cette fonction ne traite pas les cas où le
 nombre de secondes ou de minutes dépasse 60.
 Lorsque cela se produit, il est nécessaire de 
\begin_inset Quotes cld
\end_inset

reporter
\begin_inset Quotes crd
\end_inset

 les secondes supplémentaires dans la colonne des minutes et/ou les minutes
 supplémentaires dans la colonne des heures.
 Voici une version améliorée:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 addtime(t1, t2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde = t1.seconde + t2.seconde 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute = t1.minute + t2.minute 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure = t1.heure + t2.heure 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if 
\color inherit
seconde >= 60 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde -= 60 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute += 1 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 minute >= 60 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute -= 60 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure += 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

MyTime(heure, minute, seconde)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Bien que cette fonction soit correcte, elle commence à s'allonger significativem
ent.
 Ultérieurement (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Prototypage-ou-planification?"
plural "false"
caps "false"
noprefix "false"

\end_inset

), nous considérerons une version plus courte.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modificateurs"

\end_inset

Modificateurs
\end_layout

\begin_layout Standard
Il est parfois utile pour une fonction de modifier les objets qu'elle reçoit
 en paramètre.
 Dans ce cas, les modifications sont visibles pour l'appelant.
 Les fonctions qui procèdent de cette manière sont appelées des
\emph on
 modificateurs
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
modificateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
increment
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 qui ajoute un nombre donné de secondes à un objet 
\color blue
MyTime
\color inherit
 peut être écrite naturellement comme un modificateur.
 Voici une ébauche:
\begin_inset Index ind
status open

\begin_layout Plain Layout
increment!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 increment
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(time, secondes) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.seconde += secondes 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 time.seconde >= 60
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.seconde -= 60
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.minute += 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 time.minute >= 60
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.minute -= 60
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.heure += 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première ligne effectue l'opération de base; le reste traite des cas
 spéciaux que nous avons vus auparavant.
\end_layout

\begin_layout Standard
Cette fonction est-elle correcte? Que se passe-t-il si 
\color blue
secondes 
\color inherit
est bien supérieur à 60?
\end_layout

\begin_layout Standard
Dans ce cas, il ne suffit pas d'effectuer l'opération une seule fois.
 Nous devons poursuivre jusqu'à ce que 
\color blue
time.seconde
\color inherit
 soit inférieur à soixante.
 Une solution consiste à remplacer les déclarations 
\color blue
if
\color inherit
 par des déclarations 
\color blue
while
\color inherit
.
 Cela rendrait la fonction correcte, mais peu efficace.
\end_layout

\begin_layout Standard
Tout ce qui peut être fait avec des modificateurs peut également l'être
 avec des fonctions pures.
 En fait, certains langages de programmation n'autorisent que des fonctions
 pures.
 Il est prouvé que les programmes qui utilisent des fonctions pures sont
 plus rapides à développer et moins sujets aux erreurs que ceux recourant
 aux modificateurs.
 Cependant, les modificateurs sont parfois pratiques et les programmes fonctionn
els ont tendance à être moins efficaces à l'exécution.
\end_layout

\begin_layout Standard
En général, il est recommandé d'écrire des fonctions pures chaque fois que
 cela est raisonnable et de ne recourir aux modificateurs que s'il existe
 un avantage incontestable.
 Cette approche pourrait être appelée: 
\emph on
style de programmation fonctionnelle
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
programmation fonctionnelle
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 16-3
\end_layout

\begin_layout Standard
Écrivez une version correcte de la fonction 
\color blue
increment
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 qui ne contienne aucune boucle.
\begin_inset Index ind
status open

\begin_layout Plain Layout
increment!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 16-4
\end_layout

\begin_layout Standard
Écrivez une version pure de la fonction 
\color blue
increment
\color inherit
, qui crée et retourne un nouvel objet 
\color blue
MyTime
\color inherit
 plutôt que de modifier le paramètre.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Prototypage-ou-planification?"

\end_inset

Prototypage ou planification?
\end_layout

\begin_layout Standard
Le plan de développement exposé ci-dessus est dénommé 
\begin_inset Quotes cld
\end_inset

prototype et correctifs
\begin_inset Quotes crd
\end_inset

 (
\emph on
prototype and patches
\emph default
).
 Pour chaque fonction, nous avons écrit un prototype qui a effectué un calcul
 de base.
 Ensuite après l'avoir testé, nous en avons corrigé les erreurs graduellement.
\begin_inset Index idx
status open

\begin_layout Plain Layout
prototypage
\begin_inset Formula $\leftrightarrow$
\end_inset

planification
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cette approche peut être efficace notamment lorsque le programmeur n'a pas
 encore une compréhension approfondie du problème.
 Ceci étant, les corrections incrémentales peuvent conduire à un code inutilemen
t compliqué — puisqu'il traite de nombreux cas particuliers — et peu fiable
 — étant donné qu'il est difficile de connaître toutes les erreurs traitées.
\end_layout

\begin_layout Standard
Une autre option consiste en un développement planifié dans lequel une compréhen
sion de haut niveau du problème peut rendre la programmation nettement plus
 aisée.
 Dans ce cas, l'idée est qu'un objet 
\color blue
Time
\color inherit
 est en réalité un nombre composé de trois nombres en base 60 (voir 
\begin_inset CommandInset href
LatexCommand href
name "le système sexagécimal"
target "https://fr.wikipedia.org/wiki/Syst%C3%A8me_sexag%C3%A9simal"
literal "false"

\end_inset

).
\end_layout

\begin_layout Standard
Lorsque nous avons écrit
\color blue
 addtime
\color inherit
 and 
\color blue
increment
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, nous faisions effectivement de l'addition en base 60, c'est pourquoi nous
 devions passer d'une colonne à l'autre.
\begin_inset Index ind
status open

\begin_layout Plain Layout
addtime
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
increment!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cette observation suggère une autre approche de l'ensemble du problème:
 nous pouvons convertir les objets 
\color blue
MyTime
\color inherit
 en nombres entiers et profiter du fait que l'ordinateur est capable de
 faire de l'arithmétique des nombres entiers.
\end_layout

\begin_layout Standard
Voici une fonction qui convertit 
\color black
les objets 
\color blue
MyTime
\color inherit
 en nombres entiers: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
timetoint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 timetoint(time)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minutes = time.heure * 60 + time.minute
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

secondes = minutes * 60 + time.seconde
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Et voici une fonction qui convertit un entier en un objet de type
\color blue
 MyTime
\color inherit
 (rappelons que 
\color blue
divrem
\color inherit
 divise le premier argument par le second et retourne le quotient ainsi
 que le reste sous forme de tuple): 
\begin_inset Index idx
status open

\begin_layout Plain Layout
divrem()
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
inttotime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 inttotime(secondes)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(minutes, seconde) = divrem(secondes, 60)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure, minute = divrem(minutes, 60)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

MyTime(heure, minute, seconde)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Il faudra peut-être réfléchir un peu et faire quelques tests pour se convaincre
 que ces fonctions sont correctes.
 Une façon de les tester est de vérifier que
\color blue
 timetoint(inttotime(x)) == x
\color inherit
 pour de nombreuses valeurs de 
\color blue
x
\color inherit
.
 Ceci constitue un exemple de contrôle de cohérence.
\end_layout

\begin_layout Standard
Une fois convaincu que ces fonctions sont correctes, il devient possible
 de les utiliser afin de réécrire 
\color blue
addtime
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
addtime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 addtime(t1, t2) 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

secondes = timetoint(t1) + timetoint(t2)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inttotime(secondes)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette version est plus courte que l'originale et plus facile à vérifier.
\end_layout

\begin_layout Standard
Il est plus difficile de passer de la base 60 à la base 10 (et inversement)
 que de jongler avec les heures, minutes et secondes.
 La conversion de base est plus abstraite.
 La manipulation de valeurs heures/minutes/secondes est plus spontanée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
sexagésimale, base
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
base sexagésimale
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cependant, si nous pouvions traiter ces valeurs comme des nombres en base
 60
\begin_inset Foot
status open

\begin_layout Plain Layout
comme le faisaient les astronomes et géographes grecs.
\end_layout

\end_inset

 et faisions l'investissement d'écrire les fonctions de conversion (
\color blue
timetoint
\color inherit
 et 
\color blue
inttotime
\color inherit
), nous obtiendrions un programme plus court, plus facile à lire et à déboguer
 et… plus fiable.
\end_layout

\begin_layout Standard
Il est également plus aisé d'ajouter des fonctions par la suite.
 Par exemple, imaginons qu'il faille soustraire deux 
\color blue
MyTime
\color inherit
 pour trouver la durée qui les sépare.
 Une approche naïve serait de mettre en œuvre la soustraction par emprunt.
 L'utilisation des fonctions de conversion serait plus facile en base 60
 et aurait plus de chances d'être correcte.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:Ironiquement,-le-fait"

\end_inset

Ironiquement, le fait de poser un problème sous une forme plus générale
 (ce qui demande un investissement) le rend parfois plus facile à résoudre
 du fait qu'il y a moins de cas particuliers et moins de possibilités d'erreur.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 16-5
\end_layout

\begin_layout Standard
Réécrivez 
\color blue
increment! 
\color inherit
en utilisant 
\color blue
timetoint
\color inherit
 et 
\color blue
inttotime
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
increment!
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
timetoint
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
inttotime
\end_layout

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Un objet 
\color blue
MyTime
\color inherit
 est bien formé si les valeurs 
\color blue
minute
\color inherit
 et 
\color blue
seconde
\color inherit
 sont comprises entre 0 et 60 (y compris 0, mais pas 60) et si l'attribut
 
\color blue
heure
\color inherit
 est positif.
 
\color blue
heure
\color inherit
 et 
\color blue
minute
\color inherit
 devraient être des valeurs entières, mais nous pourrions permettre à
\color blue
 seconde
\color inherit
 d'être exprimée avec une partie fractionnaire.
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
invariant
\end_layout

\end_inset


\end_layout

\begin_layout Standard
De telles exigences sont appelées des 
\emph on
invariants
\emph default
, car elles doivent toujours être vraies.
 En d'autres termes, si elles ne sont pas vraies, c'est que quelque chose
 dysfonctionne.
\end_layout

\begin_layout Standard
L'écriture d'un code pour vérifier les invariants peut aider à détecter
 les erreurs et à en trouver les causes.
 Par exemple, nous pourrions disposer d'une fonction comme 
\color blue
isvalidtime
\color inherit
 qui prend un objet 
\color blue
MyTime
\color inherit
 et retourne 
\color blue
false
\color inherit
 si ce dernier viole un invariant:
\begin_inset Index ind
status open

\begin_layout Plain Layout
isvalidtime
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 isvalidtime(time)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 time.heure < 0 || time.minute < 0 || time.seconde < 0 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 time.minute >= 60 || time.seconde >= 60
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au début de chaque fonction, il est pertinent de vérifier les arguments
 pour s'assurer qu'ils sont valides:
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument, validité
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color black
 addtime(t1, t2)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color black
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

isvalidtime(t1) || !isvalidtime(t2)
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

error(
\color brown
"objet MyTime non valide dans add_time"
\color black
) 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color black
 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconds = timetoint(t1) + timetoint(t2) 
\end_layout

\begin_layout Plain Layout

\size small
\color black
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inttotime(secondes) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une macro 
\color blue
@assert
\color inherit
 peut être utilisée à la place, afin de vérifier un invariant donné et d'émettre
 une exception en cas d'échec: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@assert()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 addtime(t1, t2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(isvalidtime(t1) && isvalidtime(t2), 
\color brown
"objet MyTime non valide dans 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

add_time"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

secondes = timetoint(t1) + timetoint(t2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inttotime(secondes)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les macros 
\color blue
@assert
\color inherit
 sont utiles, car elles permettent de distinguer le code qui traite des
 conditions normales de celui qui vérifie les erreurs.
\begin_inset Index ind
status open

\begin_layout Plain Layout
addtime
\end_layout

\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
prototype
\begin_inset space ~
\end_inset

et
\begin_inset space ~
\end_inset

correctifs plan de développement qui implique la rédaction d'une ébauche
 de programme, le test et la correction des erreurs au fur et à mesure que
 ces dernières sont détectées,
\begin_inset Index idx
status open

\begin_layout Plain Layout
prototype et correctif
\end_layout

\end_inset


\end_layout

\begin_layout Description
planification plan de développement qui implique une compréhension de haut
 niveau d'un problème et une planification plus poussée que le développement
 progressif ou le développement de prototypes/correctifs, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
planification
\end_layout

\end_inset


\end_layout

\begin_layout Description
fonction
\begin_inset space ~
\end_inset

pure fonction qui ne modifie aucun des objets qu'elle reçoit comme arguments.
 La plupart des fonctions pures possèdent une valeur de retour,
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction pure
\end_layout

\end_inset


\end_layout

\begin_layout Description
modificateur fonction qui modifie un ou plusieurs des objets qu'elle reçoit
 comme arguments.
 La plupart des modificateurs sont vides (ou nuls), c'est-à-dire qu'ils
 ne retournent rien, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
modificateur
\end_layout

\end_inset


\end_layout

\begin_layout Description
style
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

programmation
\begin_inset space ~
\end_inset

fonctionnelle style de conception de programme dans lequel la majorité des
 fonctions sont pures, 
\end_layout

\begin_layout Description
invariant paramètre ou attribut qui ne devrait jamais changer pendant l'exécutio
n d'un programme.
\begin_inset Index idx
status open

\begin_layout Plain Layout
invariant
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 16-6
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
multime
\color inherit
 qui prend un objet 
\color blue
MyTime
\color inherit
 ainsi qu'un nombre et qui retourne un nouvel objet 
\color blue
MyTime
\color inherit
 contenant le produit du 
\color blue
MyTime
\color inherit
 original et du nombre.
\begin_inset Index ind
status open

\begin_layout Plain Layout
multime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Utilisez ensuite 
\color blue
multime
\color inherit
 pour écrire une fonction qui prend un objet
\color blue
 MyTime
\color inherit
 représentant le temps d'arrivée dans une course ainsi qu'un nombre figurant
 la distance.
 Cette fonction doit retourner un objet 
\color blue
MyTime
\color inherit
 qui donne l'allure moyenne (durée par kilomètre parcouru).
 
\end_layout

\begin_layout Subsection*
Exercice 16-7
\end_layout

\begin_layout Standard
Julia fournit des objets 
\begin_inset Quotes cld
\end_inset

temps
\begin_inset Quotes crd
\end_inset

 similaires à 
\color blue
MyTime
\color inherit
, développé dans ce chapitre.
 Toutefois, ils offrent un riche ensemble de fonctions et d'opérateurs.
 Lisez la documentation à l'adresse 
\begin_inset CommandInset href
LatexCommand href
name "Dates"
target "https://docs.julialang.org/en/v1/stdlib/Dates/"
literal "false"

\end_inset

.
 À l'usage: 
\color blue
using Dates
\color inherit
.
\end_layout

\begin_layout Enumerate
Écrivez un programme qui recueille la date du jour et affiche le jour de
 la semaine.
\end_layout

\begin_layout Enumerate
Écrivez un programme qui accepte une date d'anniversaire en entrée et affiche
 l'âge de l'utilisateur ainsi que le nombre de jours, d'heures, de minutes
 et de secondes jusqu'à son prochain anniversaire.
\end_layout

\begin_layout Enumerate
Pour deux personnes nées à des jours différents, il existe un jour où l'une
 d'elles est deux fois plus âgée que l'autre.
 Écrivez un programme qui prend deux dates anniversaires et calcule 
\color blue
DoubleJour
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
DoubleJour
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Défi: écrivez une version plus générale qui calcule le jour où une personne
 est 
\emph on
n
\emph default
 fois plus âgée qu'une autre.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
addtocontents{toc}{
\backslash
protect
\backslash
newpage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Déploiement-multiple"

\end_inset

Dispatch multiple
\end_layout

\begin_layout Standard
Julia offre la possibilité d'écrire du code capable de fonctionner sur différent
s types, ce qui est connu comme de la 
\emph on
programmation générique
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
programmation générique
\end_layout

\end_inset

 Dans ce chapitre, nous abordons l'utilisation des déclarations de type
 en Julia et nous présentons des méthodes permettant d'implémenter différents
 comportements pour une fonction selon les types associés à ses arguments.
 Il s'agit là du dispatch multiple (
\emph on
multiple dispatch
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
dispatch multiple
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Déclarations de types
\end_layout

\begin_layout Standard
L'opérateur 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color inherit
associe des 
\emph on
annotations de type
\emph default
 aux expressions et aux variables: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
annotation de type
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
type, annotation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
(1 + 2) 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Float64
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 TypeError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 in typeassert, expected Float64, got Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 (1 + 2) 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela permet de confirmer qu'un programme fonctionne de manière adéquate.
\end_layout

\begin_layout Standard
Par ailleurs, l'opérateur 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
 peut être ajouté dans le membre de gauche d'une affectation ou dans le
 cadre d'une déclaration.
\begin_inset Index ind
status open

\begin_layout Plain Layout
returnfloat
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

, opérateur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
function
\color inherit
 returnfloat()
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Float64
\color inherit
 = 100
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
returnfloat (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = returnfloat()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
100.0
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(x)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Float64
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En l'occurrence, la variable 
\color blue
x
\color inherit
 est toujours de type
\color blue
 Float64
\color inherit
 et la valeur est convertie en virgule flottante si nécessaire.
\end_layout

\begin_layout Standard
Une annotation de type peut également être jointe à l'en-tête de la définition
 d'une fonction:
\begin_inset Index idx
status open

\begin_layout Plain Layout
définition de fonction
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
annotation de type
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 sinc(x)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Float64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x == 0 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sin(x)/(x)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La valeur de retour de 
\color blue
sinc
\color inherit
 est toujours convertie en type 
\color blue
Float64
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
sinc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par défaut, lorsque les types ne sont pas précisés, Julia considère les
 valeurs comme étant de type quelconque (
\color blue
Any
\color inherit
).
\end_layout

\begin_layout Section
Méthodes
\end_layout

\begin_layout Standard
Dans la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Diagramme-d'objet-associé-MyTime"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons défini une structure appelée
\color blue
 MyTime
\color inherit
 et dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Heures,-minutes-et-secondes"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons écrit une fonction appelée 
\color blue
printtime
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printtime
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
using
\color inherit
 Printf
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 MyTime
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printtime(time)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@printf
\color inherit
(
\color brown
"
\color violet
%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\color brown
"
\color inherit
, time.heure, time.minute, time.seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Comme on peut le constater, les déclarations de type peuvent (et, pour des
 raisons de performance, 
\emph on
devraient
\emph default
) être associées aux champs d'une définition de structure.
\end_layout

\begin_layout Standard
Pour appeler la fonction 
\color blue
printtime
\color inherit
, il est nécessaire de passer un objet 
\color blue
MyTime
\color inherit
 en argument:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start = MyTime(9, 55, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MyTime(9, 55, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printtime(start) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
09
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

55
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour ajouter à la fonction 
\color blue
printtime
\color inherit
 une 
\emph on
méthode
\emph default
 qui n'accepte comme seul argument qu'un objet 
\color blue
MyTime
\color inherit
, il suffit d'ajouter 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
 suivi de 
\color blue
MyTime
\color inherit
 à l'argument 
\color blue
time
\color inherit
 dans la définition de la fonction:
\begin_inset Index ind
status open

\begin_layout Plain Layout
printtime
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printtime(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@printf
\color inherit
(
\color brown
"
\color violet
%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\color brown
"
\color inherit
, time.heure, time.minute, time.seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une méthode est une définition de fonction avec une 
\emph on
signature
\emph default
 spécifique:
\begin_inset Index idx
status open

\begin_layout Plain Layout
signature spécifique
\end_layout

\end_inset

 
\color blue
printtime
\color inherit
 a un argument de type 
\color blue
MyTime
\color inherit
.
\end_layout

\begin_layout Standard
Appeler la fonction 
\color blue
printtime
\color inherit
 avec un objet 
\color blue
MyTime
\color inherit
 produit le même résultat:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printtime(start) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
09
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

55
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À présent, nous pouvons redéfinir la première méthode sans l'annotation
 de type 
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color inherit
, ce qui permet l'usage d'un argument de type quelconque:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 printtime(time)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(
\color brown
"Je ne sais pas comment afficher l'argument time."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si nous appelons la fonction 
\color blue
printtime
\color inherit
 avec un objet différent de 
\color blue
MyTime
\color inherit
, nous obtenons:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 printtime(150)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Je ne sais pas comment afficher l'argument time.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 17-1
\end_layout

\begin_layout Standard
Réécrivez 
\color blue
timetoint
\color inherit
 et 
\color blue
inttotime
\color inherit
 pour spécifier leur argument (voir la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Prototypage-ou-planification?"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
time
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
inttotime
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exemples supplémentaires
\end_layout

\begin_layout Standard
Voici une version de la fonction 
\color blue
increment
\color inherit
 (voir la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modificateurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

) réécrite pour spécifier ses arguments:
\begin_inset Index ind
status open

\begin_layout Plain Layout
increment
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 increment(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime, secondes
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

secondes += timetoint(time) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inttotime(secondes)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À présent, il s'agit d'une fonction pure et non plus d'un modificateur.
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction pure
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
modificateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici comment cette fonction 
\color blue
increment
\color inherit
 peut être invoquée : 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start = MyTime(9, 45, 0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MyTime(9, 45, 0) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 increment(start, 1337) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
MyTime(10, 7, 17)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Si les arguments apparaissent dans le mauvais ordre, Julia retourne une
 erreur: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 increment(1337, start) 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching increment(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En effet, la signature de la méthode est 
\color blue
increment(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime, seconds
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64)
\color inherit
 et non 
\color blue
increment(seconds
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime)
\color inherit
.
\end_layout

\begin_layout Standard
Réécrire 
\color blue
isafter 
\color inherit
pour agir uniquement sur les objets 
\color blue
MyTime 
\color inherit
est tout aussi aisé: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
isafter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 isafter(t1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime, t2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(t1.heure, t1.minute, t1.seconde) > (t2.heure, t2.minute, t2.seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au fait, les arguments optionnels sont implémentés comme syntaxe pour les
 définitions de méthodes multiples.
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument optionnel
\end_layout

\end_inset

 Par exemple, cette définition:
\begin_inset Index ind
status open

\begin_layout Plain Layout
f()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode multiple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 f(a=1, b=2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a + 2b
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
se traduit par les trois méthodes suivantes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
f(a, b) = a + 2b
\end_layout

\begin_layout Plain Layout

\size small
f(a) = f(a, 2)
\end_layout

\begin_layout Plain Layout

\size small
f() = f(1, 2)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En Julia, ces expressions sont des définitions valides de méthode.
 Il s'agit d'une notation abrégée pour la définition des fonctions/méthodes.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Constructeurs"

\end_inset

Constructeurs
\end_layout

\begin_layout Standard
Un 
\emph on
constructeur
\emph default
 est une fonction spéciale qui est appelée pour créer un objet.
 Les méthodes de constructeur par défaut de 
\color blue
MyTime
\color inherit
 ont les signatures suivantes: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur, méthode par défaut
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur, signature
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
MyTime(heure, minute, seconde) 
\end_layout

\begin_layout Plain Layout

\size small
MyTime(heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, seconde
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous pouvons également ajouter nos propres méthodes de construction externes:
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur, méthode externe
\end_layout

\end_inset

 
\begin_inset Index ind
status open

\begin_layout Plain Layout
MyTime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 MyTime(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

MyTime(time.heure, time.minute, time.seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette dernière méthode est appelée 
\emph on
constructeur de copie
\emph default
, car le nouvel objet 
\color blue
MyTime
\color inherit
 est une copie de son argument.
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur de copie
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour forcer l'usage des invariants,
\begin_inset Index idx
status open

\begin_layout Plain Layout
invariant
\end_layout

\end_inset

 il est nécessaire de recourir à la méthode des 
\emph on
constructeurs internes
\emph default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur interne
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 MyTime 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
 Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
function
\color inherit
 MyTime(heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0, minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0, seconde
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(0 ≤ minute < 60,
\color brown
 "Minute n'est pas entre 0 et 60."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(0 ≤ seconde < 60, 
\color brown
"Seconde n'est pas entre 0 et 60."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
new
\color inherit
(heure, minute, seconde) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La structure 
\color blue
MyTime
\color inherit
 dispose maintenant de quatre méthodes à constructeurs internes:
\begin_inset Index idx
status open

\begin_layout Plain Layout
new, première méthode
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
MyTime() 
\end_layout

\begin_layout Plain Layout

\size small
MyTime(heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
MyTime(heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
MyTime(hour
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, seconde
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une méthode à constructeur interne est toujours définie à l'intérieur du
 bloc d'une déclaration de type.
 Elle a accès à une fonction spéciale appelée 
\color blue
new
\color inherit
 qui crée des objets du type nouvellement déclaré.
\begin_inset Index idx
status open

\begin_layout Plain Layout
new
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%toute utilisation supplémentaire
\end_layout

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Le constructeur par défaut n'est pas disponible si un constructeur interne
 est défini.
 Il faut  écrire explicitement tous les constructeurs internes dont on a
  besoin.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une deuxième méthode avec la fonction locale 
\color blue
new
\color inherit
 sans arguments existe: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
new, méthode sans argument
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
mutable struct
\color inherit
 MyTime 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

heure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

minute 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

seconde 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
 Int
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
function
\color inherit
 MyTime(heure
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0, minute
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0, seconde
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
=0)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(0 ≤ minute < 60, 
\color brown
"Les minutes sont comprises entre 0 et 60."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(0 ≤ seconde < 60, 
\color brown
"Les secondes sont comprises entre 0 et 60."
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time = new() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.heure = heure 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.minute = minute
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time.seconde = seconde
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela permet de construire des structures de données récursives, c'est-à-dire
 une structure dont un des champs est la structure elle-même.
 Dans ce cas, la structure doit être non persistante, puisque ses champs
 sont modifiés après l'instanciation.
 
\end_layout

\begin_layout Section

\color blue
show
\end_layout

\begin_layout Standard

\color blue
show
\color inherit
 est une fonction spéciale qui retourne une représentation en chaîne d'un
 objet.
 Par exemple, voici une méthode 
\color blue
show
\color inherit
 pour les objets 
\color blue
MyTime
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
show
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
using
\color inherit
 Printf
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.show(io
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
IO
\color inherit
, time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@printf
\color inherit
(io,
\color brown
 "
\color violet
%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

%02d
\color brown
"
\color inherit
, time.heure, time.minute, time.seconde)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le préfixe 
\color blue
Base
\color inherit
 est nécessaire parce que nous voulons ajouter une nouvelle méthode à la
 fonction 
\color blue
Base.show
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.show
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lorsqu'un objet est affiché, Julia invoque la fonction 
\color blue
show
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 time = MyTime(9, 45)
\end_layout

\begin_layout Plain Layout

\color lightgray
09
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

45
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque nous écrivons un nouveau type composite, il est pertinent: 
\end_layout

\begin_layout Itemize
de commencer presque toujours par écrire un constructeur extérieur (ceci
 facilite l'instanciation des objets),
\end_layout

\begin_layout Itemize
d'utiliser 
\color blue
show
\color inherit
 (qui est utile pour le débogage).
 
\end_layout

\begin_layout Subsection*
Exercice 17-2
\end_layout

\begin_layout Standard
Écrivez une méthode de construction extérieure pour la classe 
\color blue
Point
\color inherit
 qui prend 
\color blue
x
\color inherit
 ainsi que
\color blue
 y
\color inherit
 comme paramètres optionnels et les affecte aux champs correspondants.
 
\end_layout

\begin_layout Section
Surcharge d'opérateurs
\end_layout

\begin_layout Standard
En définissant les méthodes des opérateurs,
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur, surcharge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
surcharge d'opérateur
\end_layout

\end_inset

 nous pouvons spécifier leur comportement sur des types définis par le programme
ur.
 Par exemple, si nous définissons une méthode nommée 
\color blue
+
\color inherit
 avec deux arguments 
\color blue
MyTime
\color inherit
, nous pouvons utiliser l'opérateur 
\color blue
+
\color inherit
 capable d'additionner des objets 
\color blue
MyTime
\color inherit
.
\end_layout

\begin_layout Standard
Voici à quoi pourrait ressembler la définition:
\begin_inset Index ind
status open

\begin_layout Plain Layout
+, surcharge
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
import
\color inherit
 Base.+
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 +(t1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime, t2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

secondes = timetoint(t1) + timetoint(t2) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

inttotime(secondes) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La déclaration d'importation
\begin_inset Index idx
status open

\begin_layout Plain Layout
déclaration d'importation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
importation, déclaration d'
\end_layout

\end_inset

 ajoute l'opérateur 
\color blue
+
\color inherit
 au champ d'application local afin que des méthodes puissent être ajoutées.
\end_layout

\begin_layout Standard
Voici comment nous pouvons l'utiliser: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start = MyTime(9, 55)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
09
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

55
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
duration = MyTime(2, 11, 0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
02
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

11
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start + duration
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
12
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

06
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque l'opérateur
\color blue
 +
\color inherit
 est appliqué aux objets 
\color blue
MyTime
\color inherit
, Julia invoque la méthode nouvellement ajoutée.
 Lorsque le REPL affiche le résultat, Julia invoque 
\color blue
show
\color inherit
.
 Il se passe donc beaucoup de choses en coulisses.
\end_layout

\begin_layout Standard
L'ajout au comportement d'un opérateur pour qu'il fonctionne avec des types
 définis par le programmeur s'appelle la 
\emph on
surcharge de l'opérateur
\emph default
.
\end_layout

\begin_layout Section
Dispatch multiple
\end_layout

\begin_layout Standard
Dans la section précédente, nous avons additionné deux objets 
\color blue
MyTime
\color inherit
.
 Cependant, il est également possible d'ajouter un entier à un objet 
\color blue
MyTime
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
+, dispatch multiple
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dispatch multiple
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 +(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime, secondes
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

increment(time, secondes) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici un exemple qui utilise l'opérateur 
\color blue
+
\color inherit
 avec un objet 
\color blue
MyTime
\color inherit
 et un entier:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start = MyTime(9, 55)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
09
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

55:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 start + 1337 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
10
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

07
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

17
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'addition étant un opérateur commutatif, il faut donc ajouter une méthode
 complémentaire.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 +(secondes
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

time + secondes 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous obtenons alors le même résultat:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 1337 + start
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
10
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

07
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

17
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le choix de la méthode à exécuter lorsqu'une fonction est appliquée s'appelle
 un 
\emph on
dispatch
\emph default
.
 Julia permet au processus de
\emph on
 dispatching
\emph default
 de choisir la méthode d'une fonction à appeler selon le nombre d'arguments
 passés et les types de chacun des arguments de la fonction.
 L'utilisation de tous les arguments d'une fonction pour laisser le choix
 de la méthode à invoquer est connue sous le nom de 
\emph on
dispatch multiple
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Parfois appelé également 
\emph on
multiméthode.
\end_layout

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiméthode
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 17-3
\end_layout

\begin_layout Standard
Écrivez des méthodes 
\color blue
+
\color inherit
 pour les objets 
\color blue
Point
\color inherit
 (voir le 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Structures-et-objets"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout Enumerate
Si les deux opérandes sont des objets point, la méthode doit retourner un
 nouvel objet 
\color blue
Point
\color inherit
 dont la coordonnée 
\color blue
x
\color inherit
 est la somme des coordonnées 
\color blue
x
\color inherit
 des opérandes, de même pour les coordonnées 
\color blue
y
\color inherit
.
\end_layout

\begin_layout Enumerate
Si le premier ou le second opérande est un tuple, la méthode doit ajouter
 le premier élément du tuple à la coordonnée 
\color blue
x 
\color inherit
et le second élément à la coordonnée 
\color blue
y
\color inherit
, et retourner un nouvel objet point avec le résultat.
\end_layout

\begin_layout Section
Programmation générique (généricité)
\end_layout

\begin_layout Standard
Lorsqu'il est nécessaire, le dispatch multiple est d'une grande utilité.
\begin_inset Index idx
status open

\begin_layout Plain Layout
programmation générique
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
généricité
\end_layout

\end_inset

 Ce n'est malheureusement pas toujours le cas.
 Souvent, il est possible de l'éviter en écrivant des fonctions qui se comporten
t correctement pour des arguments de types différents.
\end_layout

\begin_layout Standard
De nombreuses fonctions que nous avons écrites pour des chaînes de caractères
 fonctionnent également pour d'autres types de séquences.
 Par exemple, dans la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Les-dictionnaires-collections-compteurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons utilisé la fonction 
\color blue
histogram
\color inherit
 pour compter le nombre d'occurrences de chaque lettre apparaissant dans
 un mot.
\begin_inset Index ind
status open

\begin_layout Plain Layout
histogram
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 histogram(s) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = Dict() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 c 
\color green
in
\color inherit
 s 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 c ∉ keys(d) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] = 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
else
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[c] += 1 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cette fonction agit également sur les tableaux, les tuples et même les dictionna
ires à condition que les éléments de 
\color blue
s
\color inherit
 soient hachables, afin qu'ils puissent être utilisés comme clés dans le
 dictionnaire 
\color blue
d
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t = (
\color brown
"poêle"
\color inherit
, 
\color brown
"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uf"
\color inherit
, 
\color brown
"poêle"
\color inherit
, 
\color brown
"poêle"
\color inherit
, 
\color brown
"jambon"
\color inherit
, 
\color brown
"poêle"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
("poêle", "
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uf", "poêle", "poêle", "poêle", "poêle") 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 histogram(t)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Dict{Any,Any} with 3 entries: 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="6mm">
<column alignment="left" valignment="top" width="3mm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
"jambon"
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
"poêle"
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color lightgray
"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uf"
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
=>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les fonctions capables de manipuler plusieurs types sont dites polymorphiques.
 Le 
\emph on
polymorphisme
\emph default
 contribue à la réutilisation du code.
\begin_inset Index idx
status open

\begin_layout Plain Layout
polymorphisme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction polymorphique
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple, la fonction interne 
\color blue
sum
\color inherit
, qui ajoute les éléments d'une séquence, remplit son rôle tant que les
 éléments de la séquence supportent l'addition.
\end_layout

\begin_layout Standard
Comme une méthode 
\color blue
+
\color inherit
 est fournie pour les objets 
\color blue
MyTime
\color inherit
, ceux-ci fonctionnent avec 
\color blue
sum
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t1 = MyTime(1, 7, 2)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
01
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

07
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

02
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t2 = MyTime(1, 5, 8)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
01
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

05
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

08
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 t3 = MyTime(1, 5, 0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
01
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

05
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

00
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sum((t1, t2, t3))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
03
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

17
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En général, si toutes les opérations à l'intérieur d'une fonction remplissent
 leur rôle avec un type donné, la fonction fera de même avec ce type.
\end_layout

\begin_layout Standard
Le meilleur type de polymorphisme
\begin_inset Index idx
status open

\begin_layout Plain Layout
polymorphisme
\end_layout

\end_inset

 est le type involontaire, où vous découvrez qu'une fonction que vous avez
 déjà écrite peut être appliquée à un type jusque-là imprévu.
\end_layout

\begin_layout Section
Interface et implémentation
\end_layout

\begin_layout Standard
Un des objectifs du dispatch multiple
\begin_inset Index idx
status open

\begin_layout Plain Layout
dispatch multiple
\end_layout

\end_inset

 est de rendre les logiciels plus faciles à gérer et à entretenir.
 Cela signifie qu'il est possible d'une part de continuer à faire fonctionner
 le programme lorsque d'autres parties du système changent et, de l'autre,
 de modifier le programme pour répondre à de nouvelles exigences.
\end_layout

\begin_layout Standard
Un principe de conception qui contribue à atteindre cet objectif consiste
 à garder les interfaces séparées des implémentations.
\begin_inset Index idx
status open

\begin_layout Plain Layout
interface 
\begin_inset Formula $\leftrightarrow$
\end_inset

 implémentation
\end_layout

\end_inset

 Autrement dit, les méthodes ayant un argument annoté avec un type ne doivent
 pas dépendre de la façon dont les champs de ce type sont représentés.
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument annoté
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple, dans ce chapitre, nous avons développé une structure qui représente
 un moment de la journée.
 Les méthodes ayant un argument annoté avec ce type comprennent 
\color blue
timetoint
\color inherit
, 
\color blue
isafter
\color inherit
 et 
\color blue
+
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
timetoint
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
isafter
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
+
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nous pourrions implémenter ces méthodes
\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode
\end_layout

\end_inset

 de plusieurs manières.
 Les détails de l'implémentation dépendent de la façon dont nous représentons
 
\color blue
MyTime
\color inherit
.
 Dans ce chapitre, les champs d'un objet 
\color blue
MyTime
\color inherit
 étaient l'heure, la minute et la seconde.
\end_layout

\begin_layout Standard
Comme autre option, nous aurions pu remplacer ces champs par un seul entier
 représentant le nombre de secondes depuis minuit.
 Cette implémentation rendrait certaines fonctions, comme 
\color blue
isafter
\color inherit
, plus faciles à écrire.
 En revanche, d'autres seraient plus difficiles à développer.
\end_layout

\begin_layout Standard
Après avoir déployé un nouveau type, vous pourriez découvrir une meilleure
 implémentation.
 Si d'autres parties du programme utilisent votre type, cela peut être chronopha
ge et provoquer des erreurs par changement de l'interface.
\end_layout

\begin_layout Standard
Cependant, si vous avez conçu l'interface
\begin_inset Index idx
status open

\begin_layout Plain Layout
interface
\end_layout

\end_inset

 avec soin, vous pouvez modifier l'implémentation sans changer l'interface.
 La conséquence immédiate est que les autres parties du programme ne doivent
 pas être modifiées.
\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Appeler une fonction avec les bons arguments peut être ardu lorsque plus
 d'une méthode est spécifiée pour la fonction.
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset

 Julia permet d'effectuer une introspection
\begin_inset Index idx
status open

\begin_layout Plain Layout
introspection des signatures
\end_layout

\end_inset

 des signatures associées aux méthodes d'une fonction.
\begin_inset Index idx
status open

\begin_layout Plain Layout
methods()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour savoir quelles méthodes sont disponibles pour une fonction donnée,
 la fonction 
\color blue
methods
\color inherit
 vient à point: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
printtime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 methods(printtime) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
# 2 methods for generic function "printtime"
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[1] printtime(time
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

MyTime) in Main at REPL[3]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
[2] printtime(time) in Main at REPL[4]:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
annotation
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

type l'opérateur 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 suivi d'un type indiquant qu'une expression ou une variable est de ce type,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
annotation de type
\end_layout

\end_inset


\end_layout

\begin_layout Description
méthode définition d'un comportement possible d'une fonction, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode
\end_layout

\end_inset


\end_layout

\begin_layout Description
dispatch choix de la méthode à mettre en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvre lorsqu'une fonction est exécutée, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dispatch
\end_layout

\end_inset


\end_layout

\begin_layout Description
signature c'est le nombre et le type des arguments d'une méthode permettant
 au dispatch de sélectionner la méthode la plus spécifique d'une fonction
 lors de l'appel de fonction, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
signature
\end_layout

\end_inset


\end_layout

\begin_layout Description
constructeur
\begin_inset space ~
\end_inset

externe constructeur défini en dehors de la définition de type pour spécifier
 les méthodes utiles à la création d'un objet, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur externe
\end_layout

\end_inset


\end_layout

\begin_layout Description
constructeur
\begin_inset space ~
\end_inset

interne constructeur défini à l'intérieur de la définition de type pour
 imposer des invariants ou pour construire des objets récursifs, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur interne
\end_layout

\end_inset


\end_layout

\begin_layout Description
constructeur
\begin_inset space ~
\end_inset

par
\begin_inset space ~
\end_inset

défaut constructeur interne disponible lorsqu'aucun constructeur interne
 défini par le programmeur n'est fourni, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur par défaut
\end_layout

\end_inset


\end_layout

\begin_layout Description
constructeur
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

copie méthode de construction extérieure d'un type avec comme seul argument
 un objet du type.
 Cette méthode crée un nouvel objet, une copie de l'argument, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur, copie
\end_layout

\end_inset


\end_layout

\begin_layout Description
surcharge
\begin_inset space ~
\end_inset

d'opérateur extension du comportement d'un opérateur (comme +) pour que
 celui fonctionne avec un type défini par le programmeur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
surcharge d'opérateur
\end_layout

\end_inset


\end_layout

\begin_layout Description
dispatch
\begin_inset space ~
\end_inset

multiple
\begin_inset space ~
\end_inset

(multiméthode) dispatch basé sur l'ensemble des arguments d'une fonction,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiméthode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dispatch multiple
\end_layout

\end_inset


\end_layout

\begin_layout Description
programmation
\begin_inset space ~
\end_inset

générique
\begin_inset space ~
\end_inset

(généricité) rédaction d'un code susceptible d'opérer avec plusieurs types.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
programmation générique
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
généricité
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 17-4
\end_layout

\begin_layout Standard
Modifiez les champs de 
\color blue
MyTime
\color inherit
 pour qu'il s'agisse d'un seul nombre entier représentant les secondes depuis
 minuit.
 Ensuite, modifiez les méthodes définies dans ce chapitre pour qu'elles
 fonctionnent avec la nouvelle implémentation.
\end_layout

\begin_layout Subsection*
Exercice 17-5
\end_layout

\begin_layout Standard
Rédigez une définition pour un type nommé 
\color blue
Kangaroo 
\color inherit
avec un champ nommé 
\color blue
putinpocket
\color inherit
 du type
\color blue
 Array
\color inherit
 et les méthodes suivantes:
\end_layout

\begin_layout Enumerate
Un constructeur qui initialise 
\color blue
pouchcontents
\color inherit
 dans un tableau vide.
\begin_inset Index ind
status open

\begin_layout Plain Layout
pouchcontents
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Une méthode nommée 
\color blue
putinpouch
\color inherit
 qui prend un objet 
\color blue
Kangaroo
\color inherit
 et un objet de n'importe quel type et l'ajoute à 
\color blue
pouchcontents
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
putinpouch
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Une méthode 
\color blue
show
\color inherit
 qui retourne une représentation en chaîne de caractères de l'objet 
\color blue
Kangaroo
\color inherit
 et du contenu de la poche.
\end_layout

\begin_layout Standard
Testez votre code en créant deux objets 
\color blue
Kangaroo
\color inherit
, en les affectant à des variables nommées 
\color blue
kanga
\color inherit
 et 
\color blue
roo
\color inherit
, puis en ajoutant 
\color blue
roo
\color inherit
 au contenu de la poche de 
\color blue
kanga
\color inherit
.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Sous-typage"

\end_inset

Sous-typage
\end_layout

\begin_layout Standard
Dans le chapitre précédent, nous avons présenté le dispatch multiple et
 les méthodes polymorphes.
 En ne précisant pas le type d'arguments, on obtient une méthode qui peut
 être appelée avec des arguments de tout type.
 La spécification d'un sous-ensemble de types autorisés dans la signature
 d'une méthode est l'étape suivante logique.
\end_layout

\begin_layout Standard
Dans ce chapitre, nous explicitons la notion de sous-typage
\begin_inset Index idx
status open

\begin_layout Plain Layout
sous-typage
\end_layout

\end_inset

 en utilisant des types qui représentent des cartes à jouer, des jeux de
 cartes et des 
\begin_inset Quotes cld
\end_inset

mains
\begin_inset Quotes crd
\end_inset

 au poker.
\end_layout

\begin_layout Standard
Si vous ne jouez pas au poker, vous pouvez vous informer sur le lien 
\begin_inset CommandInset href
LatexCommand href
name "Wikipédia: Poker"
target "https://fr.wikipedia.org/wiki/Poker"
literal "false"

\end_inset

.
 Cependant, ce n'est pas obligatoire; tout au long des exercices, nous irons
 à l'essentiel.
\end_layout

\begin_layout Section
Cartes
\end_layout

\begin_layout Standard
Dans un paquet, il y a cinquante-deux cartes, chacune appartenant à une
 des quatre couleurs et à un des treize rangs (ou hauteurs, voir l'exercice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-18-13-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Au poker, les couleurs sont pique (♠), cœur (♥), carreau (♦) et trèfle
 (♣).
 Les rangs sont: as (A), 2, 3, 4, 5, 6, 7, 8, 9, 10, valet (J
\begin_inset Foot
status open

\begin_layout Plain Layout
J: Jack, Q: Queen, K: King
\end_layout

\end_inset

), dame (Q) et roi (K).
 Selon le jeu auquel on participe, un as peut être supérieur au roi ou inférieur
 à 2.
\end_layout

\begin_layout Standard
Si nous souhaitons définir un nouvel objet pour représenter une carte à
 jouer, il est évident que les attributs doivent être le rang et la couleur.
 En revanche, le type de ces attributs n'est pas aussi intuitif à déterminer.
 Une option consiste à utiliser des chaînes de caractères contenant des
 mots comme 
\begin_inset Quotes cld
\end_inset

pique
\begin_inset Quotes crd
\end_inset

 pour les couleurs et 
\begin_inset Quotes cld
\end_inset

dame
\begin_inset Quotes crd
\end_inset

 pour les rangs.
 Un problème relatif à cette mise en œuvre provient de la difficulté de
 comparer les cartes en termes de préséance de rang ou de couleur.
\end_layout

\begin_layout Standard
Une autre option consiste à utiliser des nombres entiers pour coder les
 rangs et les couleurs.
 Dans ce contexte, 
\begin_inset Quotes cld
\end_inset

coder
\begin_inset Quotes crd
\end_inset

 signifie que nous allons définir une correspondance entre des nombres et
 les couleurs ainsi qu'entre des nombres et les rangs.
 Ce type de codage
\begin_inset Index idx
status open

\begin_layout Plain Layout
codage
\end_layout

\end_inset

 n'est pas secret, autrement, il s'agirait d'un chiffrement.
 
\end_layout

\begin_layout Standard
Par exemple, ce tableau illustre la correspondance 
\begin_inset Quotes cld
\end_inset

couleurs 
\begin_inset Formula $\mapsto$
\end_inset

 nombres entiers
\begin_inset Quotes crd
\end_inset

:
\end_layout

\begin_layout Itemize
♠ 
\begin_inset Formula $\mapsto$
\end_inset

 4
\end_layout

\begin_layout Itemize
♥ 
\begin_inset Formula $\mapsto$
\end_inset

 3
\end_layout

\begin_layout Itemize
♦ 
\begin_inset Formula $\mapsto$
\end_inset

 2
\end_layout

\begin_layout Itemize
♣ 
\begin_inset Formula $\mapsto$
\end_inset

 1
\end_layout

\begin_layout Standard
Cette correspondance permet de comparer facilement les cartes.
 La hiérarchie des couleurs correspond à la hiérarchie des nombres.
 Nous procédons de la même manière pour les rangs avec 13 nombres (13 
\begin_inset Formula $\mapsto$
\end_inset

 roi, 12 
\begin_inset Formula $\mapsto$
\end_inset

dame, etc.).
\end_layout

\begin_layout Standard
Le symbole 
\begin_inset Formula $\mapsto$
\end_inset

 est employé pour indiquer clairement que ces correspondances ne font pas
 partie du programme Julia.
 Elles relèvent de la conception du programme, sans toutefois apparaître
 explicitement dans le code.
\end_layout

\begin_layout Standard
La définition de la 
\color blue
struct
\color inherit
 pour 
\color blue
Carte 
\color inherit
se présente de cette manière:
\begin_inset Index ind
status open

\begin_layout Plain Layout
Carte
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Carte 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

couleur 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int64
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rang 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Int64 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
function
\color inherit
 Carte(couleur
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
, rang
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Int64
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(1 ≤ couleur ≤ 4, 
\color brown
"la couleur n'est pas entre 1 et 4"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
(1 ≤ rang ≤ 13, 
\color brown
"le rang n'est pas entre 1 et 13"
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

new(couleur, rang)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour créer une carte, nous appelons 
\color blue
Carte
\color inherit
 avec la couleur et le rang souhaités:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 dame_de_carreau = Carte(
\color lightgray
2
\color inherit
, 
\color lightgray
12
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Carte(2, 12)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Variables globales
\end_layout

\begin_layout Standard
Afin d'afficher les objets 
\color blue
Carte
\color inherit
 de sorte que tout le monde puisse les lire facilement, il faut établir
 une correspondance entre les couleurs et leurs entiers ainsi qu'une corresponda
nce entre les rangs et leurs entiers.
 Une manière naturelle de procéder consiste à utiliser deux tableaux de
 chaînes de caractères
\begin_inset Foot
status open

\begin_layout Plain Layout
Pour ♣ :
\color blue
 
\backslash
:clubs: TAB
\color inherit
; pour ♦: 
\color blue

\backslash
:diamonds: TAB
\color inherit
; pour ♥: 
\color blue

\backslash
:hearts: TAB
\color inherit
; pour ♠: 
\color blue

\backslash
:spades: TAB
\color inherit
 
\end_layout

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable globale
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
const
\color inherit
 noms_couleurs = [
\color brown
"♣"
\color inherit
, 
\color brown
"♦"
\color inherit
, 
\color brown
"♥"
\color inherit
,
\color brown
 "♠"
\color inherit
] 
\end_layout

\begin_layout Plain Layout

\size small
\color green
const 
\color inherit
noms_rangs = [
\color brown
"A"
\color inherit
, 
\color brown
"2"
\color inherit
, 
\color brown
"3"
\color inherit
, 
\color brown
"4"
\color inherit
, 
\color brown
"5"
\color inherit
, 
\color brown
"6"
\color inherit
, 
\color brown
"7"
\color inherit
, 
\color brown
"8"
\color inherit
, 
\color brown
"9"
\color inherit
, 
\color brown
"10"
\color inherit
, 
\color brown
"V"
\color inherit
, 
\color brown
"D"
\color inherit
, 
\color brown
"R"
\color inherit
]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les variables 
\color blue
noms_couleurs
\color inherit
 et 
\color blue
noms_rangs
\color inherit
 sont globales.
 La déclaration 
\color blue
const
\color inherit
 signifie que la variable ne peut être attribuée qu'une seule fois.
 Cela résout le problème de la performance des variables globales.
\begin_inset Index idx
status open

\begin_layout Plain Layout
const
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dès lors, nous pouvons mettre en œuvre une méthode 
\color blue
show 
\color inherit
idoine:
\begin_inset Index idx
status open

\begin_layout Plain Layout
show
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.show
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
io
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.show(io
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
IO
\color inherit
, carte
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Carte)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(io, noms_rangs[carte.rang], noms_couleurs[carte.couleur])
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression 
\color blue
noms_rangs[carte.rang]
\color inherit
 signifie 
\begin_inset Quotes cld
\end_inset

utiliser le champ 
\color blue
rang
\color inherit
 de l'objet 
\color blue
carte
\color inherit
 comme indice dans le tableau 
\color blue
noms_rangs
\color inherit
 et sélectionner la chaîne appropriée
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Avec les méthodes dont nous disposons à ce stade, nous pouvons créer et
 afficher des cartes:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Carte(
\color lightgray
3
\color inherit
, 
\color lightgray
11
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
V♥
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Comparaison-de-cartes"

\end_inset

Comparaison de cartes
\end_layout

\begin_layout Standard
Pour les types internes, il existe des opérateurs relationnels (
\color blue
<
\color inherit
, 
\color blue
>
\color inherit
, 
\color blue
==
\color inherit
, etc.) qui comparent les valeurs et déterminent quand l'une est supérieure,
 inférieure ou égale à l'autre.
 Pour les types définis par le programmeur, nous pouvons remplacer le comporteme
nt des opérateurs intégrés en fournissant une méthode nommée : 
\color blue
<
\color inherit
.
\end_layout

\begin_layout Standard
La préséance correcte des cartes n'est pas évidente.
 Par exemple, du 3 de trèfle ou du 2 de carreau qui l'emporte? L'un a un
 rang plus élevé, mais l'autre a une couleur plus élevée.
 Pour comparer les cartes, il faut décider si c'est le rang ou la couleur
 qui l'emporte.
\end_layout

\begin_layout Standard
La réponse peut dépendre du jeu.
 Pour simplifier, nous supposons que la couleur a priorité sur le rang.
 De la sorte, toutes les piques l'emportent sur toutes les carreaux, etc.
 Ainsi, dans l'exemple cité au début de cette section, 3♣ < 2♦.
\end_layout

\begin_layout Standard
Ceci fixé, nous pouvons écrire 
\color blue
<
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
<, surcharge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.<
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
import Base.<
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
import
\color inherit
 Base.<
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
<(c1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Carte, c2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Carte)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(c1.couleur, c1.rang) < (c2.couleur, c2.rang)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 18-1
\end_layout

\begin_layout Standard
Écrivez une méthode 
\color blue
<
\color inherit
 pour les objets 
\color blue
MyTime
\color inherit
.
 Vous pouvez utiliser la comparaison de tuples, mais vous pourriez aussi
 considérer la comparaison d'entiers.
\end_layout

\begin_layout Section
Tests unitaires
\end_layout

\begin_layout Standard
Les 
\emph on
tests unitaires
\emph default
 (T.U.)
\begin_inset Index idx
status open

\begin_layout Plain Layout
test unitaire
\end_layout

\end_inset

 permettent de vérifier l'exactitude d'un code en comparant les résultats
 effectifs de ce dernier à ce qu'on en attend.
 Cela peut être utile pour s'assurer que le code est toujours correct après
 modifications.
 Cette technique est aussi une manière de prédéfinir le comportement correct
 du code pendant la phase de développement.
\end_layout

\begin_layout Standard
Des tests unitaires simples peuvent être effectués avec les macros 
\color blue
@test
\color inherit
:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@test}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
using Test
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
using
\color inherit
 Test
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@test
\color inherit
 Carte(1, 4) < Carte(2, 4)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Test Passed
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@test 
\color inherit
Carte(1, 3) < Carte(1, 4)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Test Passed
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
@test
\color inherit
 retourne 
\begin_inset Quotes cld
\end_inset


\color blue
Test Passed
\color inherit

\begin_inset Quotes crd
\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Test Passed
\end_layout

\end_inset

 si l'expression est 
\color blue
true
\color inherit
, 
\begin_inset Quotes cld
\end_inset


\color blue
Test Failed
\color inherit

\begin_inset Quotes crd
\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Test Failed
\end_layout

\end_inset

 si elle est 
\color blue
false
\color inherit
 et 
\begin_inset Quotes cld
\end_inset


\color blue
Error Result
\color inherit

\begin_inset Quotes crd
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{Error Result, 
\begin_inset Quotes cld
\end_inset

@test}
\end_layout

\end_inset

 si elle ne peut pas être évaluée.
\begin_inset Index ind
status open

\begin_layout Plain Layout
Carte
\end_layout

\end_inset


\end_layout

\begin_layout Section
Paquets de cartes
\end_layout

\begin_layout Standard
Maintenant que nous avons les cartes, l'étape suivante consiste à créer
 des paquets de cartes.
 Il est naturel que chaque paquet contienne un tableau de cartes comme attribut.
\end_layout

\begin_layout Standard
Voici une structure composite de 
\color blue
Paquet
\color inherit
.
 Le constructeur crée les cartes des champs et produit un jeu de 52 cartes:
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
Paquet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Paquet 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cartes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Array
\color inherit
{Carte, 1} 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Paquet() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet = Paquet(Carte[]) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 couleur 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 rang
\color green
 in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

13 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet.cartes, Carte(couleur, rang)) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La manière la plus simple de constituer un paquet consiste à utiliser deux
 boucles.
 La boucle extérieure permet de créer les couleurs (de 1 à 4) et la boucle
 intérieure permet de produire les rangs (de 1 à 13).
 Chaque itération crée une nouvelle carte qui entre dans 
\color blue
paquet.cartes
\color inherit
.
 Ainsi, la première carte produite est l'as de trèfle, puis le 2 de trèfle,
 etc., jusqu'à la dernière carte, le roi de pique.
\end_layout

\begin_layout Standard
Voici la méthode 
\color blue
show
\color inherit
 pour 
\color blue
Paquet
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.show(io
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

IO
\color inherit
, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.show(io
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
IO
\color inherit
, paquet
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Paquet) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 carte
\color green
 in
\color inherit
 paquet.cartes
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(io, carte, 
\color brown
" "
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println()
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Voici le résultat:
\begin_inset Index ind
status open

\begin_layout Plain Layout
Paquet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Paquet()
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ 10♣ V♣ D♣ R♣ A♦ 2♦ 3♦ 4♦ 5♦ 6♦ 7♦ 8♦ 9♦ 10♦ V♦
 D♦ R♦ A♥ 2♥ 3♥ 4♥ 5♥ 6♥ 7♥ 8♥ 9♥ 10♥ V♥ D♥ R♥ A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠
 10♠ V♠ D♠ R♠
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Ajouter, supprimer, mélanger et trier
\end_layout

\begin_layout Standard
Pour distribuer des cartes, il faudrait pouvoir utiliser une fonction qui
 retire une carte du jeu et l'affiche.
 La fonction 
\color blue
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 est utile à cet égard: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Paquet) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet.cartes)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Vu son mode d'action (retrait du dernier élément d'une structure de données),
 
\color blue
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 agit sur le bas de la pile.
\end_layout

\begin_layout Standard
Ajouter une carte peut se faire en utilisant la fonction 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Paquet, carte
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Carte) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet.cartes, carte)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une telle méthode qui exploite une autre méthode en n'effectuant que peu
 de traitement supplémentaire s'appelle du 
\emph on
placage
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
placage
\end_layout

\end_inset

 La métaphore vient de la marqueterie, où un placage est une fine couche
 de bois noble collée à la surface d'une pièce de bois de moindre qualité
 afin d'en améliorer l'apparence.
\end_layout

\begin_layout Standard
Dans ce cas, 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 est une méthode 
\begin_inset Quotes cld
\end_inset

légère
\begin_inset Quotes crd
\end_inset

 qui adapte une opération sur les tableaux au cas des paquets de cartes.
 Elle améliore l'interface de l'implémentation.
\end_layout

\begin_layout Standard
Comme autre exemple, pour battre les cartes, nous pouvons écrire une méthode
 appelée 
\color blue
shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 en utilisant la fonction 
\color blue
Random.shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Random.shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
using Random
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
using
\color inherit
 Random
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\size small
\color green
function
\color inherit
 Random.shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Paquet)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet.cartes)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 18-2
\end_layout

\begin_layout Standard
Écrivez une fonction appelée 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit

\begin_inset Index ind
status open

\begin_layout Plain Layout
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset

 qui utilise la fonction 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 pour trier les cartes dans un 
\color blue
Paquet
\color inherit
.
 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout

string!
\end_layout

\end_inset


\color inherit
 utilise la méthode 
\color blue
<
\color inherit
 que nous avons définie pour déterminer l'ordre de préséance des cartes
 (voir la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Comparaison-de-cartes"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
<, méthode
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Types-abstraits-et-sous-typage"

\end_inset

Types abstraits et sous-typage
\end_layout

\begin_layout Standard
Pour jouer aux cartes, il faut créer une 
\begin_inset Quotes cld
\end_inset

main
\begin_inset Quotes crd
\end_inset

, c'est-à-dire un ensemble de cartes détenues par un joueur.
 Pour cela, il est nécessaire d'y associer un type
\begin_inset Index idx
status open

\begin_layout Plain Layout
type abstrait
\end_layout

\end_inset

.
 Or, une main est similaire à un jeu de cartes: les deux sont composés d'une
 collection de cartes et les deux recourent à des opérations comme l'ajout
 et le retrait de cartes.
\end_layout

\begin_layout Standard
Toutefois, il existe des différences.
 Certaines opérations spécifiques aux mains n'ont pas de sens pour un jeu
 de cartes complet.
 Par exemple, au poker, on peut comparer deux mains pour déterminer laquelle
 est gagnante.
 Au bridge, on peut calculer le score d'une main pour faire une offre.
\end_layout

\begin_layout Standard
Nous devons donc trouver un moyen de regrouper les 
\emph on
types spécifiques
\emph default
 lorsqu'ils sont apparentés.
\begin_inset Index idx
status open

\begin_layout Plain Layout
type spécifique
\end_layout

\end_inset

 En Julia, et pour notre problème, la technique consiste à définir un 
\emph on
type abstrait
\emph default
 qui sert de parent à la fois pour le paquet de cartes complet (
\color blue
Paquet
\color inherit
) et pour une main (
\color blue
UneMain
\color inherit

\begin_inset Foot
status open

\begin_layout Plain Layout
En français, nous devons éviter l'usage d'une fonction personnelle 
\color blue
Main
\color inherit
 du fait de l'existence de la fonction générale 
\color blue
Main
\color inherit
.
\end_layout

\end_inset

).
 Cette manière de procéder s'appelle le 
\emph on
sous-typage
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
sous-typage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nommons le type abstrait 
\color blue
EnsembleDeCartes
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
abstract type
\color inherit
 EnsembleDeCartes 
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Un nouveau type abstrait est créé avec le mot-clé 
\color green
abstract type
\color inherit
.
 Dans la déclaration que nous venons de faire, un type 
\begin_inset Quotes cld
\end_inset

parent
\begin_inset Quotes crd
\end_inset

 peut être facultativement spécifié en précisant (après le nom) le symbole
 
\color blue
<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color inherit
suivi lui-même du nom d'un type abstrait existant.
\begin_inset Index idx
status open

\begin_layout Plain Layout
type parent
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
supertype
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lorsqu'aucun 
\emph on
supertype
\emph default
 n'est indiqué, Julia utilise le supertype par défaut
\color blue
 Any
\color inherit
, un type abstrait prédéfini
\begin_inset Index idx
status open

\begin_layout Plain Layout
type abstrait prédéfini
\end_layout

\end_inset

.
 Tous les objets en sont des instances.
 Tous les types en sont des sous-types.
\end_layout

\begin_layout Standard
À présent, exprimons que 
\color blue
Paquet
\color inherit
 est un sous-type descendant du type abstrait 
\color blue
EnsembleDeCartes
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
Paquet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Paquet <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 EnsembleDeCartes 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cartes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Array
\color inherit
{Carte, 1} 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Paquet() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet = Paquet(Carte[]) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 couleur 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

4 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green

\begin_inset space ~
\end_inset

for
\color inherit
 rang 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

13 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet.cartes, Carte(couleur, rang))
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

paquet 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
isa
\color inherit
 vérifie si un objet est d'un type donné: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
isa, opérateur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 paquet = Paquet();
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 paquet 
\color green
isa
\color inherit
 EnsembleDeCartes
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Une main est aussi un sous-type
\begin_inset Index idx
status open

\begin_layout Plain Layout
sous-type
\end_layout

\end_inset

 du type parent 
\color blue
EnsembleDeCartes
\color inherit
:
\begin_inset Index ind
status open

\begin_layout Plain Layout
UneMain
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
struct UneMain <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 EnsembleDeCartes 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cartes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Array
\color inherit
{Carte, 1} 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

label 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 String 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 UneMain(label
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

String=
\color brown
""
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

UneMain(Carte[], label) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Au lieu de peupler une main avec 52 nouvelles cartes, le constructeur associé
 à 
\color blue
UneMain
\color inherit
 initialise 
\color blue
cartes
\color inherit
 sous la forme d'un tableau vide.
 Un argument optionnel peut être passé au constructeur, ce qui permet de
 donner une étiquette à 
\color blue
UneMain
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 main = UneMain(
\color brown
"nouvelle main"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
UneMain(Carte[], "nouvelle main")
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Types abstraits et fonctions
\end_layout

\begin_layout Standard
Ceci fait (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Types-abstraits-et-sous-typage"
plural "false"
caps "false"
noprefix "false"

\end_inset

), nous pouvons écrire les opérations communes à 
\color blue
Paquet
\color inherit
 et 
\color blue
UneMain
\color inherit
 comme des fonctions ayant pour argument 
\color blue
EnsembleDeCartes
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type abstrait et fonction
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
function 
\color inherit
Base.show(io
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
IO
\color inherit
, edc
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

EnsembleDeCartes) 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for 
\color inherit
carte 
\color green
in
\color inherit
 edc.cartes
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(io, carte, 
\color brown
" "
\color inherit
)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
function
\color inherit
 Base.pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

EnsembleDeCartes)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc.cartes)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
function
\color inherit
 Base.push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

EnsembleDeCartes, carte
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Carte)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc.cartes, carte)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
nothing
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
À présent, nous pouvons utiliser 
\color blue
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 et 
\color blue
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 pour distribuer une carte:
\begin_inset Index ind
status open

\begin_layout Plain Layout
pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 paquet = Paquet()
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 carte = pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(paquet)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(main, carte)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'étape suivante consiste naturellement à encapsuler
\begin_inset Index idx
status open

\begin_layout Plain Layout
encapsuler
\end_layout

\end_inset

 ce code dans une fonction appelée 
\color blue
move
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

:
\begin_inset Index ind
status open

\begin_layout Plain Layout
move
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 move
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

EnsembleDeCartes, edc2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

EnsembleDeCartes, n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@assert
\color inherit
 1 ≤ n ≤ length(edc1.cartes)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 i 
\color green
in
\color inherit
 1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

n
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

carte = pop
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(edc2, carte)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

nothing
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
move
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 prend trois arguments: deux objets 
\color blue
EnsembleDeCartes
\color inherit
 et le nombre de cartes à distribuer.
 Elle modifie les deux objets 
\color blue
EnsembleDeCartes
\color inherit
 et renvoie 
\color blue
nothing
\color inherit
.
\end_layout

\begin_layout Standard
Dans certains jeux, les cartes sont déplacées d'une main à l'autre alors
 que, dans d'autres jeux, elles sont échangées depuis une main vers le paquet.
 La fonction 
\color blue
move
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 est donc utilisable pour ces opérations: 
\color blue
edc1 
\color inherit
et 
\color blue
edc2 
\color inherit
peuvent être soit de type 
\color blue
Paquet
\color inherit
, soit de type 
\color blue
UneMain
\color inherit
.
 
\end_layout

\begin_layout Section
Diagrammes de types
\end_layout

\begin_layout Standard
Jusqu'à présent, nous avons vu des diagrammes de pile (qui résume l'état
 d'un programme) et des diagrammes d'objet (qui mettent en évidence les
 attributs d'un objet et leurs valeurs).
 Ces diagrammes représentent un instantané de l'exécution d'un programme.
 En conséquence, ils évoluent au fur et à mesure de l'exécution.
 Ils sont également très détaillés, voire trop pour certains usages.
 
\end_layout

\begin_layout Standard
Un diagramme de types
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
type, diagramme de
\end_layout

\end_inset

 est une esquisse plus abstraite de la structure d'un programme.
 Au lieu de dépeindre des objets individuels, il représente de manière synthétiq
ue les types et les relations qu'ils entretiennent (voir la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Diagramme-de-type-et-relation-entre-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Il existe plusieurs catégories de relation entre les types:
\end_layout

\begin_layout Itemize
les objets d'un type spécifique peuvent contenir des références à des objets
 d'un autre type.
 Par exemple, chaque 
\color blue
Rectangle
\color inherit
 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Rectangles"
plural "false"
caps "false"
noprefix "false"

\end_inset

) contient une référence à un 
\color blue
Point
\color inherit
.
 Dans le présent chapitre, chaque 
\color blue
Paquet
\color inherit
 contient des références à un tableau de 
\color blue
Carte
\color inherit
.
 Ce type de relation est appelé 
\emph on
HAS-A
\emph default
, comme dans l'expression en anglais: 
\begin_inset Quotes cld
\end_inset


\emph on
a 
\color blue
Rectangle
\color inherit
 has a 
\color blue
Point
\emph default
\color inherit

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
relation HAS-A
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
un type spécifique peut avoir un type abstrait comme supertype.
 Cette relation est appelée 
\emph on
IS-A
\emph default
, comme dans la formulation en anglais: 
\begin_inset Quotes cld
\end_inset


\emph on
\color blue
UneMain
\color inherit
 is a kind of 
\color blue
EnsembleDeCartes
\emph default
\color inherit

\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
relation IS-A
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
un type peut dépendre d'un autre dans la mesure où les objets d'un type
 prennent les objets du second type comme paramètres ou, alors, utilisent
 les objets du second type dans le cadre d'un calcul.
 Ce type de relation est appelé une 
\emph on
dépendance
\emph default
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
relation de dépendance
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
dépendance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/diagramme-de-type-inkscape.svg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagramme-de-type-et-relation-entre-types"

\end_inset

Diagramme de type et relations entre types.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans la figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagramme-de-type-et-relation-entre-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

, les flèches à extrémité creuse représentent une relation IS-A.
 Dans le cas présent, elle indique qu'
\color blue
Unemain
\color inherit
 et 
\color blue
Paquet
\color inherit
 ont comme supertype 
\color blue
EnsembleDeCartes
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
flèche à extrémité creuse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les flèches à extrémité pleine
\begin_inset Index idx
status open

\begin_layout Plain Layout
flèche à extrémité pleine
\end_layout

\end_inset

 représentent une relation HAS-A.
 Dans le cas présent,
\color black
 
\color blue
Paquet
\color inherit
 a des références aux objets 
\color blue
Carte
\color inherit
.
\end_layout

\begin_layout Standard
L'étoile (
\color blue

\begin_inset Formula $\star$
\end_inset


\color inherit
)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{$
\backslash
star$}
\end_layout

\end_inset

 près de la pointe d'une flèche désigne une 
\emph on
multiplicité
\emph default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplicité
\end_layout

\end_inset

 Elle indique que 
\color blue
Paquet
\color inherit
 ou 
\color blue
UneMain
\color inherit
 possèdent un certain nombre de 
\color blue
Carte
\color inherit
.
 La multiplicité peut être un simple nombre (comme 
\color blue
52
\color inherit
), une fourchette (
\color blue
5:7
\color inherit
) ou une étoile (
\color blue

\begin_inset Formula $\star$
\end_inset


\color inherit
).
 Ce dernier cas indique que Paquet peut avoir un nombre quelconque de 
\color blue
Carte
\color inherit
.
\end_layout

\begin_layout Standard
Il n'y a pas de dépendances dans ce diagramme.
 Elles sont normalement indiquées par une flèche pointillée.
 Cependant, si les dépendances sont nombreuses, il est judicieux d'omettre
 leur représentation.
\end_layout

\begin_layout Standard
Un diagramme plus détaillé peut montrer qu'un 
\color blue
Paquet
\color inherit
 contient un tableau de 
\color blue
Carte
\color inherit
, mais les types internes à Julia comme les tableaux et les dictionnaires
 ne sont généralement pas repris dans les diagrammes de types.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Débogage-18-10"

\end_inset

Débogage
\end_layout

\begin_layout Standard
Le sous-typage peut rendre le débogage
\begin_inset Index idx
status open

\begin_layout Plain Layout
débogage et sous-typage
\end_layout

\end_inset

 difficile.
 En effet, lorsqu'une fonction est appelée avec un objet comme argument,
 il peut être compliqué de déterminer quelle méthode est invoquée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Supposons que nous écrivions une fonction qui manipule des objets 
\color blue
UneMain
\color inherit
.
 Idéalement, il faudrait qu'elle fonctionne avec toute sorte de type
\color blue
 UneMain
\color inherit
, comme 
\color blue
PokerUneMain
\color inherit
, 
\color blue
BridgeUneMain
\color inherit
, etc.
 Si nous invoquons une méthode comme 
\color blue
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
, il se pourrait que nous travaillions effectivement avec celle définie
 pour le type abstrait 
\color blue
UneMain
\color inherit
.
 Toutefois, s'il existe une méthode 
\color blue
sort!
\color inherit
 ayant comme argument un des sous-types, nous manipulerons cette version
 plutôt que celle définie pour le type abstrait 
\color blue
UneMain
\color inherit
.
 Ce comportement est généralement sain, mais,
\emph on
 a priori
\emph default
, il peut s'avérer déroutant.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Base.sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(main
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

UneMain)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(main.cartes)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsqu'on n'est pas sûr de la manière dont l'exécution d'un programme procède,
 la solution la plus simple consiste à ajouter des instructions d'affichage
 au début des méthodes concernées.
 Si 
\color blue
shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 imprime un message tel que 
\color blue

\begin_inset Quotes cld
\end_inset

Running shuffle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 Paquet
\color inherit

\begin_inset Quotes crd
\end_inset

, cela signifie que le programme est exécuté correctement.
\end_layout

\begin_layout Standard
Une meilleure manière de pratiquer consiste à utiliser la macro 
\color blue
@which
\color inherit
:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@which}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@which
\color inherit
 sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(main)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
sort
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(main
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

UneMain) in Main at REPL[5]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Donc, la méthode 
\color blue
sort!
\color inherit
 associée à 
\color blue
main
\color inherit
 a pour argument un objet de type 
\color blue
UneMain
\color inherit
.
\end_layout

\begin_layout Standard
À ce stade, voici une suggestion relative à la conception d'un programme.
 Lorsque vous passez outre une méthode, l'interface de la nouvelle méthode
 doit être la même que l'interface de l'ancienne.
 Elle devrait prendre les mêmes paramètres, retourner le même type et obéir
 aux mêmes conditions 
\emph on
a priori
\emph default
 et 
\emph on
a posteriori
\emph default
.
 Si vous suivez cette règle, vous constaterez que toute fonction conçue
 pour utiliser une instance d'un supertype (comme 
\color blue
EnsembleDeCartes
\color inherit
) fonctionnera également avec des instances de ses sous-types (comme 
\color blue
Paquet
\color inherit
 et 
\color blue
UneMain
\color inherit
).
\end_layout

\begin_layout Standard
Si vous enfreignez cette règle, connue comme le 
\begin_inset Quotes cld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "principe de substitution de Liskov"
target "https://fr.wikipedia.org/wiki/Principe_de_substitution_de_Liskov"
literal "false"

\end_inset


\begin_inset Quotes crd
\end_inset

, votre code s'effondrera comme un château de cartes.
\end_layout

\begin_layout Standard
La fonction 
\color blue
supertype
\color inherit
 peut être utilisée pour trouver le supertype direct d'un type.
\begin_inset Index idx
status open

\begin_layout Plain Layout
supertype()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
supertype(Paquet)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
EnsembleDeCartes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Encapsulation de données
\end_layout

\begin_layout Standard
Les chapitres 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Structures-et-objets"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Structures-et-fonctions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 présentent un plan de développement qui pourrait s'appeler 
\begin_inset Quotes cld
\end_inset

conception orientée type
\begin_inset Quotes crd
\end_inset

.
 Nous avons identifié les objets à traiter — comme 
\color blue
Point
\color inherit
, 
\color blue
Rectangle 
\color inherit
et 
\color blue
MyTime
\color inherit
 — et nous avons défini des structures pour les représenter.
 Dans chaque cas, il existait une correspondance évidente entre l'objet
 et une entité du monde réel (du moins, sa représentation mathématique).
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
données, encapsulation de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
encapsulation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ceci étant, il est parfois moins facile de déterminer les objets dont nous
 avons besoin et comment ils doivent interagir.
 S'il en va ainsi, il faut un plan de développement mieux adapté que la
 conception orientée type.
 De la même manière que nous avons découvert les interfaces de fonctions
 par encapsulation et généralisation, nous allons découvrir les interfaces
 de types par 
\emph on
encapsulation de données
\emph default
.
\end_layout

\begin_layout Standard
L'analyse de Markov (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Analyse-de-Markov"
plural "false"
caps "false"
noprefix "false"

\end_inset

) fournit un bon exemple.
 Supposons que vous téléchargiez le code 
\begin_inset CommandInset href
LatexCommand href
name "sous ce lien"
target "https://github.com/BenLauwens/ThinkJulia.jl/blob/master/src/solutions/chap13.jl"
literal "false"

\end_inset

.
 Il est facile de constater que deux variables, 
\color blue
suffixes
\color inherit
 et 
\color blue
prefix
\color inherit
, sont utilisables en lecture et écriture par plusieurs fonctions.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
suffixes =
\color brown
 Dict
\color inherit
()
\end_layout

\begin_layout Plain Layout

\size small
prefix = []
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Du fait que ces variables sont globales, nous ne pouvons effectuer qu'une
 seule analyse à la fois.
 S'il arrivait que deux textes soient lus, leurs préfixes et suffixes seraient
 ajoutés aux mêmes structures de données (ce qui produirait un texte intéressant
).
\end_layout

\begin_layout Standard
Pour effectuer plusieurs analyses séparément, il convient d'encapsuler l'état
 de chaque analyse dans un objet.
 Voici comment procéder: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
Markov
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Markov 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

order 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

suffixes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Dict
\color inherit
{Tuple{String,Vararg{String}}, Array{String, 
\color darkgray
1
\color inherit
}}
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

prefix 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Array{String, 
\color darkgray
1
\color inherit
} 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 Markov(order
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64
\color darkgray
=2
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

new(order, 
\color brown
Dict
\color inherit
{Tuple{String,Vararg{String}}, Array{String, 
\color darkgray
1
\color inherit
}}(), Array{String, 
\color darkgray
1
\color inherit
}())
\end_layout

\begin_layout Plain Layout

\size small
\color green
end 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ensuite, les fonctions sont transformées en méthodes
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction et méthode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode et fonction
\end_layout

\end_inset

.
 Par exemple, voici 
\color blue
processword
\color inherit
: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
processword
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 processword(markov
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Markov, word
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

String) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 length(markov.prefix) < markov.order 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(markov.prefix, word) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

get
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(markov.suffixes, (markov.prefix...,), Array{String, 
\color darkgray
1
\color inherit
}()) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(markov.suffixes[(markov.prefix...,)], word) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

popfirst
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(markov.prefix)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(markov.prefix, word) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La transformation conduisant à un programme comme celui-ci — à savoir, changer
 la conception sans modifier le comportement — constitue un autre exemple
 de refonte
\begin_inset Index idx
status open

\begin_layout Plain Layout
refonte
\end_layout

\end_inset

 (voir la section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Refonte-(ou-refactoring)"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Cet exemple propose un plan de développement pour la conception des types:
\end_layout

\begin_layout Itemize
commencer par écrire des fonctions qui lisent et écrivent des variables
 globales (si nécessaire),
\end_layout

\begin_layout Itemize
une fois le programme opérationnel, rechercher les associations entre les
 variables globales et les fonctions qui les utilisent,
\end_layout

\begin_layout Itemize
encapsuler les variables afférentes sous forme de champs d'une structure
 composite,
\end_layout

\begin_layout Itemize
transformer les fonctions associées en méthodes avec comme argument les
 objets du nouveau type.
\end_layout

\begin_layout Subsection*
Exercice 18-3
\end_layout

\begin_layout Standard
Téléchargez le code Markov 
\begin_inset CommandInset href
LatexCommand href
name "sous ce lien"
target " https://github.com/BenLauwens/ThinkJulia.jl/blob/master/src/solutions/chap13.jl"
literal "false"

\end_inset

.
 Suivez les étapes décrites ci-dessus pour encapsuler les variables globales
 comme attributs d'une nouvelle structure appelée Markov.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
encoder représenter un ensemble de valeurs à l'aide d'un autre ensemble
 de valeurs en établissant une correspondance entre elles, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
encoder
\end_layout

\end_inset


\end_layout

\begin_layout Description
test
\begin_inset space ~
\end_inset

unitaire moyen normalisé de tester l'exactitude d'un code, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
test unitaire
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
placage méthode (ou fonction) qui fournit une interface différente à une
 autre fonction sans ajouter de calculs supplémentaires, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
placage
\end_layout

\end_inset


\end_layout

\begin_layout Description
sous-typage possibilité de définir une hiérarchie de types apparentés, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sous-typage
\end_layout

\end_inset


\end_layout

\begin_layout Description
type
\begin_inset space ~
\end_inset

abstrait type qui peut agir comme parent pour un autre type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type abstrait
\end_layout

\end_inset


\end_layout

\begin_layout Description
type
\begin_inset space ~
\end_inset

spécifique type qui peut être construit à partir d'un type abstrait, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type spécifique
\end_layout

\end_inset


\end_layout

\begin_layout Description
sous-type type qui a comme parent un type abstrait, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sous-type
\end_layout

\end_inset


\end_layout

\begin_layout Description
supertype type abstrait, parent d'un autre type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
supertype
\end_layout

\end_inset


\end_layout

\begin_layout Description
relation
\begin_inset space ~
\end_inset

IS-A relation entre un sous-type et son supertype, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
relation IS-A
\end_layout

\end_inset


\end_layout

\begin_layout Description
relation
\begin_inset space ~
\end_inset

HAS-A relation entre deux types où les instances d'un type contiennent des
 références aux instances de l'autre,
\begin_inset Index idx
status open

\begin_layout Plain Layout
relation HAS-A
\end_layout

\end_inset


\end_layout

\begin_layout Description
dépendance relation entre deux types où les instances d'un type utilisent
 des instances d'un autre type, mais ne les enregistrent pas en tant que
 champs, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
dépendance
\end_layout

\end_inset


\end_layout

\begin_layout Description
diagramme
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

type diagramme qui montre les types d'un programme et les relations entre
 eux, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
diagramme de type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
type, diagramme de
\end_layout

\end_inset


\end_layout

\begin_layout Description
multiplicité notation dans un diagramme de type qui montre, pour une relation
 HAS-A, combien de références existent à des instances d'une autre classe,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplicité
\end_layout

\end_inset


\end_layout

\begin_layout Description
encapsulation
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

données plan de développement d'un programme qui comprend un prototype utilisant
 des variables globales et une version finale transformant les variables
 globales en champs d'instance.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
encapsulation de données
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
données, encapsulation de
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercices
\end_layout

\begin_layout Subsection*
Exercice 18-4
\end_layout

\begin_layout Standard
Pour le programme suivant, dessinez un diagramme de types qui décrit ces
 types et les relations entre eux.
\begin_inset Index ind
status open

\begin_layout Plain Layout
Pong
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
addping
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
abstract type
\color inherit
 PingPongParent 
\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
struct
\size default
\color inherit
 Ping <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 PingPongParent 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pong 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 PingPongParent 
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
struct
\size default
\color inherit
 Pong <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 PingPongParent 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pings 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Array
\color inherit
{Ping, 1} 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
function
\color inherit
 Pong(pings=Array{Ping, 1}())
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

new(pings) 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
function 
\color inherit
addping(pong
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Pong, ping
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Ping) 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

push
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(pong.pings, ping) 
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
nothing
\color inherit
 
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
pong = Pong() 
\end_layout

\begin_layout Plain Layout
ping = Ping(pong)
\end_layout

\begin_layout Plain Layout
addping(pong, ping)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Exercice 18-5
\end_layout

\begin_layout Standard
Rédigez une méthode appelée 
\color blue
deal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

 
\color inherit
qui prend trois paramètres: 
\color blue
Paquet
\color inherit
, le nombre de mains et le nombre de cartes par main.
 Elle doit créer le nombre 
\emph on
ad hoc
\emph default
 d'objets 
\color blue
UneMain
\color inherit
, distribuer le nombre approprié de cartes par main et retourner un tableau
 de 
\color blue
UneMain
\color inherit
.
 
\begin_inset Index ind
status open

\begin_layout Plain Layout
deal
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Exercice-18-13-3"

\end_inset

Exercice 18-6
\end_layout

\begin_layout Standard
Voici les mains possibles au poker (avec cinq cartes), par ordre décroissant
 de valeur et par ordre croissant de probabilité (voir le 
\begin_inset CommandInset href
LatexCommand href
name "classement des mains au poker"
target "https://fr.pokerlistings.com/classement-des-mains-du-poker"
literal "false"

\end_inset

):
\end_layout

\begin_layout Description
Quinte
\begin_inset space ~
\end_inset

flush
\begin_inset space ~
\end_inset

royale il s'agit d'une suite de la même couleur (♠, ♥, ♦, ou ♣) allant du
 10 à l'as.
 C'est la combinaison la plus forte au poker et d'une grande rareté.
 Par exemple: A♥, R♥, D♥, V♥, 10♥.
\end_layout

\begin_layout Description
Quinte
\begin_inset space ~
\end_inset

flush toute quinte de la même couleur (♠, ♥, ♦, ou ♣) inférieure à la quinte
 flush royale.
 Par exemple: 9♠, 8♠, 7♠, 6♠, 5♠.
\end_layout

\begin_layout Description
Carré toute combinaison de quatre cartes identiques de même rang.
 Si deux joueurs ont le même carré en même temps (ce qui veut dire que le
 carré est déjà sur la table), c'est le joueur avec la plus forte carte
 en main (le kicker) qui remporte le pot.
 Si la cinquième plus forte carte possible est aussi la cinquième du tapis,
 il y a égalité et le pot est partagé.
 Par exemple: 4♠, 4♥, 4♦, 4♣, R♥.
\end_layout

\begin_layout Description
Full
\begin_inset space ~
\end_inset

house un full house (
\begin_inset Quotes cld
\end_inset

main pleine
\begin_inset Quotes crd
\end_inset

 en français) est l'association d'un brelan et d'une paire, c'est à dire
 trois cartes identiques de n'importe quelle couleur et deux autres cartes
 identiques à côté.
 On évalue toujours la force du brelan en premier pour comparer deux full.
 Par exemple: A♥, A♠, A♣, R♠, R♥.
\end_layout

\begin_layout Description
Couleur
\begin_inset space ~
\end_inset

(flush
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

anglais) toute combinaison de cinq cartes de la même couleur (qui ne se
 suivent pas, sinon c'est une quinte flush).
 La carte la plus haute de la couleur détermine sa force.
 L'exemple montre une 
\begin_inset Quotes cld
\end_inset

couleur hauteur as
\begin_inset Quotes crd
\end_inset

, la plus forte couleur possible.
 Si deux joueurs ont une couleur de la même hauteur, on compare alors leur
 deuxième carte de la couleur la plus forte et ainsi de suite.
 Exemple: A♠, 10♠, 7♠, 6♠, 2♠.
\end_layout

\begin_layout Description
Quinte suite de cinq cartes consécutives qui ne sont pas toutes de la même
 couleur.
 Les as peuvent tout autant compter pour une quinte basse (A-2-3-4-5) qu'on
 appelle aussi la roue, ou pour une quinte haute (10-V-D-R-A).
 Plus la quinte est haute, plus elle est forte.
 Exemple: 5♣, 4♦, 3♠, 2♥, A♥.
\end_layout

\begin_layout Description
Brelan trois cartes identiques.
 L'exemple montre un brelan d'as, avec un roi et une dame en kickers (cartes
 accompagnantes), soit le meilleur brelan possible: A♥, A♠, A♣, R♠, D♥.
\end_layout

\begin_layout Description
Double
\begin_inset space ~
\end_inset

paire deux cartes identiques, accompagnées de deux autres cartes identiques.
 L'exemple montre la meilleure combinaison de deux paires possible, une
 double paire as – rois.
 Lorsqu'on compare une double paire, on commence toujours par la paire la
 plus forte.
 Ainsi, une double paire A-A-5-5 est plus forte qu'une double paire R-R-V-V.
 Exemple: A♠, A♥, R♥, R♠, D♦.
\end_layout

\begin_layout Description
Paire deux cartes de rang identique.
 L'exemple montre la meilleure main possible à une paire: A♥, A♣, R♥, D♠,
 V♦.
 
\end_layout

\begin_layout Description
Hauteur toute main qui ne possède aucune des combinaisons citées ci-dessus.
 Dans ce cas, on évalue la main par rapport à sa carte la plus forte.
 Par exemple, une main R-V-9-4-2 (qui ne sont pas de la même couleur) est
 une 
\begin_inset Quotes cld
\end_inset

hauteur roi
\begin_inset Quotes crd
\end_inset

.
 Si deux joueurs ont la même 
\begin_inset Quotes cld
\end_inset

hauteur
\begin_inset Quotes crd
\end_inset

, on regarde ensuite la deuxième carte la plus forte.
 Exemple: A♥, R♥, D♦, V♣, 9♠.
\end_layout

\begin_layout Standard
L'objectif de cet exercice est d'estimer la probabilité de ces différentes
 mains.
\end_layout

\begin_layout Enumerate
Ajoutez les méthodes appelées 
\color blue
haspair
\color inherit
, 
\color blue
hastwopair
\color inherit
, etc.
 qui retournent 
\color blue
true
\color inherit
 ou 
\color blue
false
\color inherit
 selon que la main répond ou non aux critères pertinents.
 Votre code devrait fonctionner correctement pour des 
\begin_inset Quotes cld
\end_inset

mains
\begin_inset Quotes crd
\end_inset

 qui contiennent un nombre quelconque de cartes (bien que cinq et sept soient
 les configurations les plus courantes).
\begin_inset Index ind
status open

\begin_layout Plain Layout
haspair
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
hastwopair
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Rédigez une méthode appelée 
\color blue
classify
\color inherit
 qui détermine le classement de plus haute valeur pour une main et définissez
 le champ
\color blue
 label
\color inherit
 en conséquence.
 Par exemple, si une main de sept cartes contenait une 
\begin_inset Quotes cld
\end_inset

flush
\begin_inset Quotes crd
\end_inset

 et une 
\begin_inset Quotes cld
\end_inset

paire
\begin_inset Quotes crd
\end_inset

, elle devait être étiquetée 
\begin_inset Quotes cld
\end_inset

flush
\begin_inset Quotes crd
\end_inset

.
\begin_inset Index ind
status open

\begin_layout Plain Layout
classify
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Lorsque vous êtes convaincu que vos méthodes de classement fonctionnent,
 l'étape suivante consiste à estimer les probabilités des différentes mains.
 Rédigez une fonction qui mélange un jeu de cartes, le divise en mains,
 classe les mains et compte le nombre de fois que les différents classements
 apparaissent.
\end_layout

\begin_layout Enumerate
Imprimez un tableau des classements et de leurs probabilités.
 Exécutez votre programme avec un nombre de mains de plus en plus important
 jusqu'à ce que les valeurs de sortie convergent vers un degré de précision
 raisonnable.
 Comparez vos résultats aux valeurs sur 
\begin_inset CommandInset href
LatexCommand href
name "classement des mains au poker"
target "https://fr.pokerlistings.com/classement-des-mains-du-poker"
literal "false"

\end_inset

 ou 
\begin_inset CommandInset href
LatexCommand href
name "Hand Ranking (EN)"
target "https://en.wikipedia.org/wiki/Hand_rankings"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Bonus: à propos de la syntaxe
\end_layout

\begin_layout Standard
Un des objectifs de ce livre a été d'enseigner l'essentiel de Julia.
 Lorsque deux façons de procéder coexistaient, l'une a été choisie tout
 en évitant de mentionner l'autre.
 Parfois, la seconde méthode faisait partie d'un exercice.
\end_layout

\begin_layout Standard
À présent, revenons sur quelques éléments que nous avons négligés.
 Julia fournit un certain nombre de fonctionnalités pas toujours nécessaires.
 Il est possible d'écrire un bon code sans elles, mais leur usage permet
 parfois d'écrire un code plus concis, plus lisible, plus efficace.
 Ces trois qualités peuvent même se conjuguer.
\end_layout

\begin_layout Standard
Ce chapitre et le suivant abordent les éléments laissés en suspens dans
 les chapitres précédents:
\end_layout

\begin_layout Itemize
des suppléments relatifs à la syntaxe,
\end_layout

\begin_layout Itemize
les fonctions, types et macros directement disponibles dans 
\color blue
Base
\color black
,
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
Base
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
les fonctions, types et macros de la bibliothèque standard (
\emph on
Standard Library
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
bibiothèque standard
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Standard Library
\end_layout

\end_inset


\end_layout

\begin_layout Section
Tuples nommés
\end_layout

\begin_layout Standard
On peut désigner les composants d'un tuple en lui attribuant un nom:
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple nommé
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = (a=1, b=1+1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(a = 1, b = 2)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x.a
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Avec les tuples nommés, il devient possible d'accéder aux champs par leur
 nom en utilisant la syntaxe par point (
\color blue
x.a
\color inherit
).
 
\end_layout

\begin_layout Section
Fonctions
\end_layout

\begin_layout Standard
En Julia, les fonctions peuvent être définies à l'aide d'une syntaxe compacte:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction, syntaxe compacte
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 f(x,y) = x + y
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
f (generic function with 1 method)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Fonctions anonymes
\end_layout

\begin_layout Standard
Une fonction peut être définie de manière non nominative: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction anonyme
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
x -> x^2 + 2x - 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
#1 (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
function
\color inherit
 (x)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x^2 + 2x - 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
#3 (generic function with 1 method)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ces exemples correspondent à des fonctions 
\begin_inset Quotes cld
\end_inset

anonymes
\begin_inset Quotes crd
\end_inset

.
 Les fonctions anonymes sont souvent utilisées comme argument pour une autre
 fonction: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Plots, fonction anonyme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
->
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 
\color green
using
\color inherit
 Plots
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 plot(x -> x^2 + 2x - 1, 0, 10, xlabel=
\color brown
"x"
\color inherit
, ylabel=
\color brown
"y"
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Graphique-fct-anonyme-Plots"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre le résultat de ces instructions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/fonction_anonyme.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Graphique-fct-anonyme-Plots"

\end_inset

Graphique de la fonction anonyme x-> x² + 2x -1 avec Plots.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arguments nommés
\end_layout

\begin_layout Standard
Les arguments de fonctions peuvent également être nommés: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument nommé
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
function
\color inherit
 myplot(x, y; style=
\color brown
"solid"
\color inherit
, width=1, color=
\color brown
"black"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

###
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
myplot (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
julia> myplot(0
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10, 0
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

10, style=
\color brown
"dotted"
\color inherit
, color=
\color brown
"blue"
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les arguments nommés dans une fonction sont spécifiés après un point-virgule
 dans la signature, mais peuvent être appelés avec une virgule.
 
\end_layout

\begin_layout Subsection
Fermetures
\end_layout

\begin_layout Standard
Une fermeture est une technique qui permet à une fonction de capturer une
 variable définie en dehors du champ d'application de la fonction.
\begin_inset Index idx
status open

\begin_layout Plain Layout
fermeture
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
->
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 foo(x) = ()->x
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
foo (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 bar = foo(1) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
#1 (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 bar() 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple, la fonction 
\color blue
foo
\color inherit
 retourne une fonction anonyme qui a accès à l'argument 
\color blue
x
\color inherit
 de la fonction 
\color blue
foo
\color inherit
.
 
\color blue
bar
\color inherit
 pointe sur la fonction anonyme et retourne la valeur de l'argument de 
\color blue
foo
\color inherit
.
\end_layout

\begin_layout Section
Blocs
\end_layout

\begin_layout Standard
Un 
\emph on
bloc
\emph default
 est un moyen de regrouper un certain nombre de déclarations.
 Un bloc commence par le mot-clé 
\color blue
begin
\color inherit
 et se termine par 
\color blue
end
\color inherit
.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
bloc
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
begin
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@svg}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La macro 
\color magenta
@svg
\color inherit
 a été présentée dans le chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset


\size default
 = Turtle()
\end_layout

\begin_layout Plain Layout

\size small
\color purple
@svg
\color green
 begin
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

turn(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, -90)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forward(
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 35

\end_inset

, 100)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple, la macro 
\color magenta
@svg
\color inherit
 possède un seul argument, c'est-à-dire un bloc regroupant trois appels
 de fonction.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@svg}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bloc 
\color blue
let
\end_layout

\begin_layout Standard
Un bloc 
\color blue
let
\color inherit
 s'avère utile pour créer de nouvelles associations (ou ligatures), c'est-à-dire
 des variables locales pointant vers des valeurs.
\begin_inset Index idx
status open

\begin_layout Plain Layout
let
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bloc let
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
association
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ligature
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 x, y, z = -1, -1, -1;
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 
\color green
let
\color inherit
 x = 1, z
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@show
\color black
 x y z;
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\color lightgray
x = 1
\end_layout

\begin_layout Plain Layout

\color lightgray
y = -1
\end_layout

\begin_layout Plain Layout

\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 UndefVarError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 z not defined
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 
\color magenta
@show
\color inherit
 x y z;
\end_layout

\begin_layout Plain Layout

\color lightgray
x = 1
\end_layout

\begin_layout Plain Layout

\color lightgray
y = -1
\end_layout

\begin_layout Plain Layout

\color lightgray
z = -1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple, la première macro
\color blue
 @show
\color inherit
 affiche 
\color blue
x
\color inherit
 en local,
\color blue
 y
\color inherit
 en global et 
\color blue
z
\color inherit
 (indéfini) en local.
 Les variables globales ne sont pas touchées.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@show}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Blocs 
\color blue
do
\end_layout

\begin_layout Standard
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lire-et-écrire"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons montré qu'il fallait fermer les fichiers après avoir effectué
 les opérations d'écriture.
 En réalité, cela peut être exécuté automatiquement en utilisant un 
\emph on
bloc 
\color black
do
\emph default
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
bloc do
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 data = 
\color brown
"Appréciez votre liberté,
\backslash
nou vous la perdrez!
\backslash
n"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Appréciez votre liberté,
\backslash
nou vous la perdrez!
\backslash
n"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 open(
\color brown
"output.txt"
\color inherit
, 
\color brown
"w"
\color inherit
)
\color green
 do
\color inherit
 fout
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color black
write(fout, data)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
47
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans cet exemple
\begin_inset Foot
status open

\begin_layout Plain Layout
Citation de Richard M.
 Stallman.
\end_layout

\end_inset

, 
\color blue
fout
\color inherit
 est le flux de fichiers utilisé pour la sortie.
 En termes de fonctionnement, ceci est équivalent à:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 f = fout -> 
\color green
begin
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color inherit
write(fout, data) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
#3 (generic function with 1 method)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 open(f, 
\color brown
"output.txt"
\color inherit
, 
\color brown
"w"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
47
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction anonyme
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction anonyme
\end_layout

\end_inset

 est utilisée comme premier argument de la fonction 
\color blue
open
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
open()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 open(f
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Function
\color inherit
, args...)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

io = open(args...)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
try
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(io) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
finally
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

close(io) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un bloc 
\color blue
do
\color inherit
 peut 
\begin_inset Quotes cld
\end_inset

capturer
\begin_inset Quotes crd
\end_inset

 des variables à l'extérieur de son périmètre d'application
\begin_inset Index idx
status open

\begin_layout Plain Layout
périmètre d'application
\end_layout

\end_inset

.
 Par exemple, dans l'exemple ci-dessus, la variable 
\color blue
data
\color inherit
 de 
\begin_inset Quotes cld
\end_inset


\color blue
open ...
 do
\color inherit

\begin_inset Quotes crd
\end_inset

 est capturée alors qu'elle figure comme variable globale.
 
\end_layout

\begin_layout Section
Structure de contrôle
\end_layout

\begin_layout Subsection
Opérateur ternaire
\end_layout

\begin_layout Standard
L'
\emph on
opérateur ternaire
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\emph default
\color blue
 ?:
\color inherit

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

est une alternative à une déclaration 
\color blue
if
\color inherit
-
\color blue
elseif
\color inherit
 lorsqu'un choix entre plusieurs valeurs d'une seule expression s'avère
 nécessaire.
\begin_inset Index idx
status open

\begin_layout Plain Layout
structure de contrôle
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
?, opérateur ternaire
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur ternaire ?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 a = 150
\end_layout

\begin_layout Plain Layout

\color lightgray
150
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 a % 2 == 0 ? println(
\color brown
"even"
\color inherit
) : println(
\color brown
"odd"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\color lightgray
even
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression précédant le signe 
\color blue
?
\color inherit
 désigne une condition.
 Si la condition est 
\color blue
true
\color inherit
, l'expression précédant 
\color blue
:
\color inherit
 est évaluée, sinon l'expression suivant
\color blue
 :
\color inherit
 est exécutée.
\end_layout

\begin_layout Subsection
Évaluation en court-circuit
\end_layout

\begin_layout Standard
Les opérateurs 
\color blue
&& 
\color inherit
et 
\color blue
||
\color inherit
 effectuent une évaluation en mode court-circuit: l'argument qui les suit
 n'est évalué que si nécessaire pour déterminer la valeur finale.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
évaluation en court-circuit
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Par exemple, une routine factorielle récursive pourrait être définie ainsi:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 fact(n
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Integer
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n >= 0 || error(
\color brown
"n ne peut pas être negatif"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n == 0 && 
\color green
return
\color inherit
 1 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n * fact(n-1) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Subsection
Tâches ou co-routines
\end_layout

\begin_layout Standard
Une 
\emph on
tâche
\emph default
 est une structure de contrôle qui peut passer le contrôle de manière coopérativ
e sans retour.
 En Julia, une tâche peut être implémentée comme une fonction ayant en premier
 argument un objet 
\color blue
Channel
\color inherit
.
 Un canal
\begin_inset Index idx
status open

\begin_layout Plain Layout
canal
\end_layout

\end_inset

 est utilisé pour transmettre des valeurs de la fonction à l'énoncé qui
 l'appelle.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tâche
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
co-routine
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Channel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La suite de Fibonacci peut être calculée à l'aide d'une tâche.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 fib(c
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Channel)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = 0
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = 1
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

put
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(c, a)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
while true
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

put
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(c, b) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(a, b) = (b, a+b)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
put
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 enregistre les valeurs dans un objet canal et 
\color blue
take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 lit les valeurs à partir de celui-ci: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fib_gen = 
\color brown
Channel
\color inherit
(fib);
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(fib_gen) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(fib_gen)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(fib_gen)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(fib_gen) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

(fib_gen) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le constructeur 
\color blue
Channel
\color inherit
 crée la tâche.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Channel, constructeur
\end_layout

\end_inset

 La fonction 
\color blue
fib
\color inherit
 est suspendue après chaque appel 
\color blue
put
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 et reprise après 
\color blue
take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset


\color inherit
 Pour des raisons de performance, plusieurs valeurs de la séquence sont
 mises en mémoire tampon dans l'objet canal pendant un cycle de reprise/suspensi
on.
\begin_inset Index idx
status open

\begin_layout Plain Layout
take
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un objet canal peut également être utilisé comme itérateur:
\begin_inset Index idx
status open

\begin_layout Plain Layout
canal et itérateur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> for 
\color inherit
val 
\color green
in
\color inherit
 
\color brown
Channel
\color inherit
(fib) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color inherit
print(val, 
\color brown
" "
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color inherit
val > 20 && 
\color green
break
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

13
\begin_inset space ~
\end_inset

21
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Types
\end_layout

\begin_layout Subsection
Types primitifs
\end_layout

\begin_layout Standard
Un type spécifique (ou particulier) composé de bits est appelé un type primitif.
 Contrairement à la plupart des langages, Julia permet de déclarer nos propres
 types primitifs.
 Les types primitifs standard sont définis de la même manière:
\begin_inset Index idx
status open

\begin_layout Plain Layout
type primitif
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
type spécifique
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
primitive
\color inherit
 
\color green
type
\color inherit
 
\color brown
Float64
\color inherit
 <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
AbstractFloat
\color inherit
 64 
\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
primitive
\color inherit
 
\color green
type
\color inherit
 
\color brown
Bool
\color inherit
 <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Integer
\color inherit
 8 
\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
primitive
\color inherit
 
\color green
type
\color inherit
 
\color brown
Char
\color inherit
 <
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
AbstractChar
\color inherit
 32 
\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
primitive
\color inherit
 
\color green
type
\color inherit
 
\color brown
Int64 
\color inherit
<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 
\color brown
Signed
\color inherit
 64 
\color green
end 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ces déclarations précisent le nombre de bits requis.
\end_layout

\begin_layout Standard
L'exemple suivant crée un type primitif 
\color blue
Byte
\color inherit
 et un constructeur: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type primitif et constructeur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 primitive 
\color green
type
\color inherit
 Byte 8 
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Byte(val
\color black

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
UInt8
\color inherit
) = reinterpret(Byte, val) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Byte
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 b = Byte(
\color darkgray
0x01
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Byte(0x01)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
reinterpret
\color inherit
 sert à enregistrer les bits d'un entier non signé de huit bits (
\color blue
UInt8
\color inherit
) dans l'octet.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
UInt8
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
reinterpret
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Types paramétriques
\end_layout

\begin_layout Standard
Le système de types de Julia est paramétrique, ce qui signifie que les types
 peuvent avoir des paramètres.
\begin_inset Index idx
status open

\begin_layout Plain Layout
type paramétrique
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
{ }, type paramétrique
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les paramètres des types sont introduits après le nom du type, entouré d'accolad
es: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Point{T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
}
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ceci définit un nouveau type paramétrique, 
\color blue
Point{T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Real}
\color inherit
, contenant deux 
\begin_inset Quotes cld
\end_inset

coordonnées
\begin_inset Quotes crd
\end_inset

 de type 
\color blue
T
\color inherit
, qui peut être n'importe quel type ayant 
\color blue
Real
\color inherit
 comme supertype.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Point(0.0, 0.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point{Float64}(0.0, 0.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En plus des types composites, les types abstraits et les types primitifs
 peuvent également avoir un paramètre de type.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

Pour des raisons de performance, il est vivement recommandé d'avoir des
 types spécifiques pour les champs de structure.
 C'est là une bonne méthode pour rendre 
\backslash
textcolor{blue}{Point} à la fois rapide et flexible.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Unions de types
\end_layout

\begin_layout Standard
À l'image d'une structure, une union
\begin_inset Index idx
status open

\begin_layout Plain Layout
union
\end_layout

\end_inset

 de types est un regroupement d’objet de types différents.
 À la différence d'une structure, une union de types ne peut contenir qu'un
 seul de ses membres à la fois:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 IntOrString = 
\color brown
Union
\color inherit
{
\color brown
Int64
\color inherit
, String} 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Union{Int64, String}
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 150 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 IntOrString 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
150 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color brown
"Julia"
\color inherit
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 IntOrString
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"Julia"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Julia permet à ses utilisateurs de tirer parti des unions, car un code efficace
 est produit en terme d'utilisation de la mémoire.
 L’accès aux champs d’une union est simplifié lorsque l'union est rendue
 
\begin_inset Quotes cld
\end_inset

anonyme
\begin_inset Quotes crd
\end_inset

 au sein d’une autre structure ou d’une autre union.
\end_layout

\begin_layout Section
Méthodes
\end_layout

\begin_layout Subsection
Méthodes paramétriques
\end_layout

\begin_layout Standard
Les définitions de méthodes peuvent également comporter des paramètres de
 type caractérisant leur signature:
\begin_inset Index idx
status open

\begin_layout Plain Layout
méthode paramétrique
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
isintpoint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
isintpoint(p
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Point{T}) where {T} = (T === 
\color brown
Int64
\color inherit
) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
isintpoint (generic function with 1 method) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p = Point(1, 2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point{Int64}(1, 2)
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 isintpoint(p)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Objets foncteurs
\end_layout

\begin_layout Standard
En Julia, tous les objets sont 
\begin_inset Quotes cld
\end_inset

appelables
\begin_inset Quotes crd
\end_inset

.
 Ces objets 
\begin_inset Quotes cld
\end_inset

appelables
\begin_inset Quotes crd
\end_inset

 sont des 
\emph on
foncteurs
\emph default
 (
\emph on
functors
\emph default
), c'est-à-dire des objets qui peuvent être traités à la manière d'une fonction.
\begin_inset Index idx
status open

\begin_layout Plain Layout
foncteur
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
objet appelable
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Polynomial{R} 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

coeff
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Vector
\color inherit
{R} 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 (p
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Polynomial)(x)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

val = p.coeff[end]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 coeff 
\color green
in
\color inherit
 p.coeff[end-1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

-1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

1]
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

val = val * x + coeff
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

val
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour évaluer le polynôme:
\begin_inset Index ind
status open

\begin_layout Plain Layout
Polynomial
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 p = Polynomial([1,10,100]) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Polynomial{Int64}([1, 10, 100]) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
p(3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
931
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Constructeurs
\end_layout

\begin_layout Standard
Les types paramétriques peuvent être construits explicitement ou implicitement:
\begin_inset Index idx
status open

\begin_layout Plain Layout
constructeur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Point(1,2) 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# implicit T 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point{Int64}(1, 2) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Point{Int64}(1, 2)
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# explicit T
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point{Int64}(1, 2)
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Point(1,2.5)
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\color cyan
# implicit T
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color red
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 MethodError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 no method matching Point(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Int64, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Des constructeurs internes et externes par défaut sont générés pour chaque
 
\color blue
T
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
struct
\color inherit
 Point{T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Point{T}(x,y) where {T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} = new(x,y)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
Point(x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T, y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

T) where {T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} = Point{T}(x,y);
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
 doivent tous deux être du même type.
\end_layout

\begin_layout Standard
Lorsque 
\color blue
x
\color inherit
 et 
\color blue
y
\color inherit
 ont un type différent, le constructeur extérieur peut être défini comme
 suit:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Point(x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
, y
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
) = Point(promote(x,y)...);
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
promote
\color inherit
 est traitée dans la sous-section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Promotion"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section
Conversions et promotions
\end_layout

\begin_layout Standard
Julia dispose d'un système permettant de promouvoir des arguments de différentes
 sortes en un type commun.
 Bien qu'elle ne soit pas automatique, la 
\emph on
promotion
\emph default
 peut facilement être effectuée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
conversion
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conversion
\end_layout

\begin_layout Standard
Une valeur peut être convertie d'un type vers un autre: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
j
\size small
ulia> 
\color inherit
x = 12
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
12
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(x)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Int64
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 convert(
\color brown
UInt8,
\color inherit
 x)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0x0c
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(ans)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
UInt8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous pouvons ajouter nos propres méthodes de conversion:
\begin_inset Index ind
status open

\begin_layout Plain Layout
convert
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.convert()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
Base.convert(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Type
\color inherit
{Point{T}}, x
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Array
\color inherit
{T, 1}) where {T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} = Point(x...)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 convert(Point{
\color brown
Int64
\color inherit
}, [1, 2]) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Point{Int64}(1, 2)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Promotion"

\end_inset

Promotion
\end_layout

\begin_layout Standard
La 
\emph on
promotion
\emph default
 est la conversion des valeurs de types mixtes en un seul type commun: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
promotion
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
promote()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 promote(1, 2.5, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(1.0, 2.5, 3.0)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les méthodes pour la fonction de promotion ne sont normalement pas directement
 définies.
 Cependant, la fonction auxiliaire 
\color blue
promote_rule
\color inherit
 est utilisée pour spécifier les règles de promotion: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
promote_rule()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
promote_rule(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Type
\color inherit
{
\color brown
Float64
\color inherit
}, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Type{
\color brown
Int32
\color inherit
}) = 
\color brown
Float64
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Métaprogrammation
\end_layout

\begin_layout Standard
Le code Julia peut être représenté comme une structure de données du langage
 lui-même.
 Cela permet à un programme de transformer et de produire son propre code.
\begin_inset Index idx
status open

\begin_layout Plain Layout
méta-programmation
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Expressions
\end_layout

\begin_layout Standard
En Julia, chaque programme commence par une chaîne:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 prog = 
\color brown
"1 + 2"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"1 + 2"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'étape suivante consiste à analyser chaque chaîne de caractères en un objet
 appelé 
\emph on
expression
\emph default
, représenté par le type 
\color blue
Expr
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Expr, type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Meta.parse()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 ex = Meta.parse(prog) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

(1 + 2)
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(ex)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Expr
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 dump(ex) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Expr 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

head
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Symbol call 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

args
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Array{Any}((3,)) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Symbol +
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64 1 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Int64 2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
dump
\color inherit
 affiche les objets 
\color blue
Expr
\color inherit
 avec des annotations.
\begin_inset Index idx
status open

\begin_layout Plain Layout
dump()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les expressions sont construites directement avec le préfixe
\color blue

\begin_inset space ~
\end_inset

:
\color inherit

\begin_inset space ~
\end_inset

suivi de parenthèses ou bien en utilisant un bloc 
\emph on
quote
\emph default
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 ex = 
\color green
quote
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1 + 2 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection

\color blue
eval
\end_layout

\begin_layout Standard
Julia est à même d'évaluer un objet d'expression en utilisant 
\color blue
eval
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
eval
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 eval(ex)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Chaque module a sa propre fonction d'évaluation qui calcule les expressions
 dans son champ d'application.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout

Lorsque le nombre de recours à la fonction 
\backslash
textcolor{blue}{eval} est élevé, cela signifie souvent qu'un programme est
 mal conçu.
 L'usage d'
\backslash
textcolor{blue}{eval} est considéré comme une 
\backslash
guillemotleft~mauvaise pratique~
\backslash
guillemotright.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Macros
\end_layout

\begin_layout Standard
Les macros peuvent inclure le code produit dans un programme.
 Une 
\emph on
macro
\emph default
 associe un ensemble d'objets 
\color blue
Expr
\color inherit
 directement à une expression compilée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
macro
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voici une macro simple:
\begin_inset Index ind
status open

\begin_layout Plain Layout
containervariable
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
macro
\color inherit
 containervariable(container, element) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return
\color inherit
 esc(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

($(
\color brown
Symbol
\color inherit
(container,element)) = $container[$element])) 
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les macros sont appelées en préfixant leur nom par le symbole 
\color blue
@
\color inherit
.
 L'appel de macro 
\color blue
@containervariable letters 1
\color inherit
 est remplacé par: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

(letters1 = letters[1])
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
@macroexpand @containervariable letters 1
\color inherit
 retourne cette expression, qui se révèle extrêmement utile pour le débogage.
\end_layout

\begin_layout Standard
Cet exemple illustre comment une macro accède au nom de ses arguments, ce
 qu'une fonction ne peut pas faire.
 L'expression retournée nécessite l'usage d'un échappement avec 
\color blue
esc
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
esc()
\end_layout

\end_inset

 du fait qu'elle doit être résolue dans l'environnement d'appel de la macro.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip2}
\end_layout

\begin_layout Plain Layout

Pourquoi utiliser des macros? Les macros produisent et incluent des fragments
 de code personnalisé pendant que l'analyse a lieu, c'est-à-dire avant que
 le programme complet ne soit exécuté.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip2}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fonctions générées
\end_layout

\begin_layout Standard
La macro 
\color blue
@generated
\color inherit
 crée un code spécialisé pour les méthodes en fonction des types d'arguments:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction générée
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@generated}
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
square
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color magenta
@generated
\color inherit
 
\color green
function
\color inherit
 square(x) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

println(x) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

(x * x) 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le corps retourne une expression citée comme une macro.
\end_layout

\begin_layout Standard
Pour l'appelant, la fonction générée se comporte comme une fonction régulière:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = square(2); 
\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# note
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 sortie après l'instruction println() dans le corps 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Int64
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x 
\color cyan

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# maintenant nous écrivons x 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
4 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y = square(
\color brown
"bon"
\color inherit
); 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
String 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 y 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"bonbon"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Valeurs manquantes
\end_layout

\begin_layout Standard
Les 
\emph on
valeurs manquantes
\emph default
 peuvent être représentées 
\emph on
via 
\emph default
l'objet 
\color blue
missing
\color inherit
, qui est l'instance unique du type 
\color blue
Missing
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Missing, type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
missing, objet
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
valeurs manquantes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les tableaux sont susceptibles de contenir des valeurs manquantes: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a = [1, missing] 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2-element Array{Union{Missing, Int64},1}
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

missing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le type d'élément d'un tel tableau est 
\color blue
Union{Missing, T}
\color inherit
 avec 
\color blue
T
\color inherit
 le type des valeurs non manquantes.
\end_layout

\begin_layout Standard
Les fonctions de réduction retournent les valeurs manquantes lorsqu'elles
 sont invoquées sur des tableaux qui contiennent des valeurs manquantes:
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sum(a)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
missing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, il convient d'employer la fonction 
\color blue
skipmissing
\color inherit
 pour passer outre les valeurs manquantes: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
skipmissing()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 sum(skipmissing([1, missing]))
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Section
Appel de code C et Fortran
\end_layout

\begin_layout Standard
Une quantité considérable de code est écrit en C
\begin_inset Index idx
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 ainsi qu'en Fortran
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fortran
\end_layout

\end_inset

.
 Réutiliser du code testé est une meilleure pratique que d'écrire sa propre
 version d'un algorithme.
 Julia peut appeler directement des bibliothèques C ou Fortran existantes
 en utilisant la syntaxe 
\color blue
ccall
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
ccall
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Bases-de-données"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (relative aux bases de données), nous avons introduit une interface Julia
 à la bibliothèque GDBM des fonctions de base de données.
 La bibliothèque est écrite en C.
 Pour fermer la base de données, un appel de fonction à 
\color blue
close(db)
\color inherit
 doit être effectué:
\begin_inset Index idx
status open

\begin_layout Plain Layout
clode(db)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Base.close(dbm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

DBM) = gdbm_close(dbm.handle)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 gdbm_close(handle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color violet
Ptr
\color inherit
{Cvoid}) 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
ccall
\color inherit
((:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

gdbm_close, "
\color brown
libgdbm"
\color inherit
), Cvoid, (
\color violet
Ptr
\color inherit
{Cvoid},), handle)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un objet 
\color blue
dbm
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout
dbm
\end_layout

\end_inset

 a un champ 
\color blue
handle
\color inherit
 de type 
\color blue
Ptr{Cvoid}
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
handle
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Ptr{Cvoid}
\end_layout

\end_inset

 Ce champ contient un pointeur C
\begin_inset Index idx
status open

\begin_layout Plain Layout
pointeur C
\end_layout

\end_inset

 qui fait référence à la base de données.
 Pour fermer la base de données, la fonction C 
\color blue
gdbm_close
\color inherit
 doit être invoquée en ayant comme seul argument le pointeur C pointant
 vers la base de données et aucune valeur de retour.
 Julia effectue cela directement avec la fonction 
\color blue
ccall
\color inherit
 ayant comme arguments:
\begin_inset Index idx
status open

\begin_layout Plain Layout
gdbm_close
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
un tuple consistant en un symbole contenant le nom de la fonction que nous
 voulons appeler: 
\color blue

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

gdbm_close
\color inherit
 et la bibliothèque partagée spécifiée sous forme de chaîne : 
\color blue
"libgdm"
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
libgdm
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
le type de retour: 
\color blue
Cvoid
\color inherit
,
\begin_inset Index idx
status open

\begin_layout Plain Layout
Cvoid
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
un tuple des types d'arguments: 
\color blue
(Ptr{Cvoid},)
\color inherit
,
\end_layout

\begin_layout Itemize
les valeurs de l'argument: 
\color blue
handle
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
handle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La cartographie complète de la bibliothèque GDBM peut être trouvée à titre
 d'exemple dans les sources de ThinkJulia
\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJulia
\end_layout

\end_inset

 (ou ThinkJuliaFR
\begin_inset Index idx
status open

\begin_layout Plain Layout
ThinkJuliaFR
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
fermeture fonction qui saisit les variables dans sa zone de portée, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fermeture
\end_layout

\end_inset


\end_layout

\begin_layout Description
bloc
\begin_inset space ~
\end_inset


\color blue
let
\color inherit
 bloc créant de nouvelles associations (ou ligatures) de variables locales
 vers des valeurs, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
let
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bloc let
\end_layout

\end_inset


\end_layout

\begin_layout Description
fonction
\begin_inset space ~
\end_inset

anonyme fonction définie de manière non nominative, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
fonction anonyme
\end_layout

\end_inset


\end_layout

\begin_layout Description
tuple
\begin_inset space ~
\end_inset

nommé tuple dont les composants sont nommés,
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple nommé
\end_layout

\end_inset


\end_layout

\begin_layout Description
arguments
\begin_inset space ~
\end_inset

nommés arguments identifiables par leur nom, c'est-à-dire pas seulement
 par leur position, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument nommé
\end_layout

\end_inset


\end_layout

\begin_layout Description
bloc
\begin_inset space ~
\end_inset


\color blue
do
\color inherit
 construction syntaxique utilisée pour définir et appeler une fonction anonyme
 similaire à un bloc de code usuel, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
do
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
bloc do
\end_layout

\end_inset


\end_layout

\begin_layout Description
opérateur
\begin_inset space ~
\end_inset

ternaire opérateur de flux de contrôle prenant trois opérandes: une condition,
 une expression à exécuter lorsque la condition retourne
\color blue
 true
\color inherit
 et une autre expression à exécuter lorsque la condition retourne 
\color blue
false
\color inherit
, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur ternaire
\end_layout

\end_inset


\end_layout

\begin_layout Description
évaluation
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

court-circuit évaluation d'un opérateur booléen pour lequel le deuxième
 argument est exécuté ou évalué, uniquement si le premier argument ne suffit
 pas à déterminer la valeur de l'expression, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
court-circuit
\end_layout

\end_inset


\end_layout

\begin_layout Description
tâche
\begin_inset space ~
\end_inset

(ou
\begin_inset space ~
\end_inset

co-routine) fonction de contrôle du flux qui permet la suspension et la
 reprise des calculs de manière flexible,
\begin_inset Index idx
status open

\begin_layout Plain Layout
tâche
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
coroutine
\end_layout

\end_inset


\end_layout

\begin_layout Description
type
\begin_inset space ~
\end_inset

primitif type spécifique dont les données sont constituées de simples bits,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type primitif
\end_layout

\end_inset


\end_layout

\begin_layout Description
type
\begin_inset space ~
\end_inset

union type qui inclut comme objets toutes les instances de l'un ou l'autre
 de ses paramètres de type,
\begin_inset Index idx
status open

\begin_layout Plain Layout
Union
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
type union
\end_layout

\end_inset


\end_layout

\begin_layout Description
type
\begin_inset space ~
\end_inset

paramétrique type qui possède des paramètres (autrement dit: type paramétré),
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
type paramétrique
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
paramétrique, type
\end_layout

\end_inset


\end_layout

\begin_layout Description
foncteur objet avec une méthode associée lui permettant d'être invoqué,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
foncteur
\end_layout

\end_inset


\end_layout

\begin_layout Description
conversion procédé permettant de convertir une valeur d'un type en un autre,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
conversion
\end_layout

\end_inset


\end_layout

\begin_layout Description
promotion conversion des valeurs de types différents en un seul type commun,
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
promotion
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
expression type Julia qui contient une construction linguistique, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
macro procédé permettant d'inclure du code généré dans le corps final d'un
 programme, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
macro
\end_layout

\end_inset


\end_layout

\begin_layout Description
fonctions
\begin_inset space ~
\end_inset

générées fonctions capables de produire un code spécialisé selon les types
 d'arguments,
\end_layout

\begin_layout Description
valeurs
\begin_inset space ~
\end_inset

manquantes instances qui représentent des données sans qu'une valeur leur
 soit attribuée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
valeurs manquantes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Bonus:-bibliothèque-de-base-et-standard"

\end_inset

Bonus: Bibliothèque de base et standard
\end_layout

\begin_layout Standard
Outre un environnement en développement permanent, Julia est livrée –de
 base– avec de nombreux outils.
 Le module de base contient les fonctions, les types et les macros les plus
 utiles.
 Julia fournit également un grand nombre de modules spécialisés dans sa
 bibliothèque standard (dates, calcul distribué, algèbre linéaire, profilage,
 nombres aléatoires, etc.).
 Les fonctions, types et macros définis dans la bibliothèque standard doivent
 être importés avant d'être utilisés:
\end_layout

\begin_layout Itemize

\color blue
import 
\emph on
Module
\emph default
\color inherit
 importe le module souhaité et
\color blue
 Module.fn(x)
\color inherit
 appelle la fonction 
\color blue
fn
\color black
,
\end_layout

\begin_layout Itemize

\color blue
using 
\emph on
Module
\emph default
\color inherit
 importe toutes les fonctions, types et macros du 
\emph on
Module
\emph default
.
\end_layout

\begin_layout Standard
Des fonctionnalités supplémentaires sont ajoutées à partir d'une collection
 croissante de paquets (voir 
\begin_inset CommandInset href
LatexCommand href
name "Julia Observer"
target "https://juliaobserver.com"
literal "false"

\end_inset

).
\begin_inset Index idx
status open

\begin_layout Plain Layout
paquet(s)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
module(s)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
using
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
module
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ce chapitre ne remplace pas la 
\begin_inset CommandInset href
LatexCommand href
name "documentation officielle de Julia"
target "https://docs.julialang.org/en/v1/"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
documentation officielle
\end_layout

\end_inset

 Ne sont cités que quelques exemples pour illustrer ce qui est possible
 sans toutefois être exhaustif.
 Les fonctions déjà introduites ailleurs ne sont pas incluses.
 Une vue d'ensemble complète est disponible sur 
\begin_inset CommandInset href
LatexCommand href
name "Julia Documentation"
target "https://docs.julialang.org/en/v1/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Mesures de performance
\end_layout

\begin_layout Standard
Nous avons vu que certains algorithmes sont plus performants que d'autres.
 La fonction 
\color blue
fibonacci
\color inherit
 en section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mémos"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Mémos) est beaucoup plus rapide que 
\color blue
fib
\color inherit
 écrite en section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Un-exemple-supplémentaire"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 La macro 
\color blue
@time
\color inherit
 permet de quantifier la différence: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
performance, mesure de
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@time}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
fib(1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 fibonacci(1)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@time
\color inherit
 fib(40)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0.567546 seconds (5 allocations: 176 bytes) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
102334155 
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color magenta
@time
\color inherit
 fibonacci(40) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0.000012 seconds (8 allocations: 1.547 KiB) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
102334155
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
@time
\color inherit
 affiche le temps d'exécution de la fonction, le nombre d'allocations et
 la mémoire allouée avant de retourner le résultat.
 La version 
\begin_inset Quotes cld
\end_inset

mémo
\begin_inset Quotes crd
\end_inset

 est effectivement beaucoup plus rapide mais elle requiert davantage de
 mémoire.
\end_layout

\begin_layout Quotation
\begin_inset Quotes cld
\end_inset


\emph on
Rien n'est gratuit
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip}
\end_layout

\begin_layout Plain Layout

En Julia,  lors de sa première exécution, une fonction  est compilée.
 La comparaison de deux algorithmes requiert que ceux-ci soient implémentés
 en tant que fonctions pour être compilés et, la première fois qu'ils sont
 appelés doit être exclue de la mesure de performance, sinon la durée de
 compilation est prise en compte.
 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Le paquet 
\backslash
href{https://github.com/JuliaCI/BenchmarkTools.jl}{
\backslash
textcolor{blue}{BenchmarkTools}} fournit la macro 
\backslash
textcolor{blue}{@btime} qui permet de faire de l'analyse de performance
 de la bonne manière.
 Utilisez-le.
\backslash
footnote[1]{Le lecteur consultera la référence 
\backslash
cite{key-10}}.
 
\backslash
index{BenchmarkTools}
\end_layout

\begin_layout Plain Layout


\backslash
end{tip}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Collections-et-structures-de-donnees"

\end_inset

Collections et structures de données
\end_layout

\begin_layout Standard
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Soustraction-de-dictionnaires"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (Soustraction de dictionnaires), des dictionnaires ont été utilisés pour
 trouver les mots qui apparaissent dans un document mais pas dans un tableau
 de mots.
 La fonction que nous avons écrite prend 
\color blue
d1
\color inherit
 contenant les mots du document comme clés et 
\color blue
d2
\color inherit
 qui renferme le tableau de mots.
 Elle retourne un dictionnaire qui contient les clés de 
\color blue
d1
\color inherit
 absentes dans 
\color blue
d2
\color inherit
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
substract()
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
subtract(d1, d2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res =
\color brown
 Dict
\color inherit
() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 key 
\color green
in
\color inherit
 keys(d1)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 key ∉ keys(d2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res[key] = nothing
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

res
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans tous ces dictionnaires, les valeurs sont 
\color blue
nothing
\color inherit
 parce qu'elles ne sont jamais utilisées.
 Par conséquent, nous gaspillons un peu d'espace de stockage.
\end_layout

\begin_layout Standard
Julia propose un autre type interne appelé un 
\begin_inset Quotes cld
\end_inset


\emph on
set
\emph default

\begin_inset Quotes crd
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
set
\end_layout

\end_inset

 Ce type se comporte comme un ensemble de clés de dictionnaire sans valeurs.
 L'ajout d'éléments à un 
\emph on
set
\emph default
 est rapide, tout comme la vérification d'appartenance à un 
\emph on
set
\emph default
.
 Les
\emph on
 sets
\emph default
 fournissent des fonctions et des opérateurs pour yeffectuer des opérations
 courantes.
\end_layout

\begin_layout Standard
Par exemple, la soustraction d'un 
\emph on
set
\emph default
 est disponible sous la forme d'une fonction appelée 
\color blue
setdiff
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
setdiff()
\end_layout

\end_inset

 Nous pouvons donc réécrire la soustraction comme suit:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
subtract(d1, d2)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

setdiff(d1, d2)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le résultat est un 
\emph on
set 
\emph default
au lieu d'un dictionnaire.
\end_layout

\begin_layout Standard
Certains des exercices de ce livre peuvent être réécrits de manière concise
 et efficace avec des 
\emph on
sets
\emph default
.
 Par exemple, voici une solution pour 
\color blue
hasduplicates
\color inherit
, de l'exercice 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-11-15-7-hasduplicates1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 qui utilise un dictionnaire: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
hasduplicates
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
hasduplicates(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = Dict() 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 x
\color green
 in
\color inherit
 t
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 x ∈ d
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return true 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d[x] = nothing 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end 
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

false
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\size default
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsqu'un élément apparaît pour la première fois, il est ajouté au dictionnaire.
 Si le même élément apparaît à nouveau, la fonction retourne 
\color blue
true
\color inherit
.
\end_layout

\begin_layout Standard
En utilisant des 
\emph on
sets
\emph default
, la même fonction peut être réécrite comme ceci:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 hasduplicates(t)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

length(
\color brown
Set
\color inherit
(t)) < length(t)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Un élément ne peut apparaître qu'une seule fois dans un 
\emph on
set
\emph default
.
 Donc si un élément apparaît plus d'une fois dans 
\color blue
t
\color inherit
, le 
\emph on
set
\emph default
 sera plus petit que 
\color blue
t
\color inherit
.
 S'il n'y a pas de répétitions d'élément(s), l'ensemble aura la même taille
 que 
\color blue
t
\color inherit
.
\end_layout

\begin_layout Standard
Nous pouvons également utiliser des 
\emph on
sets
\emph default
 pour faire certains des exercices du chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-Jeux-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Par exemple, voici une version d'
\color blue
useonly
\color inherit
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-10-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) avec une boucle: 
\begin_inset Index ind
status open

\begin_layout Plain Layout
useonly
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function 
\color inherit
useonly(word, available)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
for
\color inherit
 letter 
\color green
in
\color inherit
 word
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
if
\color inherit
 letter ∉ available
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
return false
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Plain Layout

\size small
\color green
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

true
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\color blue
useonly
\color inherit
 vérifie si toutes les lettres contenues dans 
\color blue
word
\color inherit
 se trouvent dans 
\color blue
available
\color inherit
.
 Cette fonction peut être réécrite ainsi:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
function 
\color inherit
usesonly(word, available)
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color brown
Set
\color inherit
(word) 
\begin_inset Formula $\subseteq$
\end_inset

 
\color brown
Set
\color inherit
(available)
\end_layout

\begin_layout Plain Layout

\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\begin_inset Formula $\subseteq$
\end_inset

 (
\color blue

\backslash
subseteq TAB
\color inherit
)
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
\begin_inset Formula $\subseteq$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\backslash
subseteq
\end_layout

\end_inset

 vérifie si un 
\emph on
set
\emph default
 est inclus dans un autre 
\emph on
set
\emph default
, en ce compris la possibilité qu'ils soient égaux.
 Dans ce dernier cas, cela signifie que toutes les lettres de 
\color blue
word 
\color inherit
apparaissent dans 
\color blue
available
\color inherit
.
 
\end_layout

\begin_layout Subsection
Exercice
\end_layout

\begin_layout Standard
Réécrivez la fonction 
\color blue
avoids
\color inherit
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recherche-10-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

) avec les 
\emph on
sets
\emph default
.
\begin_inset Index ind
status open

\begin_layout Plain Layout
avoids
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mathématiques
\end_layout

\begin_layout Standard
Les nombres complexes sont pris en charge par Julia.
 La constante globale 
\color blue
im
\color inherit
 est liée au nombre complexe 
\color blue
i 
\color black
(avec
\color inherit
 
\begin_inset Formula $\mathrm{i}^{2}=-1$
\end_inset

).
\begin_inset Index idx
status open

\begin_layout Plain Layout
nombre complexe
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'identité d'Euler est vérifiable, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Euler, identité
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\color inherit
 
\begin_inset Formula $e$
\end_inset

^(im*
\begin_inset Formula $\pi$
\end_inset

)+1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le symbole 
\begin_inset Formula $e$
\end_inset

 (
\color blue

\backslash
euler TAB
\color inherit
) est la base des logarithmes naturels.
 
\end_layout

\begin_layout Standard
Illustrons le caractère complexe des fonctions trigonométriques: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cos()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\cos x=\frac{e^{\mathrm{i}x}+e^{-\mathrm{i}x}}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
Nous pouvons tester cette formule pour différentes valeurs de x.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 x = 0
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

0.1
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color gray
0.0
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color gray
0.1
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color gray
6.2
\end_layout

\begin_layout Plain Layout

\color green
julia>
\color inherit
 cos.(x) == 0.5*(
\begin_inset Formula $e$
\end_inset

.^(im*x)+
\begin_inset Formula $e$
\end_inset

.^(-im*x))
\end_layout

\begin_layout Plain Layout

\color lightgray
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ceci est un autre exemple d'application de l'opérateur 
\begin_inset Quotes cld
\end_inset

point
\begin_inset Quotes crd
\end_inset

.
 Julia permet également de juxtaposer des littéraux numériques avec des
 identificateurs sous forme de coefficients comme dans 
\color blue
2π
\color inherit
.
\end_layout

\begin_layout Section
Chaînes
\end_layout

\begin_layout Standard
Dans les chapitres 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Chaînes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-Jeux-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons mené quelques recherches élémentaires dans les objets de type
 String.
 Cependant, Julia gère des expressions rationnelles compatibles avec le
 langage Perl.
 Ceci facilite la recherche de motifs complexes dans les chaînes de caractères.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaînes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
usesonly
\color inherit
 peut être mise en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
oe{}
\end_layout

\end_inset

uvre comme une expression rationnelle:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Regex()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
expression rationnelle
\end_layout

\end_inset

 
\begin_inset Index ind
status open

\begin_layout Plain Layout
useonly
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 usesonly(word, available)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r = 
\color brown
Regex
\color inherit
(
\color brown
"[^
\color magenta
$
\color inherit
(available)
\color brown
]"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

occursin(r, word)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'expression régulière recherche un caractère qui n'est pas dans la chaîne
 
\color blue
available
\color inherit
 et 
\color blue
occursin
\color inherit
 retourne 
\color blue
true
\color inherit
 si le motif est trouvé dans le mot.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 usesonly(
\color brown
"bonbon"
\color inherit
, 
\color brown
"bno"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
true
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 usesonly(
\color brown
"bonbons"
\color inherit
, 
\color brown
"bno"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
false
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les expressions rationnelles peuvent également être construites comme des
 chaînes de caractères non normalisées préfixées par un 
\color blue
r
\color inherit
: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 match(
\color magenta
r"[^bno]"
\color inherit
, 
\color brown
"bonbon"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 m = match(
\color magenta
r"[^bno]"
\color inherit
, 
\color brown
"bonbons"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
RegexMatch("s")
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Dans ce cas, l'interpolation de chaînes n'est pas autorisée.
 La fonction 
\color blue
match
\color inherit
 ne retourne rien si le motif (une commande) n'est pas trouvé et retourne
 un objet regexmatch dans le cas contraire.
\end_layout

\begin_layout Standard
Nous pouvons extraire les informations suivantes d'un objet regexmatch:
\begin_inset Index idx
status open

\begin_layout Plain Layout
match()
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
la sous-chaîne entière correspondant: 
\color blue
m.match
\end_layout

\begin_layout Itemize
les sous-chaînes capturées comme un tableau de chaînes de caractères: 
\color blue
m.captu\SpecialChar softhyphen
res
\end_layout

\begin_layout Itemize
le décalage auquel commence l'ensemble de la correspondance: 
\color blue
m.offset
\end_layout

\begin_layout Itemize
les décalages des sous-chaînes capturées sous la forme d'un tableau: 
\color blue
m.offsets 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
m.match
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"s"
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 m.offset
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
7
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les expressions rationnelles constituent un outil très puissant.
 La 
\begin_inset CommandInset href
LatexCommand href
name "page de manuel de Perl"
target "http://bribes.org/perl/docfr/"
literal "false"

\end_inset

 fournit tous les détails pour mener à bien des recherches très poussées,
 voire sophistiquées.
\end_layout

\begin_layout Section
Tableaux
\end_layout

\begin_layout Standard
Dans le chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Tableaux"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons utilisé l'objet Array (tableau
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau
\end_layout

\end_inset

) comme conteneur unidimensionnel avec des indices permettant de retrouver
 ses éléments.
 Julia manipule aussi les tableaux multidimensionnels.
\end_layout

\begin_layout Standard
Créons une matrice
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrice
\end_layout

\end_inset

 de 2 par 3 contenant des zéros: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau bidimensionnel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 z = zeros(
\color brown
Float64
\color inherit
, 2, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2×3 Array{Float64,2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 typeof(z)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
Array{Float64,2}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le type de cette matrice est un tableau à 2 dimensions contenant des nombres
 à virgule flottante.
\end_layout

\begin_layout Standard
La fonction 
\color blue
size
\color inherit
 renvoie un tuple décrivant le nombre d'éléments dans chaque dimension:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
size()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 size(z)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
(2, 3)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\color blue
ones
\color inherit
 construit une matrice avec des éléments de valeur 1: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 s = ones(String, 1, 3)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1×3 Array{String,2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
"
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 "
\begin_inset space ~
\end_inset

"
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 "
\begin_inset space ~
\end_inset

"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'élément unitaire 
\begin_inset Quotes cld
\end_inset

chaîne
\begin_inset Quotes crd
\end_inset

 représente une chaîne vide.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
theoremstyle{definition}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tip3}
\end_layout

\begin_layout Plain Layout


\backslash
textcolor{blue}{s} n'est pas un tableau unidimensionnel: 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\backslash
begin{tabularx}{0.95
\backslash
textwidth} { 
\end_layout

\begin_layout Plain Layout

    | >{
\backslash
raggedright
\backslash
arraybackslash}X  }  
\end_layout

\begin_layout Plain Layout

   
\backslash
textcolor{green}{
\backslash
small{julia>}} 
\backslash
small{s == [
\backslash
textcolor{brown}{
\backslash
textquotedbl 
\backslash
textquotedbl}, 
\backslash
textcolor{brown}{
\backslash
textquotedbl 
\backslash
textquotedbl}, 
\backslash
textcolor{brown}{
\backslash
textquotedbl 
\backslash
textquotedbl}]} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

    
\backslash
textcolor{lightgray}{
\backslash
small{false}} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{tabularx}
\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent
\backslash
textcolor{blue}{s} est une matrice à une ligne, tandis que [
\begin_inset Quotes cld
\end_inset


\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes crd
\end_inset


\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes crd
\end_inset


\begin_inset Quotes crd
\end_inset

] est une matrice à 1 
\end_layout

\begin_layout Plain Layout


\backslash
indent
\backslash
indent
\backslash
indent colonne.
\end_layout

\begin_layout Plain Layout


\backslash
end{tip3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Une matrice peut être saisie directement en utilisant un espace pour séparer
 les éléments d'une ligne et un point-virgule 
\color blue
;
\color inherit
 pour séparer les lignes: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 a = [1 2 3; 4 5 6]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2×3 Array{Int64,2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

3
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

6
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour traiter des éléments individuels, des crochets sont utilisables:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 z[1,2] = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
z[2,3] = 1
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 z
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2×3 Array{Float64,2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

1.0
\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

1.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La sélection d'un sous-groupe d'éléments peut être réalisée par segmentation:
\begin_inset Index idx
status open

\begin_layout Plain Layout
segmentation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> 
\color inherit
u = z[
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

,2
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color green
end
\color inherit
]
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2×2 Array{Float64,2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

1.0
\begin_inset space ~
\end_inset

0.0
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.0
\begin_inset space ~
\end_inset

1.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'opérateur 
\color blue
.

\color inherit
 effectue une distribution sur chaque éléments dans toutes les dimensions:
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\begin_inset Formula $e$
\end_inset

.^(im*u)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
2×2 Array{Complex{Float64},2}:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset

0.540302+0.841471im
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1.0+0.0im
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1.0+0.0im 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0.540302+0.841471im
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Interfaces
\end_layout

\begin_layout Standard
Julia tire parti de certaines interfaces
\begin_inset Index idx
status open

\begin_layout Plain Layout
interface
\end_layout

\end_inset

 informelles pour définir des comportements, c'est-à-dire des méthodes ayant
 un objectif spécifique.
 Lorsque ces méthodes sont étendues à un type, des objets de ce type peuvent
 être utilisés pour construire ces comportements.
\end_layout

\begin_layout Quotation
« 
\emph on
Si ça ressemble à un canard, si ça nage comme un canard et si ça cancane
 comme un canard, c'est un canard.

\emph default
 » 
\end_layout

\begin_layout Standard
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Un-exemple-supplémentaire"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nous avons mis en œuvre la fonction 
\color blue
fib
\color inherit
 qui retourne le 
\emph on
n
\emph default

\begin_inset script superscript

\begin_layout Plain Layout
ème
\end_layout

\end_inset

 élément de la suite de Fibonacci
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fibonacci, suite de
\end_layout

\end_inset

.
 La recherche des valeurs d'une suite constitue une des ces interfaces.
 Créons un itérateur qui retourne la suite de Fibonacci:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Base.iterate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
struct Fibonacci{T
\color darkgray
<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real}
\color inherit
 
\color green
end
\end_layout

\begin_layout Plain Layout

\size small
Fibonacci(d
\color darkgray

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
DataType
\color inherit
) = d<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
 ? Fibonacci{d}() 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 error(
\color red
"No Real type
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

"
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
Base.iterate(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Fibonacci{T}) where {T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} = (zero(T), (one(T), one(T)))
\end_layout

\begin_layout Plain Layout

\size small
Base.iterate(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Fibonacci{T}, state
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Tuple
\color inherit
{T, T}) where {T<
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown
Real
\color inherit
} = (state[1], (state[2], state[1] + state[2]))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous avons mis en œuvre un type paramétrique sans champs 
\color blue
Fibonacci
\color inherit
, un constructeur extérieur et deux méthodes 
\color blue
iterate
\color inherit
.
 La première est appelée pour initialiser l'itérateur et retourne un tuple
 composé de la première valeur (0) et d'un état.
 L'état est un tuple contenant la deuxième et la troisième valeur: 1 et
 1.
\end_layout

\begin_layout Standard
La seconde itération est appelée pour obtenir la valeur suivante de la séquence
 de Fibonacci et retourne un tuple avec comme premier élément la valeur
 suivante et comme second élément un état qui consiste en un tuple avec
 les deux valeurs suivantes.
\end_layout

\begin_layout Standard
À ce stade, nous pouvons appeler 
\color blue
Fibonacci
\color inherit
 dans une boucle 
\color blue
for
\color inherit
: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
&&
\end_layout

\end_inset


\begin_inset Index ind
status open

\begin_layout Plain Layout
iterate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
for e
\color inherit
 
\color green
in
\color inherit
 Fibonacci(
\color brown
Int64
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e
\color inherit
 > 100 && 
\color green
break
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(
\color green
e
\color inherit
, 
\color brown
"
\begin_inset space ~
\end_inset

")
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color green
 end
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
0
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

13
\begin_inset space ~
\end_inset

21
\begin_inset space ~
\end_inset

34
\begin_inset space ~
\end_inset

55
\begin_inset space ~
\end_inset

89
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Cela semble magique, mais l'explication est simple.
 Une boucle 
\color blue
for
\color inherit
 en Julia:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
for
\color inherit
 i 
\color green
in
\color inherit
 iter
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# corps de la boucle
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
est convertie en:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
next = iterate(iter)
\end_layout

\begin_layout Plain Layout

\size small
\color green
while
\color inherit
 next !== 
\color green
nothing
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(i, state) = next
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color cyan
# corps de la boucle
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

next = iterate(iter, state)
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
C'est là un très bon exemple de la façon dont une interface bien conçue
 permet à une implémentation d'utiliser toutes les fonctions disponibles
 
\emph on
via 
\emph default
cette interface.
\end_layout

\begin_layout Section
Utilitaires interactifs
\end_layout

\begin_layout Standard
Nous avons déjà rencontré le module 
\color blue
InteractiveUtils
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
InteractiveUtils
\end_layout

\end_inset


\color inherit
 dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Débogage-18-10"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 La macro 
\color magenta
@which
\color inherit
 n'est que la partie émergée de l'iceberg.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@which}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le code Julia est transformé par la bibliothèque LLVM (
\emph on
Low Level Virtual Machine
\emph default
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
LLVM
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Low Level Virtual Machine
\end_layout

\end_inset

 en code machine en plusieurs étapes.
 Nous pouvons directement visualiser la sortie de chaque étape.
\end_layout

\begin_layout Standard
Donnons un exemple simple:
\begin_inset Index ind
status open

\begin_layout Plain Layout
squaresum()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
function
\color inherit
 squaresum(a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64
\color inherit
, b
\color brown

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64
\color inherit
)
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a^2 + b^2
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La première étape consiste à examiner le code de bas niveau: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
code bas niveau
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
using InteractiveUtils
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia> using
\color inherit
 InteractiveUtils
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@code_lowered
\color inherit
 squaresum(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
CodeInfo(
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1 ─ %1 = (Core.apply_type)(Base.Val, 2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %2 = (%1)() 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %3 = (Base.literal_pow)(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

^, a, %2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %4 = (Core.apply_type)(Base.Val, 2) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %5 = (%4)() 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %6 = (Base.literal_pow)(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

^, b, %5) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %7 = %3 + %6 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
└── 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return %7 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La macro 
\color violet
@code_lowered
\color inherit
 retourne sous forme d'un tableau une représentation intermédiaire du code
 utilisé par le compilateur pour produire du code optimisé.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@code
\backslash
_lowered}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'étape suivante ajoute des informations sur le type:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@code
\backslash
_typed}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@code_typed
\color inherit
 squaresum(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
CodeInfo( 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
1─ %1 = (Base.mul_float)(a, a)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %2 = (Base.mul_float)(b, b)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
│ %3 = (Base.add_float)(%1, %2)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

Float64
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
└── 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return %3 ) => Float64
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Nous observons que le type de résultats intermédiaires et la valeur de retour
 sont correctement déduits.
\end_layout

\begin_layout Standard
Cette représentation du code est transformée en code LLVM: 
\begin_inset Index idx
status open

\begin_layout Plain Layout
LLVM
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@code
\backslash
_llvm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@code_llvm
\color inherit
 squaresum(3.0, 4.0) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; @ none
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2 within `squaresum' 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
define double @julia_squaresum_14821(double, double) {
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
top:
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; ┌ @ intfuncs.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

243 within `literal_pow' 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; │┌ @ float.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

399 within `*'
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

%2 = fmul double %0, %0 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

%3 = fmul double %1, %1 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; └└ 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; ┌ @ float.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

395 within `+'
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

%4 = fadd double %2, %3 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; └ 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ret double %4 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
}
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Finalement, le 
\emph on
code machine
\emph default
 est produit:
\begin_inset Index idx
status open

\begin_layout Plain Layout
code machine
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@code
\backslash
_native}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@code_native
\color inherit
 squaresum(3.0, 4.0)
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

.section __TEXT,__text,regular,pure_instructions
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; ┌ @ none:2 within `squaresum' 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; │┌ @ intfuncs.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

243 within `literal_pow' 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; ││┌ @ none
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

2 within `*'
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

vmulsd %xmm0, %xmm0, %xmm0 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

vmulsd %xmm1, %xmm1, %xmm1 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; │└└ 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; │┌ @ float.jl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

395 within `+' 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

vaddsd %xmm1, %xmm0, %xmm0 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; │└ retl 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

nopl
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(%eax) 
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
; └
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Débogage
\end_layout

\begin_layout Standard
Les macros 
\color blue
Logging
\color inherit
 fournissent une alternative aux canevas avec des déclarations d'affichage:
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Logging
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@warn}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@warn
\color inherit
 
\color red
"Abandon printf debugging, all ye who enter here!"
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
┌ Warning: Abandon printf debugging, all ye who enter here!
\end_layout

\begin_layout Plain Layout

\size small
\color lightgray
└ @ Main REPL[1]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Les déclarations de débogage ne doivent pas être retirées du code.
 Par exemple, contrairement à 
\color blue
@warn
\color inherit
 ci-dessus, le code:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@debug}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color violet
@debug
\color inherit
 
\color red
"The sum of some values
\color inherit
 
\color brown
$
\color inherit
(sum(rand(100)))
\color red
"
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
ne produira, par défaut, aucun résultat.
 Dans ce cas, 
\color blue
sum(rand(100))
\color inherit
 ne sera jamais évaluée à moins que la 
\emph on
journalisation du débogage
\emph default
 ne soit activée.
\begin_inset Index idx
status open

\begin_layout Plain Layout
journalisation, débogage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le niveau de journalisation peut être sélectionné par une variable d'environneme
nt 
\color blue
JULIA_DEBUG
\color inherit
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
JULIA_DEBUG
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
$ JULIA_DEBUG=all julia -e '@debug "The sum of some values $(sum(rand(100)))"'
 
\end_layout

\begin_layout Plain Layout

\size small
┌ Debug
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 The sum of some values 47.116520814555024 
\end_layout

\begin_layout Plain Layout

\size small
└ @ Main none
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
En l'occurrence, nous avons utilisé 
\color blue
all
\color inherit
 pour extraire toutes les informations de débogage.
 Cependant, il est possible de ne produire que les informations associées
 à un fichier ou à un module spécifique.
\end_layout

\begin_layout Section
Glossaire
\end_layout

\begin_layout Description
regex expression rationnelle, une séquence de caractères qui définit un
 modèle de recherche, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
regex
\end_layout

\end_inset


\end_layout

\begin_layout Description
matrice tableau à deux dimensions, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrice
\end_layout

\end_inset


\end_layout

\begin_layout Description
représentation
\begin_inset space ~
\end_inset

intermédiaire structure de données utilisée en interne par un compilateur
 pour représenter le code source.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
représentation intermédiaire
\end_layout

\end_inset


\end_layout

\begin_layout Description
code
\begin_inset space ~
\end_inset

machine instructions qui peuvent être exécutées directement par l'unité
 centrale d'un ordinateur,
\begin_inset Index idx
status open

\begin_layout Plain Layout
code machine
\end_layout

\end_inset


\end_layout

\begin_layout Description
enregistrement
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

débogage stockage des messages de débogage dans un journal.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Débogage"

\end_inset

Débogage
\end_layout

\begin_layout Standard
Lors du débogage, il est nécessaire de distinguer les différents types d'erreurs
 afin de les repérer rapidement:
\begin_inset Index idx
status open

\begin_layout Plain Layout
debogage@débogage
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
les erreurs de syntaxe sont découvertes par le compilateur lors de la traduction
 à la volée du code source en code compilé.
 Elles indiquent une formulation erronée au sein de la structure du programme.
 Il en va ainsi, par exemple, de l'omission du mot-clé 
\color blue
end
\color inherit
 à la fin d'un bloc de fonction qui engendre le message d'erreur quelque
 peu redondant: 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 incomplete
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 function requires end
\color inherit
.
\end_layout

\begin_layout Itemize
les erreurs d'exécution sont produites par le compilateur si un dysfonctionnemen
t apparaît au cours de l'exécution d'un programme.
 La plupart des messages d'erreur d'exécution contiennent des informations
 sur la localisation de l'erreur et les fonctions en cours d'exécution.
 Par exemple, une récursion infinie provoque une erreur d'exécution telle
 que 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 StackOverflowError
\color inherit
.
\end_layout

\begin_layout Itemize
les erreurs sémantiques sont liées à un programme qui s'exécute sans produire
 de messages d'erreur mais qui ne fait pas ce à quoi il est destiné.
 À titre d'exemple, une expression peut ne pas être évaluée dans l'ordre
 prévu, ce qui donne un résultat incorrect.
\end_layout

\begin_layout Standard
La première étape du débogage consiste à déterminer le type d'erreur auquel
 on est confron\SpecialChar softhyphen
té.
 Bien que les sections suivantes soient organisées par type d'erreur, certaines
 techniques sont applicables dans plus d'une situation.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
StackOverflowError
\end_layout

\end_inset


\end_layout

\begin_layout Section
Erreurs de syntaxe
\end_layout

\begin_layout Standard
Les erreurs de syntaxe sont généralement faciles à corriger dès qu'on a
 compris de quoi il s'agit.
 Malheureusement, d'une manière générale, les messages d'erreur ne sont
 pas très explicites.
 Les messages les plus courants sont du type 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 incomplete
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 premature end of input
\color inherit
 et 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 syntax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 unexpected "=" 
\color inherit
.
 Aucune des deux formulations n'est véritablement instructive.
\begin_inset Index idx
status open

\begin_layout Plain Layout
syntaxe, erreur de
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
erreur de syntaxe
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En revanche, le message indique l'endroit du programme où le problème s'est
 produit.
 En fait, il indique où Julia a remarqué un problème, ce qui n'est pas nécessair
ement l'endroit exact où se situe l'erreur.
 Il n'est pas rare que celle-ci se trouve en amont de l'emplacement indiqué
 par le message d'erreur (souvent sur la ligne précédente).
\end_layout

\begin_layout Standard
Si vous construisez un programme de manière incrémentale, vous devriez avoir
 une bonne idée de l'endroit où se trouve l'erreur.
 Elle se cache soit dans la dernière ligne soit dans le dernier bloc ajouté.
\end_layout

\begin_layout Standard
Si vous copiez le code depuis un livre ou une page de l'internet, commencez
 par comparer très soigneusement votre code à celui contenu dans la source.
 Vérifiez chaque caractère.
 En même temps, n'oubliez pas que la source peut elle-même contenir un code
 erroné.
 Si bien que si vous voyez quelque chose qui ressemble à une erreur de syntaxe,
 il peut s'agir de ce dernier cas de figure.
\end_layout

\begin_layout Standard
Voici quelques moyens d'éviter les erreurs de syntaxe les plus courantes:
\end_layout

\begin_layout Enumerate
assurez-vous que vous n'employez pas un mot-clé de Julia pour un nom de
 variable,
\end_layout

\begin_layout Enumerate
vérifiez que le mot-clé 
\color blue
end 
\color inherit
clôture chaque déclaration composée, y compris les blocs 
\color blue
for
\color inherit
, 
\color blue
while
\color inherit
, 
\color blue
if
\color inherit
 et les blocs de fonction,
\begin_inset Index idx
status open

\begin_layout Plain Layout
end
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
assurez-vous que toutes les chaînes de caractères du code sont entre guillemets
 et que tous les guillemets sont des "droits" et non ''bouclés'',
\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemets droits
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
guillemets bouclés
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
si vous avez écrit des chaînes multilignes avec des guillemets triples,
 assurez-vous que vous avez clôturé la chaîne correctement.
 Une chaîne inachevée peut provoquer une erreur 
\begin_inset Quotes cld
\end_inset


\emph on
invalid token
\emph default
 
\begin_inset Quotes crd
\end_inset

 à la fin d'un programme.
 En outre, elle peut traiter la partie suivante du programme comme une chaîne
 jusqu'à ce qu'elle parvienne à la chaîne suivante.
 Dans ce dernier cas, il se peut que la compilation ne produise aucun message
 d'erreur,
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne multiligne
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
invalid token
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
un opérateur d'ouverture sans son vis-à-vis – 
\color blue
(
\color inherit
, 
\color blue
{
\color inherit
, ou 
\color blue
[
\color inherit
 – amène Julia à considérer la ligne suivante comme appartenant à la déclaration
 courante.
 En général, une erreur se produit presque immédiatement à la ligne suivante,
\end_layout

\begin_layout Enumerate
vérifiez le classique 
\color blue
=
\color inherit
 au lieu de 
\color blue
== 
\color inherit
à l'intérieur d'un test conditionnel, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
si des caractères non-ASCII
\begin_inset Index idx
status open

\begin_layout Plain Layout
non-ASCII, caractère
\end_layout

\end_inset

 se trouvent dans le code (y compris des chaînes de caractères et des commentair
es), cela peut poser un problème bien que Julia gère généralement les caractères
 non-ASCII.
 Soyez attentif si vous collez du texte provenant d'une page web ou d'une
 autre source.
\end_layout

\begin_layout Standard
Si rien de ceci ne fonctionne, passez à la section suivante.
\end_layout

\begin_layout Subsection
Je continue à faire des changements mais sans effet
\end_layout

\begin_layout Standard
Si le REPL
\begin_inset Index idx
status open

\begin_layout Plain Layout
REPL
\end_layout

\end_inset

 indique qu'il y a une erreur et que vous ne la détectez pas, c'est peut-être
 parce que vous ne considérez pas le même code que le REPL.
 Vérifiez votre environnement de programmation afin de déterminer si le
 programme que vous éditez est bien celui que Julia tente d'exécuter.
\end_layout

\begin_layout Standard
Si vous n'en êtes pas sûr, essayez d'introduire une erreur de syntaxe évidente
 et délibérée au début du programme.
 Exécutez-le à nouveau.
 Dans le cas où le REPL ne trouve pas la nouvelle erreur, vous pouvez conclure
 que vous n'exécutez pas le nouveau code.
\end_layout

\begin_layout Standard
Il y a quelques coupables potentiels:
\end_layout

\begin_layout Itemize
vous avez édité le fichier et oublié de sauvegarder les modifications avant
 de l'exécuter à nouveau.
 Certains environnements de programmation le font pour vous, d'autres non,
\end_layout

\begin_layout Itemize
vous avez changé le nom du fichier, cependant vous utilisez toujours l'ancien
 nom,
\end_layout

\begin_layout Itemize
quelque chose dans votre environnement de développement est mal configuré,
\end_layout

\begin_layout Itemize
si vous écrivez un module et que vous l'utilisez, assurez-vous de ne pas
 donner à votre module le même nom qu'un des modules standard de Julia,
\end_layout

\begin_layout Itemize
si vous employez le mot-clé 
\color blue
using
\color inherit
 pour importer un module, n'oubliez pas qu'il est impératif de redémarrer
 le REPL lorsque vous modifiez le code du module.
 Si vous importez à nouveau le module, il ne se passe rien.
\begin_inset Index idx
status open

\begin_layout Plain Layout
using
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si vous êtes bloqué et que vous ne pouvez pas comprendre ce qui se produit,
 une approche consiste à recommencer avec un nouveau programme comme 
\begin_inset Quotes cld
\end_inset

Hello, World!
\begin_inset Quotes crd
\end_inset

 et à vous assurer que vous pouvez faire fonctionner un programme opérationnel
 connu.
 Ensuite, ajoutez progressivement les éléments du programme d'origine au
 nouveau programme.
\end_layout

\begin_layout Section
Erreurs d'exécution
\end_layout

\begin_layout Standard
Dès que votre programme est syntaxiquement correct, Julia peut le lire et
 
\emph on
a minima
\emph default
 commencer à l'exécuter.
 Qu'est-ce qui alors pourrait dysfonctionner?
\begin_inset Index idx
status open

\begin_layout Plain Layout
erreur d'exécution
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mon programme ne fait absolument rien
\end_layout

\begin_layout Standard
Ce problème est assez fréquent lorsque votre fichier se compose de fonctions
 et de classes sans invoquer réellement une fonction pour en lancer l'exécution.
 Cela peut être intentionnel si vous prévoyez d'importer ce module uniquement
 pour fournir des classes et des fonctions.
\end_layout

\begin_layout Standard
Si ce n'est pas le cas, assurez-vous qu'un appel de fonction est bien présent
 dans le programme.
 Ensuite, vérifiez que le flux d'exécution l'atteint bel et bien (voir le
 paragraphe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Flux-d'exécution"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Mon programme est 
\begin_inset Quotes cld
\end_inset

suspendu
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Si un programme s'arrête et semble ne rien faire, il est 
\begin_inset Quotes cld
\end_inset

suspendu
\begin_inset Quotes crd
\end_inset

.
 Souvent, cela signifie qu'il est engagé dans une boucle ou une récursion
 infinies:
\begin_inset Index idx
status open

\begin_layout Plain Layout
programme suspendu
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
StackOverflowError
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
si vous soupçonnez qu'une boucle particulière est à l'origine du problème,
 ajoutez un message d'affichage immédiatement avant la boucle qui stipule
 
\begin_inset Quotes cld
\end_inset

entrer dans la boucle
\begin_inset Quotes crd
\end_inset

 et un autre immédiatement après tel que 
\begin_inset Quotes cld
\end_inset

sortir de la boucle
\begin_inset Quotes crd
\end_inset

.
\begin_inset Newline newline
\end_inset

Exécutez à nouveau le programme.
 Si vous obtenez le premier message et non le second, vous êtes confronté
 à une boucle infinie.
 Passez au paragraphe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Boucle-infinie"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ci-dessous,
\end_layout

\begin_layout Itemize
la plupart du temps, une récursion infinie entraînera l'exécution du programme
 pendant un certain temps puis, produira une 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Error Stack\SpecialChar softhyphen
OverflowError
\color inherit
.
 Si c'est le cas, passez au paragraphe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Récursion-infinie"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ci-dessous.
\begin_inset Newline newline
\end_inset

Si vous n'obtenez pas cette erreur quoique vous soupçonniez un problème
 avec une méthode ou une fonction récursive, vous pouvez toujours utiliser
 les techniques du paragraphe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Récursion-infinie"
plural "false"
caps "false"
noprefix "false"

\end_inset

,
\end_layout

\begin_layout Itemize
si aucune de ces étapes n'apporte de solution, commencez à tester d'autres
 boucles ainsi que d'autres fonctions et méthodes récursives,
\end_layout

\begin_layout Itemize
en cas d'échec, il est possible que vous ne compreniez pas le flux d'exécution
\begin_inset Index idx
status open

\begin_layout Plain Layout
flux d'exécution
\end_layout

\end_inset

 de votre programme.
 Rendez-vous au paragraphe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Flux-d'exécution"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Boucle-infinie"

\end_inset

Boucle infinie
\end_layout

\begin_layout Standard
Si vous pressentez une boucle infinie
\begin_inset Index idx
status open

\begin_layout Plain Layout
boucle infinie
\end_layout

\end_inset

 et que vous pensez avoir identifié la boucle responsable du problème, ajoutez
 une déclaration d'affichage à la fin de la boucle, qui communique les valeurs
 des variables de la condition et la valeur de la condition.
\end_layout

\begin_layout Standard
Par exemple:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{
\begin_inset Quotes cld
\end_inset

@debug}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
while
\color inherit
 x > 0 && y < 0 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# modifier x 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# modifier y 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@debug
\color inherit
 
\color brown
"variables"
\color inherit
 x y 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
@debug
\color inherit
 
\color brown
"condition"
\color inherit
 
\end_layout

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x > 0 && y < 0 
\end_layout

\begin_layout Plain Layout

\size small
\color green
end
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Maintenant, lorsque vous exécutez le programme en mode de débogage, vous
 verrez la valeur des variables et la condition pour chaque passage dans
 la boucle.
 Au dernier passage, la condition devrait être fausse.
 Si la boucle continue, vous pourrez visualiser les valeurs de 
\color blue
x
\color inherit
 ainsi que d'
\color blue
y
\color inherit
, et vous comprendrez peut-être pourquoi elles ne sont pas mises à jour
 correctement.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Récursion-infinie"

\end_inset

Récursion infinie
\end_layout

\begin_layout Standard
La plupart du temps, une récursion infinie amène un programme à calculer
 pendant un certain temps pour produire une 
\color blue
ERROR
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 LoadError
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string:
\end_layout

\end_inset

 Error StackOverflowError
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion@récursion infinie
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
StackOverflowError
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si vous pensez qu'une fonction provoque une récursion infinie, contrôlez
 la présence d'un cas de base
\begin_inset Index idx
status open

\begin_layout Plain Layout
cas de base
\end_layout

\end_inset

.
 Il devrait y avoir une condition amenant la fonction à effectuer un retour
 sans exécuter une invocation récursive.
 Si ce n'est pas le cas, vous devez repenser l'algorithme et identifier
 un cas de base.
\end_layout

\begin_layout Standard
Si un cas de base existe mais que le programme ne semble pas l'atteindre,
 ajoutez une instruction
\color blue
 
\color black
d'affichage
\color inherit
 au début de la fonction, qui indique les paramètres.
 À présent, lorsque vous exécutez le programme, vous verrez quelques lignes
 de sortie chaque fois que la fonction est invoquée et vous pourrez analyser
 les valeurs des paramètres.
 Si les paramètres ne se déplacent pas vers le cas de base, vous aurez une
 idée des raisons pour lesquelles il en va ainsi.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Flux-d'exécution"

\end_inset

Flux d'exécution
\end_layout

\begin_layout Standard
Si vous n'êtes pas sûr de la manière dont le flux d'exécution percole dans
 votre programme, ajoutez un message au début de chaque fonction comme 
\begin_inset Quotes cld
\end_inset

entrer dans la fonction 
\emph on
unetelle
\emph default

\begin_inset Quotes crd
\end_inset

, où 
\emph on
unetelle
\emph default
 est le nom de la fonction.
\begin_inset Index idx
status open

\begin_layout Plain Layout
flux d'exécution
\end_layout

\end_inset


\end_layout

\begin_layout Standard
À ce stade, lorsque vous exécutez le programme, celui-ci affichera une trace
 de chaque fonction au fur et à mesure qu'elle sera invoquée.
\end_layout

\begin_layout Subsection
Quand j'exécute mon programme, j'obtiens une exception
\end_layout

\begin_layout Standard
Si quelque chose capote pendant l'exécution, Julia affiche un message qui
 comprend le nom de l'exception, la ligne du programme où le problème a
 surgi et une trace de pile (
\emph on
stacktrace
\emph default
).
\begin_inset Index idx
status open

\begin_layout Plain Layout
exception
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
trace de pile
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
stacktrace
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La trace de pile identifie la fonction en cours d'exécution, puis la fonction
 qui l'a appelée, celle qui à son tour a appelé cette dernière, et ainsi
 de suite.
 En d'autres termes, elle retrace la séquence des appels de fonction qui
 ont conduit à la situation à laquelle vous êtes confronté, y compris le
 numéro de ligne de votre fichier où chaque appel s'est produit.
\end_layout

\begin_layout Standard
La première étape consiste à examiner l'endroit du programme où l'erreur
 s'est produite et à déterminer si vous pouvez comprendre ce qui s'est passé.
 Il s'agit là de certaines des erreurs d'exécution les plus courantes:
\end_layout

\begin_layout Description
ArgumentError un des arguments à un appel de fonction n'est pas dans l'état
 attendu,
\begin_inset Index idx
status open

\begin_layout Plain Layout
ArgumentError
\end_layout

\end_inset


\end_layout

\begin_layout Description
BoundsError une opération sur les indices dans un tableau a tenté d'accéder
 à un élément hors limites,
\begin_inset Index idx
status open

\begin_layout Plain Layout
BoundsError
\end_layout

\end_inset


\end_layout

\begin_layout Description
DomainError l'argument d'une fonction ou d'un constructeur est en dehors
 du domaine de validité,
\begin_inset Index idx
status open

\begin_layout Plain Layout
DomainError
\end_layout

\end_inset


\end_layout

\begin_layout Description
DivideError une division entière a été tentée avec une valeur de dénominateur
 égale à 0,
\begin_inset Index idx
status open

\begin_layout Plain Layout
DivideError
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
EOFError il n'y avait plus de données disponibles à lire à partir d'un fichier
 ou d'un flux,
\begin_inset Index idx
status open

\begin_layout Plain Layout
EOFError
\end_layout

\end_inset


\end_layout

\begin_layout Description
InexactError ne peut pas exactement se convertir à un type, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
InexactError
\end_layout

\end_inset


\end_layout

\begin_layout Description
KeyError une opération d'indexation dans un objet 
\color blue
AbstractDict
\color inherit
 (
\color blue
Dict
\color inherit
) ou 
\color blue
Set
\color inherit
 a tenté d'accéder ou de supprimer un élément inexistant,
\begin_inset Index idx
status open

\begin_layout Plain Layout
KeyError
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Set
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
AbstractDict()
\end_layout

\end_inset


\end_layout

\begin_layout Description
MethodError une méthode avec la signature requise n'existe pas dans la fonction
 générique donnée.
 Alternativement, il n'existe pas de méthode unique plus spécifique,
\begin_inset Index idx
status open

\begin_layout Plain Layout
MethodError
\end_layout

\end_inset


\end_layout

\begin_layout Description
OutOfMemoryError une opération a alloué trop de mémoire pour que le système
 ou le récupérateur de mémoire puisse la gérer correctement,
\begin_inset Index idx
status open

\begin_layout Plain Layout
OutOfMemoryError
\end_layout

\end_inset


\end_layout

\begin_layout Description
OverflowError le résultat d'une expression est trop grand pour le type spécifié
 et provoque un débordement,
\begin_inset Index idx
status open

\begin_layout Plain Layout
OverflowError
\end_layout

\end_inset


\end_layout

\begin_layout Description
StackOverflowError un appel de fonction tente d'utiliser plus d'espace que
 celui disponible dans la pile d'appels.
 Cela se produit généralement lorsqu'un appel est répété à l'infini.
\begin_inset Index idx
status open

\begin_layout Plain Layout
StackOverflowError
\end_layout

\end_inset


\end_layout

\begin_layout Description
StringIndexError Une erreur s'est produite lors de la tentative d'accès
 à un indice de chaîne invalide,
\begin_inset Index idx
status open

\begin_layout Plain Layout
StringIndexError
\end_layout

\end_inset


\end_layout

\begin_layout Description
SystemError un appel système a échoué avec un code d'erreur, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
SystemError
\end_layout

\end_inset


\end_layout

\begin_layout Description
TypeError erreur d'assertion de type, ou erreur produite lors de l'appel
 d'une fonction intégrée avec un type d'argument incorrect,
\begin_inset Index idx
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset


\end_layout

\begin_layout Description
UndefVarError un symbole dans l'environnement en cours n'est pas défini.
\begin_inset Index idx
status open

\begin_layout Plain Layout
UndefVarError
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
J'ai ajouté beaucoup de déclarations d'affichage; je suis inondé de sorties
\end_layout

\begin_layout Standard
L'utilisation intensive des instructions d'affichage pour le débogage se
 traduit régulièrement en une avalanche de messages.
 Deux façons d'y remédier: simplifier la sortie ou simplifier le programme.
\begin_inset Index idx
status open

\begin_layout Plain Layout
declaration@déclaration d'affichage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour simplifier la sortie, il est pertinent de supprimer ou commenter les
 déclarations d'affichage qui n'apportent pas d'aide concrètes, les combiner
 (le cas échéant) ou encore, formater la sortie de manière à être plus facile
 à interpréter.
\end_layout

\begin_layout Standard
Pour simplifier un programme, il existe plusieurs approches.
 Tout d'abord, réduisez le problème sur lequel le programme travaille.
 Par exemple, si vous traiter une liste, testez une liste courte.
 Si le programme capte diverses données de l'utilisateur, donnez-lui l'informati
on la plus élémentaire qui cause le problème.
\end_layout

\begin_layout Standard
Ensuite, nettoyez le programme.
 Supprimez le code mort et réorganisez le programme pour le rendre aussi
 lisible que possible.
 Imaginons que le problème se situe dans une partie profondément imbriquée
 du programme.
 Essayez de réécrire cette partie avec une structure allégée.
 Si vous présumez l'implication d'une fonction de grande taille, essayez
 de la diviser en fonctions de moindre taille afin de les tester séparément.
\end_layout

\begin_layout Standard
Souvent, le processus de recherche d'un test minimal vous mène au bogue.
 Si vous trouvez qu'un programme fonctionne dans une situation mais pas
 dans une autre, cela aussi vous donne un indice.
\end_layout

\begin_layout Standard
De même, réécrire un morceau de code peut aider à débusquer des bogues malicieux.
 Si vous apportez une modification qui, selon vous, ne devrait pas affecter
 le programme alors qu'il en est ainsi, vous tenez peut-être bien un indice
 à défaut de tenir la solution.
\end_layout

\begin_layout Section
Erreurs sémantiques
\end_layout

\begin_layout Standard
Les erreurs sémantiques sont les plus difficiles à déboguer par le simple
 fait que le compilateur à la volée ne fournit aucune information.
 Vous seul savez ce que le programme est censé faire.
\begin_inset Index idx
status open

\begin_layout Plain Layout
erreur sémantique
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La première étape consiste à établir un lien entre le code du programme
 et le comportement observé.
 Il faut émettre une hypothèse concernant la manière dont le programme procède.
 Une des causes qui rendent la dépistage des erreurs sémantiques si difficile
 provient de la vitesse d'exécution des ordinateurs.
\end_layout

\begin_layout Standard
On voudrait souvent pouvoir ralentir le programme jusqu'à 
\begin_inset Quotes cld
\end_inset

vitesse humaine
\begin_inset Quotes crd
\end_inset

.
 L'insertion judicieuse de quelques instructions d'affichage est souvent
 plus fructueuse et plus rapide que la mise en place d'un débogueur, l'insertion
 et la suppression de points d'arrêt et la gestion du 
\begin_inset Quotes cld
\end_inset

pas
\begin_inset Quotes crd
\end_inset

 du programme pour converger vers l'endroit où l'erreur se produit.
\end_layout

\begin_layout Subsection
Mon programme ne fonctionne pas
\end_layout

\begin_layout Standard
Le moment est venu de se poser quelques questions:
\end_layout

\begin_layout Itemize
le programme était-il censé faire quelque chose qui semble ne pas se produire?
 Trouvez la section du code qui remplit cette fonction et vérifiez qu'il
 s'exécute au moment où vous pensez qu'il devrait procéder ainsi,
\end_layout

\begin_layout Itemize
quelque chose survient-il qui ne devrait pas se produire? Trouvez dans votre
 programme le code qui remplit cette fonction et assurez-vous qu'il s'exécute
 au moment où il ne devrait pas.
\end_layout

\begin_layout Itemize
une partie du code produit-elle un effet qui n'est pas celui auquel vous
 vous attendiez? Assurez-vous de bien comprendre le code en question, surtout
 s'il s'agit de fonctions ou de méthodes associées à d'autres modules de
 Julia.
 Lisez la documentation relative aux fonctions que vous appelez.
 Essayez-les en écrivant des cas de test simples et en vérifiant les résultats.
\end_layout

\begin_layout Standard
Pour pouvoir programmer, vous devez disposer d'un modèle mental du fonctionnemen
t des programmes.
 Si vous écrivez un programme qui n'exécute pas ce que vous attendez, souvent
 le problème ne se situe pas dans le programme mais dans votre modèle mental.
\end_layout

\begin_layout Standard
La meilleure façon de corriger votre modèle mental est de fractionner le
 programme en ses composantes (généralement les fonctions et les méthodes)
 et de tester chacune d'elles indépendamment.
 Une fois que vous avez trouvé la distorsion entre votre modèle et la réalité,
 vous êtes en mesure de résoudre le problème.
\end_layout

\begin_layout Standard
Bien entendu, vous devez construire et tester les composants au fur et à
 mesure que vous développez le programme.
 Si vous rencontrez un problème, il ne devrait y avoir qu'une petite quantité
 de nouveau code susceptible d'être incorrect.
\end_layout

\begin_layout Subsection
J'ai une expression embroussaillée qui ne fait pas ce que j'attends
\end_layout

\begin_layout Standard
L'écriture d'expressions complexes reste une bonne pratique pour autant
 qu'elles restent lisibles.
 Néanmoins, elles sont souvent difficiles à déboguer.
 En général, il est judicieux de décomposer une expression complexe en une
 série d'instructions comportant des variables temporaires.
\end_layout

\begin_layout Standard
Par exemple, l'instruction:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
addcard(game.hands[i], popcard(game.hands[findneighbor(game, i)]))
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
peut être reformulée en:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
neighbor = findneighbor(game, i)
\end_layout

\begin_layout Plain Layout

\size small
pickedcard = popcard(game.hands[neighbor])
\end_layout

\begin_layout Plain Layout

\size small
addcard(game.hands[i], pickedcard)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La version explicite est nettement plus facile à lire parce que les noms
 des variables fournissent une documentation 
\emph on
per se
\emph default
.
 Elle est aussi plus facile à déboguer car il est possible de vérifier les
 types des variables intermédiaires et d'afficher leurs valeurs.
\end_layout

\begin_layout Standard
Un autre problème susceptible de survenir avec les expressions de grande
 taille vient de l'ordre d'évaluation qui n'est peut-être pas celui auquel
 on s'attend 
\emph on
a priori
\emph default
.
 Par exemple, l'expression 
\begin_inset Formula $\frac{x}{2\pi}$
\end_inset

 pourrait être écrite en Julia comme ceci:
\begin_inset Index idx
status open

\begin_layout Plain Layout
préséance d'opérateurs
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
y = x / 2 * 
\color green
π
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Toutefois, cette formulation est erronée car la multiplication et la division
 ayant la même priorité sont évaluées de gauche à droite.
 Cette expression calcule donc 
\begin_inset Formula $\frac{x}{2}\pi$
\end_inset

.
\end_layout

\begin_layout Standard
Une bonne manière de déboguer les expressions consiste à ajouter des parenthèses
 pour rendre l'ordre d'évaluation explicite:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
y = x / (2 * 
\color green
π
\color inherit
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Lorsque vous n'êtes pas sûr de l'ordre d'évaluation, utilisez des parenthèses.
 Non seulement le programme sera correct (dans le sens où il exécutera votre
 intention) mais, de surcroît, il sera lisible pour ceux qui n'ont pas mémorisé
 l'ordre des opérations.
 
\end_layout

\begin_layout Subsection
J'ai une fonction qui ne retourne pas ce que j'attends
\end_layout

\begin_layout Standard
Si vous écrivez une déclaration de retour avec une expression complexe,
 vous vous privez de la possibilité d'afficher la valeur de retour avant
 que l'instruction 
\color blue
return
\color inherit
 ne soit exécutée.
 Là encore, il est astucieux de tirer parti d'une variable temporaire.
 Par exemple, au lieu de:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
return
\color inherit
 removematches(game.hands[i])
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
il est approprié d'écrire:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
count = removematches(game.hands[i])
\end_layout

\begin_layout Plain Layout

\size small
\color green
return
\color inherit
 count
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ainsi, devient-il possible d'afficher la valeur de 
\color blue
count
\color inherit
 avant que l'instruction 
\color blue
return
\color inherit
 ne soit exécutée.
\end_layout

\begin_layout Subsection
Je suis vraiment, vraiment coincé et j'ai besoin d'aide
\end_layout

\begin_layout Standard
D'abord, essayez de vous éloigner de l'ordinateur pendant quelques minutes.
 Travailler avec un ordinateur peut provoquer ces symptômes:
\end_layout

\begin_layout Itemize
frustration et rage,
\end_layout

\begin_layout Itemize
croyances superstitieuses (
\begin_inset Quotes cld
\end_inset

l'ordinateur me déteste
\begin_inset Quotes crd
\end_inset

) et pensées magiques (
\begin_inset Quotes cld
\end_inset

le programme ne fonctionne que lorsque je porte ma casquette à l'envers
\begin_inset Quotes crd
\end_inset

),
\end_layout

\begin_layout Itemize
tenter la programmation aléatoire (c'est-à-dire programmer en écrivant tous
 les programmes possibles et en choisissant celui qui procède de manière
 adéquate).
\end_layout

\begin_layout Standard
Si vous souffrez de l'un de ces symptômes, levez-vous et allez faire une
 promenade.
 Lorsque vous reviendrez au calme, pensez au programme.
 Que fait-il? Quelles sont les causes possibles de son comportement? Quand
 avez-vous reçu du programme de travail lors de la dernière exécution, et
 qu'avez-vous fait ensuite?
\end_layout

\begin_layout Standard
Parfois, il faut juste du temps pour trouver un bug.
 Les très bons programmeurs trouvent régulièrement des bugs quand ils se
 trouvent loin de leur(s) ordinateur(s) et qu'ils laissent leur esprit vagabonde
r.
 Les meilleurs endroits pour trouver des bugs sont les trains, les douches
 et le lit, juste avant de s'endormir.
 
\end_layout

\begin_layout Subsection
Non, j'ai vraiment besoin d'aide
\end_layout

\begin_layout Standard
Cela arrive.
 Même les meilleurs programmeurs se retrouvent occasionnellement bloqués.
 Parfois, vous travaillez sur un programme depuis si longtemps que vous
 ne pouvez plus voir l'erreur.
 Vous avez besoin d'un regard neuf.
\end_layout

\begin_layout Standard
Avant de faire appel à quelqu'un d'autre, assurez-vous que vous êtes prêt.
 Votre programme doit être aussi simple que possible et vous devez travailler
 sur la plus petite zone possible qui déclenche l'erreur.
 Vous devez avoir sous la main les instructions d'affichage aux endroits
 appropriés (et le résultat qu'elles produisent doit être compréhensible).
 Vous devez comprendre le problème suffisamment bien pour le décrire de
 manière concise et précise.
\end_layout

\begin_layout Standard
Lorsque vous appelez à l'aide, veillez donner les informations nécessaires:
\end_layout

\begin_layout Itemize
s'il y a un message d'erreur, de quoi s'agit-il et quelle partie du programme
 indique-t-il?
\end_layout

\begin_layout Itemize
quelle est la dernière modification insérée avant que cette erreur se produise?
 
\end_layout

\begin_layout Itemize
quelles sont les dernières lignes de code introduites, et/ou quel est la
 nouvelle batterie de tests qui échoue?
\end_layout

\begin_layout Itemize
qu'avez-vous essayé jusque là et qu'en avez-vous tiré?
\end_layout

\begin_layout Standard
Lorsque vous trouvez le bogue, prenez un peu de temps pour réfléchir à ce
 que vous auriez pu faire pour le trouver plus rapidement.
 La prochaine fois que vous verrez quelque chose de similaire, vous pourrez
 trouver le bogue plus rapidement.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

N'oubliez pas que le but n'est pas seulement de 
\emph on
faire
\emph default
 fonctionner le programme.
 L'objectif fondamental est d'
\emph on
apprendre
\emph default
 à faire fonctionner le programme.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Annexe A: Entrées Unicode
\end_layout

\begin_layout Standard
Le tableau suivant énumère quelques caractères Unicode parmi les nombreux
 qui peuvent être saisis par tabulation d'abréviations de type 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset


\begin_inset space ~
\end_inset

dans le REPL de Julia (ainsi que dans d'autres environnements associés à
 divers éditeurs).
\begin_inset Index idx
status open

\begin_layout Plain Layout
complétion, séquence de
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
caractères
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="33mm">
<column alignment="left" valignment="top" width="33mm">
<column alignment="left" valignment="top" width="33mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Caractères
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Séquence de complétion
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Représentation ASCII
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\color{white}.^{{\color{black}2}}}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
^2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\color{white}.}_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
_1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\color{white}.}_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
_2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/apple.png
	scale 28

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
:apple:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/banana.png
	scale 28

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
:banana:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/camel.png
	scale 20

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
:camel:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/pear.png
	scale 28

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
:pear:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/PNG/tutle3.png
	scale 28

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
:turtle:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
∩
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
cap
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
equiv
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
===
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $e$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
euler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
∈
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
in
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
in
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
≥
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
ge
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
>=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
≤
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
le
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
<=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
≠
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
ne
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
string!
\end_layout

\end_inset

=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
∉
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
notin
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
π
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
pi
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
pi
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
⊆
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
subseteq
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ε
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small

\backslash
varepsilon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Annexe A: entrées Unicode}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
\begin_inset CommandInset label
LatexCommand label
name "chap:Annexe-B:-Installation de Julia"

\end_inset

Annexe B: Installation de Julia
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markboth{Installation de Julia}{INSTALLATION DE JULIA}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Annexe B: Installation de Julia}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Situation-au-1er-janvier-2021"

\end_inset

Situation au 1er janvier 2021
\end_layout

\begin_layout Standard
Depuis la publication du livre Think Julia 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

, deux modifications importantes ont été décidées par les développeurs:
\end_layout

\begin_layout Itemize
l'abandon de la gratuité 
\emph on
sans restriction
\emph default
 de JuliaBox
\begin_inset Index idx
status open

\begin_layout Plain Layout
JuliaBox
\end_layout

\end_inset

 (voir la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Informatique-en-nuage"
plural "false"
caps "false"
noprefix "false"

\end_inset

) qui a des conséquences notamment sur l'utilisation de JuliaBox pour des
 cours Julia en direct, 
\end_layout

\begin_layout Itemize
le gel du développement de l'environnement de développement intégré Atom
\begin_inset Index idx
status open

\begin_layout Plain Layout
Atom
\end_layout

\end_inset

/Ju\SpecialChar softhyphen
no
\begin_inset Index idx
status open

\begin_layout Plain Layout
Juno
\end_layout

\end_inset

 –toujours installable et utilisable– et la migration vers Visual Studio
 Code
\begin_inset Index idx
status open

\begin_layout Plain Layout
Visual Studio Code
\end_layout

\end_inset

 ou vers Visual Studio Codium
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codium
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Visual Studio Codium
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Ce double choix a amené le traducteur à modifier la section 
\begin_inset Quotes cld
\end_inset

Utilisation des exemples de codes
\begin_inset Quotes crd
\end_inset

 ainsi que l'introduction du chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-conception-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et, à proposer la présente annexe.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Situation au 1er janvier 2021}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Julia en mode local
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Julia en mode local}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Julia est installable sur MS-Windows
\begin_inset Index idx
status open

\begin_layout Plain Layout
MS-Windows
\end_layout

\end_inset

, MacOS
\begin_inset Index idx
status open

\begin_layout Plain Layout
MacOS
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\end_layout

\end_inset

, GNU/
\noun on
Linux
\begin_inset Index idx
status open

\begin_layout Plain Layout

\noun on
GNU/Linux
\end_layout

\end_inset


\noun default
 et BSD
\begin_inset Index idx
status open

\begin_layout Plain Layout
BSD
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Le téléchargement se fait à partir du site 
\begin_inset CommandInset href
LatexCommand href
name "Download Julia"
target "https://julialang.org/downloads/"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
telechargement@téléchargement
\end_layout

\end_inset

 L'installation pour les différentes plateformes est décrite sur 
\begin_inset CommandInset href
LatexCommand href
name "Platform Specific Instructions for Official Binaries"
target "https://julialang.org/downloads/platform/"
literal "false"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
official binaries
\end_layout

\end_inset

 et 
\begin_inset CommandInset href
LatexCommand href
name "Platform Specific Instructions for Unofficial Binaries"
target "https://julialang.org/downloads/platform/"
literal "false"

\end_inset

.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
unofficial binaries
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Installation de binaires sous Ubuntu
\end_layout

\begin_layout Standard
Les binaires de la version stable (par exemple: julia-1.5.3) se trouvent 
\begin_inset CommandInset href
LatexCommand href
name "sous ce lien"
target "https://julialang.org/downloads/"
literal "false"

\end_inset

.
 En supposant que le fichier
\family sans
\color blue
 
\family default
julia-1.5.3-linux-x86_64.tar.gz
\color inherit
 ait été téléchargé dans le répertoire 
\color blue
$HOME/Téléchargements
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
sudo
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cp
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Téléchargements/julia-1.5.3-linux-x86_64.tar.gz
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

/usr/local
\end_layout

\begin_layout Plain Layout

\size small
\color blue
cd
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

/usr/local
\end_layout

\begin_layout Plain Layout

\size small
\color blue
tar
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-zxvf
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

julia-1.5.32-linux-x86_64.tar.gz
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 &&
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rm julia-1.5.3-linux-x86_64.tar.gz
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Ensuite, il convient de se rendre dans le fichier 
\color blue
$HOME/.bashrc
\color inherit
 et d'y ajouter
\begin_inset Foot
status open

\begin_layout Plain Layout
Pour que la modification de fichier soit prise en compte, il est nécessaire
 de sortir de la session et d'y revenir.
 Ceci permet de relire 
\color blue
.bashrc
\color inherit
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
.bashrc
\end_layout

\end_inset


\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
PATH=/usr/local/julia-1.5.3/bi
\begin_inset ERT
status open

\begin_layout Plain Layout

n
\backslash
string:
\end_layout

\end_inset

$PATH
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour
\begin_inset Index idx
status open

\begin_layout Plain Layout
PATH
\end_layout

\end_inset

 pouvoir travailler avec les caractères accentués et grecs, par exemple,
 repérez le fichier 
\color blue
startup.jl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
startup.jl
\end_layout

\end_inset


\color inherit
 et ajoutez-y:
\begin_inset Foot
status open

\begin_layout Plain Layout
Ceci peut se faire avec l'utilisation des commandes: 
\color blue
sudo updatedb
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
updatedb
\end_layout

\end_inset


\color inherit
 suivi (en mode utilisateur) de 
\color blue
locate
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
locate
\end_layout

\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
ENV[''GKS_ENCODING'']=''utf-8''
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Installation}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Installation de Visual Studio Codium
\end_layout

\begin_layout Standard
À côté d'éditeurs puissants comme Vim et Emacs, 
\begin_inset CommandInset href
LatexCommand href
name "Visual Studio Codium"
target "https://fr.wikipedia.org/wiki/Visual_Studio_Code"
literal "false"

\end_inset

 est un auxiliaire de développement très répandu.
 Sous Ubuntu, l'installation procède ainsi:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Codium
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Visual Studio Codium
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
sudo snap install codium
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le lancement se fait à partir de la ligne de commande (
\color blue
$ codium
\color inherit
)
\begin_inset Index idx
status open

\begin_layout Plain Layout
codium
\end_layout

\end_inset

 ou par l'icône déposée sur le bureau, ce qui permet d'obtenir une fenêtre
 comme celle représentée à la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Écran-de-Visual-Studio-Codium"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Pour obtenir cette fenêtre, il convient après l'ouverture de codium de
 se rendre sur l'onglet Terminal 
\begin_inset Formula $\rightarrow$
\end_inset

 New Terminal.
 L'écran principal est divisé en deux parties dont un terminal 
\color blue
bash
\color inherit
.
 Derrière l'invite, saisissez 
\color blue
julia
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/EPS-TIF-XCF-JPG/écran_visual_studio_codium.tif
	lyxscale 35
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Écran-de-Visual-Studio-Codium"

\end_inset

Écran de Visual Studio Codium.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
À ce stade, cliquez sur le bouton Extensions
\begin_inset Index idx
status open

\begin_layout Plain Layout
Extensions
\end_layout

\end_inset

 (5
\begin_inset script superscript

\begin_layout Plain Layout

\size small
ème
\end_layout

\end_inset

 bouton de la barre verticale gauche) et installez Julia 1.0.10 – Julia Language
 Support
\begin_inset Index idx
status open

\begin_layout Plain Layout
Julia Language Support
\end_layout

\end_inset

 (ce numéro n'est pas lié au numéro de version de Julia proprement-dit).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Installation de Visual Studio Codium}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Installation-de-modules"

\end_inset

Installation de modules
\end_layout

\begin_layout Standard
Tout au long de l'utilisation de Julia, il sera nécessaire d'installer des
 paquets
\begin_inset Index idx
status open

\begin_layout Plain Layout
paquets, installation
\end_layout

\end_inset

 (modules
\begin_inset Index idx
status open

\begin_layout Plain Layout
modules
\end_layout

\end_inset

, installation) complétant la bibliothèque standard.
\end_layout

\begin_layout Standard
L'installation de nouveaux paquets se fait dans le REPL de VSCodium (
\emph on
Read-Eval-Print Loop
\emph default
) qui se trouve dans la partie inférieure de la figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Écran-de-Visual-Studio-Codium"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (la hauteur de cet espace de travail est ajustable).
 
\end_layout

\begin_layout Subsubsection*
Ancienne Méthode
\end_layout

\begin_layout Standard
Si,
\begin_inset Index idx
status open

\begin_layout Plain Layout
paquets, ancienne méthode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
paquets, gestionnaire
\end_layout

\end_inset

 par exemple, on souhaite utiliser le paquet 
\color blue
Plots
\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
Plots
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\color black
Plots, installation
\end_layout

\end_inset


\color inherit
 (voir la sous-section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Exercice-13-12-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour réaliser des graphiques), il est possible d'appliquer la méthode suivante.
 Dans le REPL et une session active:
\begin_inset Index idx
status open

\begin_layout Plain Layout
using Pkg
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Pkg.add()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color blue
 
\color green
using
\color black
 Pkg
\end_layout

\begin_layout Plain Layout

\size small
\color black
Pkg.add(
\color brown
''Plots''
\color black
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
L'installation est automatique.
 Julia se charge d'établir les dépendances, les télécharge et les installe
 dans le répertoire 
\color blue
$HOME/.julia/packages
\color inherit
.
 
\end_layout

\begin_layout Subsubsection*
Nouvelle Méthode
\end_layout

\begin_layout Standard
Il existe toutefois une méthode plus moderne de procéder.
 Dans le REPL, derrière l'invite 
\color green
julia>
\color inherit
, saisissons le caractère 
\color blue
]
\color inherit
 (Alt-]):
\begin_inset Index idx
status open

\begin_layout Plain Layout
paquets, nouvelle méthode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color green
julia>
\size small
\color blue
 ]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Immédiatement, Julia nous fait basculer en mode gestionnaire de paquets
 (en l'occurrence pour la version 1.5):
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg>
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Après quoi, il est possible de demander l'incorporation d'un paquet.
 Par exemple, pour le paquet 
\color blue
Plots
\color inherit
:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
index{(
\begin_inset Quotes cld
\end_inset

@v1.x) pkg}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg >
\color black
 add Plots
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour quitter le gestionnaire de paquets, on peut utiliser la touche 
\emph on
backspace
\emph default
 ou la combinaison 
\color blue
Ctrl-C
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Installation de modules}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Carnets de travail: Jupyter et Pluto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Carnets de travail: Jupyter et Pluto}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Jupyter
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Jupyter}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le carnet Jupyter
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jupyter
\end_layout

\end_inset

 (Jupyter Notebook)
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jupyter, installation
\end_layout

\end_inset

 est un éditeur de feuilles de calcul qui fonctionne en local dans un navigateur.
 Il permet d'exécuter sur une même feuille des commandes et d'afficher leurs
 résultats, y compris des graphiques.
\end_layout

\begin_layout Standard
Sous Ubuntu, l'installation procède selon:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
sudo apt-get install jupyter
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
De retour dans VScodium, Julia activé et en mode gestionnaire de paquet:
\begin_inset Index idx
status open

\begin_layout Plain Layout
IJulia
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
IJulia, installation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg >
\color black
 add Ijulia
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Pour lancer Jupyter, dans un terminal bash de VSCodium:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color black
jupyter notebook
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Le navigateur présente une feuille du carnet Jupyter.
 En cliquant sur le bouton 
\begin_inset Quotes cld
\end_inset

Nouveau
\begin_inset Quotes crd
\end_inset

 (coin supérieur droit de la feuille) 
\begin_inset Formula $\longrightarrow$
\end_inset

 Julia-1.5.3, il est possible d'entrer du code.
 La figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Exemple-d'une-feuille-Jupyter"
plural "false"
caps "false"
noprefix "false"

\end_inset

 donne un exemple.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/EPS-TIF-XCF-JPG/jupyter_notebook_modif.tif
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Exemple-d'une-feuille-Jupyter"

\end_inset

Exemple d'une feuille de carnet Jupyter.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Pluto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{Pluto}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Pluto"
target "https://juliahub.com/docs/Pluto/OJqMt/0.7.4/"
literal "false"

\end_inset

 est un carnet –écrit en Julia– et dont les caractéristiques principales
 sont:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pluto
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Pluto, installation
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
la réactivité: lors de la modification d'une fonction ou d'une variable,
 Pluto met automatiquement à jour toutes les cellules affectées,
\end_layout

\begin_layout Itemize
le caractère intuitif et moderne: Pluto permet de créer des documents exportés,
 de belles factures avec des thèmes personnalisés.
\end_layout

\begin_layout Standard
Pour installer Pluto:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color blue
(@v1.5) pkg > 
\color black
add Pluto
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Après quoi, de retour dans Julia:
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pluto.run()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="110mm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 
\color green
using
\color inherit
 Pluto
\end_layout

\begin_layout Plain Layout

\size small
\color green
julia>
\color inherit
 Pluto.run()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La dernière commande ouvre une page du carnet dans votre navigateur.
 
\color blue
Ctrl-C
\color inherit
 permet de quitter Pluto et le retour dans une nouvelle session Julia.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Informatique-en-nuage"

\end_inset

Julia en nuage
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Informatique en nuage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est possible d'utiliser Julia
\begin_inset Index idx
status open

\begin_layout Plain Layout
Julia, cloud
\end_layout

\end_inset

 sur le 
\emph on
cloud
\emph default
 à l'intervention de 
\begin_inset CommandInset href
LatexCommand href
name "NextJournal"
target "https://staging.nextjournal.com/"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "CoCalc"
target "https://cocalc.com/app"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "mybinder"
target "https://mybinder.org/"
literal "false"

\end_inset

 ou 
\begin_inset CommandInset href
LatexCommand href
name "Repl.it"
target "https://repl.it/"
literal "false"

\end_inset

, par exemple.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
NextJournal
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
CoCalc
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Aide et documentation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Aide et documentation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Outre quelques livres cités dans la bibliographie, notamment les références
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1,key-2,key-3,key-4,key-5"
literal "false"

\end_inset

 et 
\begin_inset CommandInset citation
LatexCommand cite
key "key-10"
literal "false"

\end_inset

 (sans que cela ne soit exhaustif), le lecteur peut se référer à la 
\begin_inset CommandInset href
LatexCommand href
name "documentation officielle"
target "https://docs.julialang.org/en/v1/"
literal "false"

\end_inset

 pour laquelle existe un document 
\begin_inset CommandInset href
LatexCommand href
name "pdf téléchargeable"
target "https://raw.githubusercontent.com/JuliaLang/docs.julialang.org/assets/julia-1.5.3.pdf"
literal "false"

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Julia, documentation officielle
\end_layout

\end_inset

 Par ailleurs, 
\begin_inset CommandInset href
LatexCommand href
name "Julia Discourse"
target "https://discourse.julialang.org/"
literal "false"

\end_inset

 offre un espace de discussions techniques et d'aide extrêmement précieux.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Julia Discourse
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
\begin_inset CommandInset label
LatexCommand label
name "chap:Annexe-C:-Notes-de-traduction"

\end_inset

Annexe C: Notes de traduction 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markboth{Notes de traduction}{NOTES DE TRADUCTION}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plusieurs modifications, décrites ci-après, ont été introduites par rapport
 au document original.
 
\end_layout

\begin_layout Section*
Notes de bas de page
\end_layout

\begin_layout Standard
Toutes les notes de bas de page sont des compléments associés à la traduction
 sauf en ce qui concerne les notes associées aux pages 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Il-s'avère-qu'un"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Pour-une-discussion"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (note 3), 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Une-source-d'amusement"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Des-blagues-potentiellement"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:C'est-un-raccourci"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fn:Ironiquement,-le-fait"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (note 2), qui proviennent du document original.
\end_layout

\begin_layout Section*
Modifications du texte
\end_layout

\begin_layout Standard
Les sections suivantes ont été ajoutées au texte original en anglais:
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

Droits associés à la version française
\begin_inset Quotes crd
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

Préface de l'édition française
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Des modifications du texte original ont eu lieu dans:
\end_layout

\begin_layout Itemize
les sections « Utilisation des exemples de code » en 
\begin_inset CommandInset ref
LatexCommand pageref
reference "sec:Utilisation-des-exemples-de-code"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Mode-script"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (pour faire face à la situation décrite à la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Situation-au-1er-janvier-2021"
plural "false"
caps "false"
noprefix "false"

\end_inset

) ainsi que dans la section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Les-dictionnaires-collections-compteurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (pour expliciter pas à pas le fonctionnement de la fonction 
\color blue
histogram(
\size small
"
\size default
brontosaure
\size small
"
\size default
)
\color inherit
),
\end_layout

\begin_layout Itemize
le choix du répertoire de mots français (
\color blue
mots_FR.txt
\color inherit
, source: référence 
\begin_inset CommandInset citation
LatexCommand cite
key "key-8"
literal "false"

\end_inset

, chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Étude-de-cas-Jeux-de-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

) au lieu du répertoire de mots anglais 
\color blue
words.txt
\color inherit
,
\end_layout

\begin_layout Itemize
le choix du roman 
\emph on
Notre Dame de Paris
\emph default
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Histogramme-des-mots"
plural "false"
caps "false"
noprefix "false"

\end_inset

) au lieu du roman 
\emph on
Emma
\emph default
 utilisé dans l'édition anglaise,
\end_layout

\begin_layout Itemize
le choix d'un extrait du poème 
\emph on
Liberté
\emph default
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Analyse-de-Markov"
plural "false"
caps "false"
noprefix "false"

\end_inset

) au lieu d'
\emph on
Eric, the Half a Bee
\emph default
 dans l'édition anglaise.
\end_layout

\begin_layout Section*
Modifications des exemples de programmes
\end_layout

\begin_layout Standard
Aucune modification de noms de fonctions ou structures composites n'a eu
 lieu, sauf dans le chapitre 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Sous-typage"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour des raisons de clarté.
 En revanche, les arguments passés aux fonctions ou les paramètres des structure
s composites ont été francisés.
\end_layout

\begin_layout Section*
Ajouts de figures
\end_layout

\begin_layout Standard
Les figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Déplacement-de-la-tortue-en-avant"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Un-angle-droit-avec-Turtle"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:index-caractères"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schématisation-du-remplacement-lettre-chaine"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tableaux-et-indices."
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Représentation-du-dictionnaire-eng2fr"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Inversion-de-dictionnaire-avec-tableaux"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Écran-de-Visual-Studio-Codium"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sont des ajouts associés à la traduction.
 
\end_layout

\begin_layout Standard
Un croquis a été inséré dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Réaffectation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Compte tenu de la situation décrite à la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Situation-au-1er-janvier-2021"
plural "false"
caps "false"
noprefix "false"

\end_inset

, un écran de Jupyter (
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Exemple-d'une-feuille-Jupyter"
plural "false"
caps "false"
noprefix "false"

\end_inset

) fonctionnant en mode local sans JuliaBox substitue l'écran de Jupyter
 de l'édition originale en anglais.
 
\end_layout

\begin_layout Section*
Modifications de tableaux
\end_layout

\begin_layout Standard
Les tableaux 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Liste-des-mots-clés-Julia"
plural "false"
caps "false"
noprefix "false"

\end_inset

 et 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Liste-des-opérateurs-relationnels"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sont une mise en forme des informations originales.
\end_layout

\begin_layout Section*
Bibliographie
\end_layout

\begin_layout Standard
Dans la version française, la bibliographie a été concentrée dans une partie
 
\emph on
ad hoc
\emph default
.
 Les citations 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1,key-2,key-3,key-4,key-5"
literal "false"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "key-8"
literal "false"

\end_inset

 et 
\begin_inset CommandInset citation
LatexCommand cite
key "key-10"
literal "false"

\end_inset

 constituent des ajouts associés à la traduction.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Annexe C: Notes de traduction}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"
literal "false"

\end_inset

Ben Lauwens et Allen B.
 Downey, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Think Julia: How to Think Like a Computer Scientist}"
target "https://shop.aer.io/oreilly/p/think-julia/9781492045038-9149"
literal "true"

\end_inset

, O'Reilly, Sebastopol CA95472, 2019
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"
literal "false"

\end_inset

Georg Root, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{The Julia Language Handbook}"
target "https://www.goodreads.com/book/show/44001969-the-julia-language-handbook"
literal "true"

\end_inset

, publication indépendante, 2019
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"
literal "false"

\end_inset

Andrian Salceanu, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Julia Programming Projects: Learn Julia 1.x by building apps for data analysis, visualization, machine learning, and the web}"
target "https://books.google.be/books/about/Julia_Programming_Projects.html?id=z52BDwAAQBAJ&redir_esc=y"
literal "true"

\end_inset

, Packt, Birmingham, 2018
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"
literal "false"

\end_inset

Ivo Balbaert, Adrian Salceanu, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Julia 1.0 Programming Complete Reference Guide: Discover Julia, a high-performance language for technical computing}"
target "https://books.google.be/books/about/Julia_1_0_Programming_Complete_Reference.html?id=zpmZDwAAQBAJ&redir_esc=y"
literal "true"

\end_inset

, Packt, Birmingham, 2019
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"
literal "false"

\end_inset

Olivier Garet, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Introduction à Julia: Programmer des mathématiques}"
target "http://www.iecl.univ-lorraine.fr/~Olivier.Garet/livre_julia/"
literal "true"

\end_inset

, publication indépendante, 2020
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"
literal "false"

\end_inset

Steve Oualline, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Practical C Programming}"
target "https://www.oreilly.com/library/view/practical-c-programming/1565923065/"
literal "true"

\end_inset

, O'Reilly Media, 1997
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-7"
literal "false"

\end_inset

Michael Sipser, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Introduction to the Theory of Computation}"
target "https://www.mog.dog/files/SP2019/Sipser_Introduction.to.the.Theory.of.Computation.3E.pdf"
literal "true"

\end_inset

, 3th.
 Ed., Cengage Learning, 2012
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-8"
literal "false"

\end_inset

Christophe Pythoud, 
\emph on

\begin_inset CommandInset href
LatexCommand href
name "\\textit{Français-GUTenberg: un nouveau dictionnaire français pour ISPELL. Problèmes résolus et intégration de contributions extérieures}"
target "http://cahiers.gutenberg.eu.org/cg-bin/article/CG_1998___28-29_252_0.pdf"
literal "true"

\end_inset


\emph default
, Cahiers GUTenberg, n° 28-29, pp.
 252-275, 1998
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"
literal "false"

\end_inset

Brian K.
 Kerninghan et Rob Pike, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{The Pratice of Programming}"
target "https://www.goodreads.com/book/show/1032758.The_Practice_of_Programming"
literal "true"

\end_inset

, Addison-Wesley, 1999
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-10"
literal "false"

\end_inset

Avik Sengupta, 
\begin_inset CommandInset href
LatexCommand href
name "\\textit{Julia High Performance}"
target "https://www.packtpub.com/product/julia-high-performance-second-edition/9781788298117"
literal "true"

\end_inset

, Packt, Birmingham, 2nd.
 Ed., 2019 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Bibliographie}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Index des fonctions extrinsèques}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "ind"
name "Index des fonctions extrinsèques"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\color white
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Index}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter*
Quatrième de couverture
\end_layout

\begin_layout Standard
Si vous souhaitez commencer à programmer, Julia est un excellent langage
 compilé à la volée (
\emph on
Just In Time
\emph default
, JIT), dynamiquement typé et doté d'une syntaxe élégante et soignée.
 Ce guide pratique utilise Julia (version 
\begin_inset Formula $\geq$
\end_inset

 1.0) pour apprendre à programmer de manière progressive, en commençant par
 les concepts de base de la programmation avant de passer à des fonctionnalités
 plus avancées, telles que la création de nouveaux types, le polymorphisme,
 la méta-programmation et le 
\emph on
dispatch multiple
\emph default
.
\end_layout

\begin_layout Standard
Conçu dès le départ pour être très performant, Julia est un langage polyvalent,
 idéal non seulement pour l'analyse numérique et les sciences informatiques,
 mais aussi pour la programmation web ou la création de scripts.
 Grâce à des exercices accompagnant chaque chapitre, vous pourrez tester
 les notions de programmation au fur et à mesure de leur apprentissage.
\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset

Think Julia
\begin_inset Quotes crd
\end_inset

 est idéal pour les ingénieurs, les étudiants de niveau secondaire et universita
ire ainsi que pour les autodidactes, les étudiants scolarisés à domicile
 et les professionnels devant apprendre les bases de la programmation moderne.
\end_layout

\begin_layout Itemize
Commencez par les bases, y compris la syntaxe et la sémantique du langage
\end_layout

\begin_layout Itemize
Accédez une définition claire de chaque notion de programmation
\end_layout

\begin_layout Itemize
Apprenez à manipuler les valeurs, les variables, les énoncés, les fonctions
 et les structures de données dans une progression logique
\end_layout

\begin_layout Itemize
Découvrez comment exploiter des fichiers et des bases de données
\end_layout

\begin_layout Itemize
Créez et gérez les types, les méthodes et le 
\emph on
dispatch multiple
\end_layout

\begin_layout Itemize
Utilisez des techniques de débogage performantes pour corriger les erreurs
 de syntaxe, d'exécution et de sémantique
\end_layout

\begin_layout Itemize
Explorez la conception d'interfaces et les structures de données à travers
 des études de cas
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Quatrième de couverture}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
